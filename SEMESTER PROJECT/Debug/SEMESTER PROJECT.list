
SEMESTER PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008878  08008878  00018878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001e4  08008ef0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08008ef0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001126a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e2  00000000  00000000  0003147e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00033c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d9  00000000  00000000  00035be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013167  00000000  00000000  0004e2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958e6  00000000  00000000  00061420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  000f6d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008860 	.word	0x08008860

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008860 	.word	0x08008860

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	80fb      	strh	r3, [r7, #6]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	2b3f      	cmp	r3, #63	; 0x3f
 8000f74:	dc01      	bgt.n	8000f7a <bytestowrite+0x1e>
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	e003      	b.n	8000f82 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f80:	b29b      	uxth	r3, r3
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	; 0x38
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	81bb      	strh	r3, [r7, #12]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	89bb      	ldrh	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da00      	bge.n	8000fba <EEPROM_Write+0x2a>
 8000fb8:	333f      	adds	r3, #63	; 0x3f
 8000fba:	119b      	asrs	r3, r3, #6
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000fc4:	8b7a      	ldrh	r2, [r7, #26]
 8000fc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	e034      	b.n	8001044 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000fda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000fee:	89ba      	ldrh	r2, [r7, #12]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffb1 	bl	8000f5c <bytestowrite>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	4413      	add	r3, r2
 8001004:	8af9      	ldrh	r1, [r7, #22]
 8001006:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100a:	9202      	str	r2, [sp, #8]
 800100c:	8aba      	ldrh	r2, [r7, #20]
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	460a      	mov	r2, r1
 8001016:	21a0      	movs	r1, #160	; 0xa0
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <EEPROM_Write+0xc8>)
 800101a:	f001 ffe3 	bl	8002fe4 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800101e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001020:	3301      	adds	r3, #1
 8001022:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8001024:	2300      	movs	r3, #0
 8001026:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8001028:	88fa      	ldrh	r2, [r7, #6]
 800102a:	8abb      	ldrh	r3, [r7, #20]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8001030:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001032:	8abb      	ldrh	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8001038:	2005      	movs	r0, #5
 800103a:	f001 fa7f 	bl	800253c <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	3301      	adds	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	8b3b      	ldrh	r3, [r7, #24]
 8001046:	6a3a      	ldr	r2, [r7, #32]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbc6      	blt.n	8000fda <EEPROM_Write+0x4a>
	}
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000228 	.word	0x20000228

0800105c <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b098      	sub	sp, #96	; 0x60
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 8001066:	2306      	movs	r3, #6
 8001068:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 800106a:	88fa      	ldrh	r2, [r7, #6]
 800106c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2240      	movs	r2, #64	; 0x40
 800107c:	21ff      	movs	r1, #255	; 0xff
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fcee 	bl	8005a60 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8001084:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2302      	movs	r3, #2
 800109a:	21a0      	movs	r1, #160	; 0xa0
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <EEPROM_PageErase+0x54>)
 800109e:	f001 ffa1 	bl	8002fe4 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 80010a2:	2005      	movs	r0, #5
 80010a4:	f001 fa4a 	bl	800253c <HAL_Delay>
}
 80010a8:	bf00      	nop
 80010aa:	3750      	adds	r7, #80	; 0x50
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000228 	.word	0x20000228

080010b4 <BMP180_Get_Calibration_Value>:
	int16_t unCompTemperature;
	float Temperature;
	int32_t tX1,tX2,tB5;

	void BMP180_Get_Calibration_Value()
	{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af04      	add	r7, sp, #16
	   int a=0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
	   uint8_t calibBuff[BMP_180_CALIBRATION_VALUE_LENGTH]= {0}  ;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	821a      	strh	r2, [r3, #16]

	   HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS,BMP180_CALIBRATION_START_ADDRESS,1, calibBuff, 22, 100);
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2316      	movs	r3, #22
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	22aa      	movs	r2, #170	; 0xaa
 80010e2:	21ef      	movs	r1, #239	; 0xef
 80010e4:	48a8      	ldr	r0, [pc, #672]	; (8001388 <BMP180_Get_Calibration_Value+0x2d4>)
 80010e6:	f002 f877 	bl	80031d8 <HAL_I2C_Mem_Read>

		 AC1 = (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 80010ea:	1d3a      	adds	r2, r7, #4
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	3320      	adds	r3, #32
 80010fc:	443b      	add	r3, r7
 80010fe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	4ba0      	ldr	r3, [pc, #640]	; (800138c <BMP180_Get_Calibration_Value+0x2d8>)
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3302      	adds	r3, #2
 8001110:	61fb      	str	r3, [r7, #28]
		 AC2 = (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 8001112:	1d3a      	adds	r2, r7, #4
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	3320      	adds	r3, #32
 8001124:	443b      	add	r3, r7
 8001126:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b97      	ldr	r3, [pc, #604]	; (8001390 <BMP180_Get_Calibration_Value+0x2dc>)
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3302      	adds	r3, #2
 8001138:	61fb      	str	r3, [r7, #28]
		 AC3= (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 800113a:	1d3a      	adds	r2, r7, #4
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	3320      	adds	r3, #32
 800114c:	443b      	add	r3, r7
 800114e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b8e      	ldr	r3, [pc, #568]	; (8001394 <BMP180_Get_Calibration_Value+0x2e0>)
 800115a:	801a      	strh	r2, [r3, #0]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3302      	adds	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
		 AC4= (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 8001162:	1d3a      	adds	r2, r7, #4
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	3320      	adds	r3, #32
 8001174:	443b      	add	r3, r7
 8001176:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b85      	ldr	r3, [pc, #532]	; (8001398 <BMP180_Get_Calibration_Value+0x2e4>)
 8001182:	801a      	strh	r2, [r3, #0]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	3302      	adds	r3, #2
 8001188:	61fb      	str	r3, [r7, #28]
		 AC5= (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	3320      	adds	r3, #32
 800119c:	443b      	add	r3, r7
 800119e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b7c      	ldr	r3, [pc, #496]	; (800139c <BMP180_Get_Calibration_Value+0x2e8>)
 80011aa:	801a      	strh	r2, [r3, #0]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3302      	adds	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
		 AC6= (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	3320      	adds	r3, #32
 80011c4:	443b      	add	r3, r7
 80011c6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <BMP180_Get_Calibration_Value+0x2ec>)
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	3302      	adds	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
		 B1=  (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 80011da:	1d3a      	adds	r2, r7, #4
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4413      	add	r3, r2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	3320      	adds	r3, #32
 80011ec:	443b      	add	r3, r7
 80011ee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b6a      	ldr	r3, [pc, #424]	; (80013a4 <BMP180_Get_Calibration_Value+0x2f0>)
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3302      	adds	r3, #2
 8001200:	61fb      	str	r3, [r7, #28]
		 B2=  (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 8001202:	1d3a      	adds	r2, r7, #4
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	3320      	adds	r3, #32
 8001214:	443b      	add	r3, r7
 8001216:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b61      	ldr	r3, [pc, #388]	; (80013a8 <BMP180_Get_Calibration_Value+0x2f4>)
 8001222:	801a      	strh	r2, [r3, #0]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3302      	adds	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
		 MB=  (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 800122a:	1d3a      	adds	r2, r7, #4
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	3320      	adds	r3, #32
 800123c:	443b      	add	r3, r7
 800123e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b58      	ldr	r3, [pc, #352]	; (80013ac <BMP180_Get_Calibration_Value+0x2f8>)
 800124a:	801a      	strh	r2, [r3, #0]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3302      	adds	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
		 MC=  (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 8001252:	1d3a      	adds	r2, r7, #4
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	3320      	adds	r3, #32
 8001264:	443b      	add	r3, r7
 8001266:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <BMP180_Get_Calibration_Value+0x2fc>)
 8001272:	801a      	strh	r2, [r3, #0]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	3302      	adds	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
		 MD=  (int16_t)((calibBuff[a]<<8) | calibBuff[a+1]); a+=2;
 800127a:	1d3a      	adds	r2, r7, #4
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	3320      	adds	r3, #32
 800128c:	443b      	add	r3, r7
 800128e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <BMP180_Get_Calibration_Value+0x300>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3302      	adds	r3, #2
 80012a0:	61fb      	str	r3, [r7, #28]

		 if((AC1==0x00 )| (AC1==0xFFFF))
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <BMP180_Get_Calibration_Value+0x2d8>)
 80012a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <BMP180_Get_Calibration_Value+0x204>
		 {
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2120      	movs	r1, #32
 80012b0:	4841      	ldr	r0, [pc, #260]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 80012b2:	f001 fbfd 	bl	8002ab0 <HAL_GPIO_WritePin>
			 while(1);
 80012b6:	e7fe      	b.n	80012b6 <BMP180_Get_Calibration_Value+0x202>
		 }
		 if((AC2==0x00) | (AC2==0xFFFF))
 80012b8:	4b35      	ldr	r3, [pc, #212]	; (8001390 <BMP180_Get_Calibration_Value+0x2dc>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <BMP180_Get_Calibration_Value+0x21a>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2120      	movs	r1, #32
 80012c6:	483c      	ldr	r0, [pc, #240]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 80012c8:	f001 fbf2 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 80012cc:	e7fe      	b.n	80012cc <BMP180_Get_Calibration_Value+0x218>
			 }

		 if((AC3==0x00 )| (AC3==0xFFFF))
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <BMP180_Get_Calibration_Value+0x2e0>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <BMP180_Get_Calibration_Value+0x230>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2120      	movs	r1, #32
 80012dc:	4836      	ldr	r0, [pc, #216]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 80012de:	f001 fbe7 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 80012e2:	e7fe      	b.n	80012e2 <BMP180_Get_Calibration_Value+0x22e>
			 }

		 if((AC4==0x00) | (AC4==0xFFFF))
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <BMP180_Get_Calibration_Value+0x2e4>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d105      	bne.n	80012fa <BMP180_Get_Calibration_Value+0x246>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2120      	movs	r1, #32
 80012f2:	4831      	ldr	r0, [pc, #196]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 80012f4:	f001 fbdc 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 80012f8:	e7fe      	b.n	80012f8 <BMP180_Get_Calibration_Value+0x244>
			 }

		 if((AC5==0x00) | (AC5==0xFFFF))
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <BMP180_Get_Calibration_Value+0x2e8>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <BMP180_Get_Calibration_Value+0x25c>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2120      	movs	r1, #32
 8001308:	482b      	ldr	r0, [pc, #172]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 800130a:	f001 fbd1 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 800130e:	e7fe      	b.n	800130e <BMP180_Get_Calibration_Value+0x25a>
			 }

		 if((AC6==0x00) | (AC6==0xFFFF))
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <BMP180_Get_Calibration_Value+0x2ec>)
 8001312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <BMP180_Get_Calibration_Value+0x272>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2120      	movs	r1, #32
 800131e:	4826      	ldr	r0, [pc, #152]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 8001320:	f001 fbc6 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 8001324:	e7fe      	b.n	8001324 <BMP180_Get_Calibration_Value+0x270>
			 }

		 if((B2==0x00 )| (B2==0xFFFF))
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <BMP180_Get_Calibration_Value+0x2f4>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <BMP180_Get_Calibration_Value+0x288>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2120      	movs	r1, #32
 8001334:	4820      	ldr	r0, [pc, #128]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 8001336:	f001 fbbb 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 800133a:	e7fe      	b.n	800133a <BMP180_Get_Calibration_Value+0x286>
			 }

		 if((MB==0x00) | (MB==0xFFFF))
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <BMP180_Get_Calibration_Value+0x2f8>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <BMP180_Get_Calibration_Value+0x29e>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2120      	movs	r1, #32
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 800134c:	f001 fbb0 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 8001350:	e7fe      	b.n	8001350 <BMP180_Get_Calibration_Value+0x29c>
			 }

		 if( (MC==0x00) | (MC==0xFFFF))
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <BMP180_Get_Calibration_Value+0x2fc>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <BMP180_Get_Calibration_Value+0x2b4>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2120      	movs	r1, #32
 8001360:	4815      	ldr	r0, [pc, #84]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 8001362:	f001 fba5 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 8001366:	e7fe      	b.n	8001366 <BMP180_Get_Calibration_Value+0x2b2>
			 }
		 if((MD==0x00 )| ( MD==0xFFFF))
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <BMP180_Get_Calibration_Value+0x300>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d105      	bne.n	800137e <BMP180_Get_Calibration_Value+0x2ca>
		 {
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2120      	movs	r1, #32
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <BMP180_Get_Calibration_Value+0x304>)
 8001378:	f001 fb9a 	bl	8002ab0 <HAL_GPIO_WritePin>
				 while(1);
 800137c:	e7fe      	b.n	800137c <BMP180_Get_Calibration_Value+0x2c8>
			 }




	}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000228 	.word	0x20000228
 800138c:	20000200 	.word	0x20000200
 8001390:	20000202 	.word	0x20000202
 8001394:	20000204 	.word	0x20000204
 8001398:	20000206 	.word	0x20000206
 800139c:	20000208 	.word	0x20000208
 80013a0:	2000020a 	.word	0x2000020a
 80013a4:	2000020c 	.word	0x2000020c
 80013a8:	2000020e 	.word	0x2000020e
 80013ac:	20000210 	.word	0x20000210
 80013b0:	20000212 	.word	0x20000212
 80013b4:	20000214 	.word	0x20000214
 80013b8:	40020000 	.word	0x40020000

080013bc <BMP180_Init>:
	void BMP180_Init()
	{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

		if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 100000)!= HAL_OK)
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <BMP180_Init+0x28>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <BMP180_Init+0x2c>)
 80013c8:	f002 f92c 	bl	8003624 <HAL_I2C_IsDeviceReady>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <BMP180_Init+0x20>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2120      	movs	r1, #32
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <BMP180_Init+0x30>)
 80013d8:	f001 fb6a 	bl	8002ab0 <HAL_GPIO_WritePin>

		BMP180_Get_Calibration_Value();
 80013dc:	f7ff fe6a 	bl	80010b4 <BMP180_Get_Calibration_Value>

	}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	000186a0 	.word	0x000186a0
 80013e8:	20000228 	.word	0x20000228
 80013ec:	40020000 	.word	0x40020000

080013f0 <BMP180_Get_Uncompansated_Temperature>:
	void BMP180_Get_Uncompansated_Temperature()
	{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af04      	add	r7, sp, #16
		uint8_t rData[2]={0};
 80013f6:	2300      	movs	r3, #0
 80013f8:	80bb      	strh	r3, [r7, #4]
		uint8_t wData[1];
		wData[0]=0x2E;
 80013fa:	232e      	movs	r3, #46	; 0x2e
 80013fc:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1,BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4,1,wData,1,100000);
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <BMP180_Get_Uncompansated_Temperature+0x60>)
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	463b      	mov	r3, r7
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2301      	movs	r3, #1
 800140c:	22f4      	movs	r2, #244	; 0xf4
 800140e:	21ee      	movs	r1, #238	; 0xee
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <BMP180_Get_Uncompansated_Temperature+0x64>)
 8001412:	f001 fde7 	bl	8002fe4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001416:	2005      	movs	r0, #5
 8001418:	f001 f890 	bl	800253c <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS,0xF6, 1, rData, 2, 100000);
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <BMP180_Get_Uncompansated_Temperature+0x60>)
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2302      	movs	r3, #2
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2301      	movs	r3, #1
 800142a:	22f6      	movs	r2, #246	; 0xf6
 800142c:	21ef      	movs	r1, #239	; 0xef
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <BMP180_Get_Uncompansated_Temperature+0x64>)
 8001430:	f001 fed2 	bl	80031d8 <HAL_I2C_Mem_Read>

	unCompTemperature=(int16_t)((rData[0]<<8) | rData[1]);
 8001434:	793b      	ldrb	r3, [r7, #4]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	797b      	ldrb	r3, [r7, #5]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <BMP180_Get_Uncompansated_Temperature+0x68>)
 8001444:	801a      	strh	r2, [r3, #0]


	}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	000186a0 	.word	0x000186a0
 8001454:	20000228 	.word	0x20000228
 8001458:	20000216 	.word	0x20000216
 800145c:	00000000 	.word	0x00000000

08001460 <BMP180_Get_Temperature>:
	float BMP180_Get_Temperature()
	{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	  BMP180_Get_Uncompansated_Temperature();
 8001464:	f7ff ffc4 	bl	80013f0 <BMP180_Get_Uncompansated_Temperature>
	  tX1=((int32_t)unCompTemperature - (int32_t)AC6) * (int32_t)AC5 / 32768;
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <BMP180_Get_Temperature+0xe0>)
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	461a      	mov	r2, r3
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <BMP180_Get_Temperature+0xe4>)
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a33      	ldr	r2, [pc, #204]	; (8001548 <BMP180_Get_Temperature+0xe8>)
 800147a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	da02      	bge.n	800148c <BMP180_Get_Temperature+0x2c>
 8001486:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800148a:	337f      	adds	r3, #127	; 0x7f
 800148c:	13db      	asrs	r3, r3, #15
 800148e:	461a      	mov	r2, r3
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <BMP180_Get_Temperature+0xec>)
 8001492:	601a      	str	r2, [r3, #0]
	  tX2=((int32_t)MC * 2048) / (tX1 + (int32_t)MD);
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <BMP180_Get_Temperature+0xf0>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	02da      	lsls	r2, r3, #11
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <BMP180_Get_Temperature+0xf4>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <BMP180_Get_Temperature+0xec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	440b      	add	r3, r1
 80014aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ae:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <BMP180_Get_Temperature+0xf8>)
 80014b0:	6013      	str	r3, [r2, #0]

	  if((tX1==0 )|(tX2==0))
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <BMP180_Get_Temperature+0xec>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf0c      	ite	eq
 80014ba:	2301      	moveq	r3, #1
 80014bc:	2300      	movne	r3, #0
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <BMP180_Get_Temperature+0xf8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <BMP180_Get_Temperature+0x82>
	  {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2120      	movs	r1, #32
 80014da:	4820      	ldr	r0, [pc, #128]	; (800155c <BMP180_Get_Temperature+0xfc>)
 80014dc:	f001 fae8 	bl	8002ab0 <HAL_GPIO_WritePin>
		 while(1);
 80014e0:	e7fe      	b.n	80014e0 <BMP180_Get_Temperature+0x80>
	  }

	  tB5=tX1+tX2;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <BMP180_Get_Temperature+0xec>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <BMP180_Get_Temperature+0xf8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <BMP180_Get_Temperature+0x100>)
 80014ee:	6013      	str	r3, [r2, #0]
	  Temperature= (float) (tB5+8) / 16 * 0.1;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <BMP180_Get_Temperature+0x100>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3308      	adds	r3, #8
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001502:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001506:	ee16 0a90 	vmov	r0, s13
 800150a:	f7ff f825 	bl	8000558 <__aeabi_f2d>
 800150e:	a30a      	add	r3, pc, #40	; (adr r3, 8001538 <BMP180_Get_Temperature+0xd8>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f878 	bl	8000608 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb4a 	bl	8000bb8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <BMP180_Get_Temperature+0x104>)
 8001528:	6013      	str	r3, [r2, #0]
	  return Temperature;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <BMP180_Get_Temperature+0x104>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	ee07 3a90 	vmov	s15, r3

	}
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	bd80      	pop	{r7, pc}
 8001538:	9999999a 	.word	0x9999999a
 800153c:	3fb99999 	.word	0x3fb99999
 8001540:	20000216 	.word	0x20000216
 8001544:	2000020a 	.word	0x2000020a
 8001548:	20000208 	.word	0x20000208
 800154c:	2000021c 	.word	0x2000021c
 8001550:	20000212 	.word	0x20000212
 8001554:	20000214 	.word	0x20000214
 8001558:	20000220 	.word	0x20000220
 800155c:	40020000 	.word	0x40020000
 8001560:	20000224 	.word	0x20000224
 8001564:	20000218 	.word	0x20000218

08001568 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af02      	add	r7, sp, #8
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	f043 030c 	orr.w	r3, r3, #12
 8001586:	b2db      	uxtb	r3, r3
 8001588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	b2db      	uxtb	r3, r3
 8001592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	f043 030c 	orr.w	r3, r3, #12
 800159a:	b2db      	uxtb	r3, r3
 800159c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2304      	movs	r3, #4
 80015b2:	214e      	movs	r1, #78	; 0x4e
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <lcd_send_cmd+0x5c>)
 80015b6:	f001 fc17 	bl	8002de8 <HAL_I2C_Master_Transmit>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000228 	.word	0x20000228

080015c8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f023 030f 	bic.w	r3, r3, #15
 80015d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f043 030d 	orr.w	r3, r3, #13
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	f043 0309 	orr.w	r3, r3, #9
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	f043 030d 	orr.w	r3, r3, #13
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	f043 0309 	orr.w	r3, r3, #9
 8001604:	b2db      	uxtb	r3, r3
 8001606:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2304      	movs	r3, #4
 8001612:	214e      	movs	r1, #78	; 0x4e
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <lcd_send_data+0x5c>)
 8001616:	f001 fbe7 	bl	8002de8 <HAL_I2C_Master_Transmit>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000228 	.word	0x20000228

08001628 <lcd_init>:

void lcd_init (void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff ff9b 	bl	8001568 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8001632:	2028      	movs	r0, #40	; 0x28
 8001634:	f7ff ff98 	bl	8001568 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8001638:	200c      	movs	r0, #12
 800163a:	f7ff ff95 	bl	8001568 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800163e:	2080      	movs	r0, #128	; 0x80
 8001640:	f7ff ff92 	bl	8001568 <lcd_send_cmd>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	while (*str)
 8001650:	e006      	b.n	8001660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ffb4 	bl	80015c8 <lcd_send_data>
	while (*str)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f4      	bne.n	8001652 <lcd_send_string+0xa>
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <lcd_clear>:
void lcd_clear(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
 	            lcd_send_cmd(0x80);
 8001678:	2080      	movs	r0, #128	; 0x80
 800167a:	f7ff ff75 	bl	8001568 <lcd_send_cmd>
	        	lcd_send_string("                ");
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <lcd_clear+0x20>)
 8001680:	f7ff ffe2 	bl	8001648 <lcd_send_string>
	        	lcd_send_cmd(0xC0);
 8001684:	20c0      	movs	r0, #192	; 0xc0
 8001686:	f7ff ff6f 	bl	8001568 <lcd_send_cmd>
	        	lcd_send_string("                ");
 800168a:	4802      	ldr	r0, [pc, #8]	; (8001694 <lcd_clear+0x20>)
 800168c:	f7ff ffdc 	bl	8001648 <lcd_send_string>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	08008878 	.word	0x08008878

08001698 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t time)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
while(time--);
 80016a0:	bf00      	nop
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1fa      	bne.n	80016a2 <delay+0xa>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	mytemperature=momenterytemp;
 80016c4:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a33      	ldr	r2, [pc, #204]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016ca:	6013      	str	r3, [r2, #0]
	while(a!=0)
 80016cc:	e03e      	b.n	800174c <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		if(momenterytemp>maxValue)
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dd03      	ble.n	80016ec <HAL_TIM_PeriodElapsedCallback+0x30>
		{
		maxValue=momenterytemp;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2c      	ldr	r2, [pc, #176]	; (800179c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016ea:	6013      	str	r3, [r2, #0]
		}
	    if(momenterytemp<minValue)
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	d503      	bpl.n	800170a <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
		minValue=momenterytemp;
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001708:	6013      	str	r3, [r2, #0]
		}
		if(momenterytemp>maxValueDay)
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	dd03      	ble.n	8001728 <HAL_TIM_PeriodElapsedCallback+0x6c>
	    {
		maxValueDay=momenterytemp;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001726:	6013      	str	r3, [r2, #0]
		}
		if(momenterytemp<minValueDay)
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d503      	bpl.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
		minValueDay=momenterytemp;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001744:	6013      	str	r3, [r2, #0]
		}
        a=0;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
	while(a!=0)
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1bc      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x12>
	}

	if(dailyexample==2880)
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 800175c:	d10a      	bne.n	8001774 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		maxValueDay=momenterytemp;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001764:	6013      	str	r3, [r2, #0]
		minValueDay=momenterytemp;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800176c:	6013      	str	r3, [r2, #0]
		dailyexample=0;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
	}
	a++;
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800177c:	6013      	str	r3, [r2, #0]
	dailyexample++;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	200002e8 	.word	0x200002e8
 8001798:	200002e4 	.word	0x200002e4
 800179c:	200002f8 	.word	0x200002f8
 80017a0:	200002f4 	.word	0x200002f4
 80017a4:	200002f0 	.word	0x200002f0
 80017a8:	200002ec 	.word	0x200002ec
 80017ac:	2000034c 	.word	0x2000034c
 80017b0:	20000354 	.word	0x20000354

080017b4 <set_time>:
void set_time(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x13;
 80017cc:	2313      	movs	r3, #19
 80017ce:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x30;
 80017d0:	2330      	movs	r3, #48	; 0x30
 80017d2:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x10;
 80017d4:	2310      	movs	r3, #16
 80017d6:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2201      	movs	r2, #1
 80017e4:	4619      	mov	r1, r3
 80017e6:	4812      	ldr	r0, [pc, #72]	; (8001830 <set_time+0x7c>)
 80017e8:	f003 fa10 	bl	8004c0c <HAL_RTC_SetTime>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <set_time+0x42>
	  {
	    Error_Handler();
 80017f2:	f000 fbd1 	bl	8001f98 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80017f6:	2302      	movs	r3, #2
 80017f8:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_MAY;
 80017fa:	2305      	movs	r3, #5
 80017fc:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x31;
 80017fe:	2331      	movs	r3, #49	; 0x31
 8001800:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 8001802:	2322      	movs	r3, #34	; 0x22
 8001804:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	2201      	movs	r2, #1
 800180a:	4619      	mov	r1, r3
 800180c:	4808      	ldr	r0, [pc, #32]	; (8001830 <set_time+0x7c>)
 800180e:	f003 faf5 	bl	8004dfc <HAL_RTC_SetDate>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <set_time+0x68>
	  {
	    Error_Handler();
 8001818:	f000 fbbe 	bl	8001f98 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 1 */
       HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1, 0x32F2);
 800181c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001820:	2101      	movs	r1, #1
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <set_time+0x7c>)
 8001824:	f003 fc7a 	bl	800511c <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 1 */
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000027c 	.word	0x2000027c

08001834 <get_time>:

void get_time(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc,&gTime, RTC_FORMAT_BIN);
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <get_time+0x58>)
 8001842:	f003 fa7d 	bl	8004d40 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&gDate, RTC_FORMAT_BIN);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <get_time+0x58>)
 8001850:	f003 fb58 	bl	8004f04 <HAL_RTC_GetDate>


	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 8001854:	783b      	ldrb	r3, [r7, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	4619      	mov	r1, r3
 800185c:	78bb      	ldrb	r3, [r7, #2]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	490b      	ldr	r1, [pc, #44]	; (8001890 <get_time+0x5c>)
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <get_time+0x60>)
 8001866:	f004 fd6d 	bl	8006344 <siprintf>

	sprintf((char*)date,"%02d-%02d-%02d",gDate.Date,gDate.Month,gDate.Year+2000);
 800186a:	7dbb      	ldrb	r3, [r7, #22]
 800186c:	461a      	mov	r2, r3
 800186e:	7d7b      	ldrb	r3, [r7, #21]
 8001870:	4619      	mov	r1, r3
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	4906      	ldr	r1, [pc, #24]	; (8001898 <get_time+0x64>)
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <get_time+0x68>)
 8001880:	f004 fd60 	bl	8006344 <siprintf>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000027c 	.word	0x2000027c
 8001890:	0800888c 	.word	0x0800888c
 8001894:	20000318 	.word	0x20000318
 8001898:	0800889c 	.word	0x0800889c
 800189c:	20000324 	.word	0x20000324

080018a0 <display_time>:
void display_time(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	  lcd_send_cmd(0x83);
 80018a4:	2083      	movs	r0, #131	; 0x83
 80018a6:	f7ff fe5f 	bl	8001568 <lcd_send_cmd>
	  lcd_send_string(date);
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <display_time+0x20>)
 80018ac:	f7ff fecc 	bl	8001648 <lcd_send_string>
	  lcd_send_cmd(0xC0);
 80018b0:	20c0      	movs	r0, #192	; 0xc0
 80018b2:	f7ff fe59 	bl	8001568 <lcd_send_cmd>
	  lcd_send_string(time);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <display_time+0x24>)
 80018b8:	f7ff fec6 	bl	8001648 <lcd_send_string>

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000324 	.word	0x20000324
 80018c4:	20000318 	.word	0x20000318

080018c8 <WriteToEEPROM>:
void WriteToEEPROM(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	if(dailyexample%20==0)
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <WriteToEEPROM+0x98>)
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <WriteToEEPROM+0x9c>)
 80018d2:	fb83 2301 	smull	r2, r3, r3, r1
 80018d6:	10da      	asrs	r2, r3, #3
 80018d8:	17cb      	asrs	r3, r1, #31
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	1aca      	subs	r2, r1, r3
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d128      	bne.n	800193c <WriteToEEPROM+0x74>
	{
		sprintf(my_str2,"%.2f",mytemperature);
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <WriteToEEPROM+0xa0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe32 	bl	8000558 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	491c      	ldr	r1, [pc, #112]	; (800196c <WriteToEEPROM+0xa4>)
 80018fa:	481d      	ldr	r0, [pc, #116]	; (8001970 <WriteToEEPROM+0xa8>)
 80018fc:	f004 fd22 	bl	8006344 <siprintf>
		strcpy(conc,my_str2);
 8001900:	491b      	ldr	r1, [pc, #108]	; (8001970 <WriteToEEPROM+0xa8>)
 8001902:	481c      	ldr	r0, [pc, #112]	; (8001974 <WriteToEEPROM+0xac>)
 8001904:	f004 fd4d 	bl	80063a2 <strcpy>
		strcat(conc,time);
 8001908:	491b      	ldr	r1, [pc, #108]	; (8001978 <WriteToEEPROM+0xb0>)
 800190a:	481a      	ldr	r0, [pc, #104]	; (8001974 <WriteToEEPROM+0xac>)
 800190c:	f004 fd3a 	bl	8006384 <strcat>
		strcat(conc,date);
 8001910:	491a      	ldr	r1, [pc, #104]	; (800197c <WriteToEEPROM+0xb4>)
 8001912:	4818      	ldr	r0, [pc, #96]	; (8001974 <WriteToEEPROM+0xac>)
 8001914:	f004 fd36 	bl	8006384 <strcat>
		EEPROM_Write(page, offset, conc,23);
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <WriteToEEPROM+0xb8>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <WriteToEEPROM+0xbc>)
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	2317      	movs	r3, #23
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <WriteToEEPROM+0xac>)
 8001924:	f7ff fb34 	bl	8000f90 <EEPROM_Write>
		offset+=23;
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <WriteToEEPROM+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3317      	adds	r3, #23
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <WriteToEEPROM+0xbc>)
 8001930:	6013      	str	r3, [r2, #0]
		pagecount++;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <WriteToEEPROM+0xc0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a13      	ldr	r2, [pc, #76]	; (8001988 <WriteToEEPROM+0xc0>)
 800193a:	6013      	str	r3, [r2, #0]
	}
	if(pagecount==2)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <WriteToEEPROM+0xc0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d10a      	bne.n	800195a <WriteToEEPROM+0x92>
	{
		page++;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <WriteToEEPROM+0xb8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <WriteToEEPROM+0xb8>)
 800194c:	6013      	str	r3, [r2, #0]
		offset=0;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <WriteToEEPROM+0xbc>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
		pagecount=0;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <WriteToEEPROM+0xc0>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
	}
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000354 	.word	0x20000354
 8001964:	66666667 	.word	0x66666667
 8001968:	200002e4 	.word	0x200002e4
 800196c:	080088ac 	.word	0x080088ac
 8001970:	20000310 	.word	0x20000310
 8001974:	20000330 	.word	0x20000330
 8001978:	20000318 	.word	0x20000318
 800197c:	20000324 	.word	0x20000324
 8001980:	20000358 	.word	0x20000358
 8001984:	2000035c 	.word	0x2000035c
 8001988:	20000350 	.word	0x20000350

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001992:	f000 fd61 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001996:	f000 f94d 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199a:	f000 fa59 	bl	8001e50 <MX_GPIO_Init>
  MX_I2C1_Init();
 800199e:	f000 f9b5 	bl	8001d0c <MX_I2C1_Init>
  MX_RTC_Init();
 80019a2:	f000 f9e1 	bl	8001d68 <MX_RTC_Init>
  MX_TIM2_Init();
 80019a6:	f000 fa05 	bl	8001db4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Init();
 80019aa:	f7ff fd07 	bl	80013bc <BMP180_Init>
  lcd_init();
 80019ae:	f7ff fe3b 	bl	8001628 <lcd_init>
  lcd_send_cmd(0x01);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fdd8 	bl	8001568 <lcd_send_cmd>
  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)  != 0x32F2)
 80019b8:	2101      	movs	r1, #1
 80019ba:	488a      	ldr	r0, [pc, #552]	; (8001be4 <main+0x258>)
 80019bc:	f003 fbc8 	bl	8005150 <HAL_RTCEx_BKUPRead>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d001      	beq.n	80019ce <main+0x42>
   {
	 set_time();
 80019ca:	f7ff fef3 	bl	80017b4 <set_time>
   }
  mytemperature=BMP180_Get_Temperature();
 80019ce:	f7ff fd47 	bl	8001460 <BMP180_Get_Temperature>
 80019d2:	eef0 7a40 	vmov.f32	s15, s0
 80019d6:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <main+0x25c>)
 80019d8:	edc3 7a00 	vstr	s15, [r3]
  minValue=mytemperature;
 80019dc:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <main+0x25c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a82      	ldr	r2, [pc, #520]	; (8001bec <main+0x260>)
 80019e2:	6013      	str	r3, [r2, #0]
  minValueDay=mytemperature;
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <main+0x25c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <main+0x264>)
 80019ea:	6013      	str	r3, [r2, #0]
  maxValue=mytemperature;
 80019ec:	4b7e      	ldr	r3, [pc, #504]	; (8001be8 <main+0x25c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <main+0x268>)
 80019f2:	6013      	str	r3, [r2, #0]
  maxValueDay=mytemperature;
 80019f4:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <main+0x25c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7f      	ldr	r2, [pc, #508]	; (8001bf8 <main+0x26c>)
 80019fa:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */



	        switch(DisplayState)
 80019fc:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <main+0x270>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	f200 80c5 	bhi.w	8001b90 <main+0x204>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <main+0x80>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a21 	.word	0x08001a21
 8001a10:	08001b47 	.word	0x08001b47
 8001a14:	08001afd 	.word	0x08001afd
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001a69 	.word	0x08001a69
	        {
	         case DisplayState_EraseEEPROM:
	        	lcd_clear();
 8001a20:	f7ff fe28 	bl	8001674 <lcd_clear>
	        	delay(1680000);
 8001a24:	4876      	ldr	r0, [pc, #472]	; (8001c00 <main+0x274>)
 8001a26:	f7ff fe37 	bl	8001698 <delay>
	        	lcd_send_cmd(0x81);
 8001a2a:	2081      	movs	r0, #129	; 0x81
 8001a2c:	f7ff fd9c 	bl	8001568 <lcd_send_cmd>
	        	lcd_send_string("EEPROM ERASING");
 8001a30:	4874      	ldr	r0, [pc, #464]	; (8001c04 <main+0x278>)
 8001a32:	f7ff fe09 	bl	8001648 <lcd_send_string>
	        	lcd_send_cmd(0xC2);
 8001a36:	20c2      	movs	r0, #194	; 0xc2
 8001a38:	f7ff fd96 	bl	8001568 <lcd_send_cmd>
	        	lcd_send_string("WAIT PLEASE");
 8001a3c:	4872      	ldr	r0, [pc, #456]	; (8001c08 <main+0x27c>)
 8001a3e:	f7ff fe03 	bl	8001648 <lcd_send_string>
	        	for(int i=0;i<512;i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e005      	b.n	8001a54 <main+0xc8>
	        	{
	        		EEPROM_PageErase(i);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fb07 	bl	800105c <EEPROM_PageErase>
	        	for(int i=0;i<512;i++)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3301      	adds	r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5a:	dbf5      	blt.n	8001a48 <main+0xbc>
	        	}
	        	lcd_clear();
 8001a5c:	f7ff fe0a 	bl	8001674 <lcd_clear>
	        	DisplayState=DisplayState_Update;
 8001a60:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <main+0x270>)
 8001a62:	2205      	movs	r2, #5
 8001a64:	701a      	strb	r2, [r3, #0]
	        	break;
 8001a66:	e0bb      	b.n	8001be0 <main+0x254>

	        case DisplayState_MaxValue:
	        	    lcd_clear();
 8001a68:	f7ff fe04 	bl	8001674 <lcd_clear>
	        	    delay(1680000);
 8001a6c:	4864      	ldr	r0, [pc, #400]	; (8001c00 <main+0x274>)
 8001a6e:	f7ff fe13 	bl	8001698 <delay>
	        	    lcd_send_cmd(0x81);
 8001a72:	2081      	movs	r0, #129	; 0x81
 8001a74:	f7ff fd78 	bl	8001568 <lcd_send_cmd>
	        	    lcd_send_string("HighValueOfAll");
 8001a78:	4864      	ldr	r0, [pc, #400]	; (8001c0c <main+0x280>)
 8001a7a:	f7ff fde5 	bl	8001648 <lcd_send_string>
	              	sprintf(my_str,"%.2f",maxValue);
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <main+0x268>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4960      	ldr	r1, [pc, #384]	; (8001c10 <main+0x284>)
 8001a8e:	4861      	ldr	r0, [pc, #388]	; (8001c14 <main+0x288>)
 8001a90:	f004 fc58 	bl	8006344 <siprintf>
	            	lcd_send_cmd(0xC9);
 8001a94:	20c9      	movs	r0, #201	; 0xc9
 8001a96:	f7ff fd67 	bl	8001568 <lcd_send_cmd>
	            	lcd_send_string(my_str);
 8001a9a:	485e      	ldr	r0, [pc, #376]	; (8001c14 <main+0x288>)
 8001a9c:	f7ff fdd4 	bl	8001648 <lcd_send_string>
	            	delay(56800000);
 8001aa0:	485d      	ldr	r0, [pc, #372]	; (8001c18 <main+0x28c>)
 8001aa2:	f7ff fdf9 	bl	8001698 <delay>
	                lcd_clear();
 8001aa6:	f7ff fde5 	bl	8001674 <lcd_clear>
	            	DisplayState=DisplayState_Update;
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <main+0x270>)
 8001aac:	2205      	movs	r2, #5
 8001aae:	701a      	strb	r2, [r3, #0]
	        	    break;
 8001ab0:	e096      	b.n	8001be0 <main+0x254>

	        case DisplayState_MinValue:
	   	        	lcd_clear();
 8001ab2:	f7ff fddf 	bl	8001674 <lcd_clear>
	   	        	delay(1680000);
 8001ab6:	4852      	ldr	r0, [pc, #328]	; (8001c00 <main+0x274>)
 8001ab8:	f7ff fdee 	bl	8001698 <delay>
	   	        	lcd_send_cmd(0x81);
 8001abc:	2081      	movs	r0, #129	; 0x81
 8001abe:	f7ff fd53 	bl	8001568 <lcd_send_cmd>
	   	        	lcd_send_string("MinValueOfAll");
 8001ac2:	4856      	ldr	r0, [pc, #344]	; (8001c1c <main+0x290>)
 8001ac4:	f7ff fdc0 	bl	8001648 <lcd_send_string>
	   	        	sprintf(my_str,"%.2f",minValue);
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <main+0x260>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd43 	bl	8000558 <__aeabi_f2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	494e      	ldr	r1, [pc, #312]	; (8001c10 <main+0x284>)
 8001ad8:	484e      	ldr	r0, [pc, #312]	; (8001c14 <main+0x288>)
 8001ada:	f004 fc33 	bl	8006344 <siprintf>
	   	        	lcd_send_cmd(0xC9);
 8001ade:	20c9      	movs	r0, #201	; 0xc9
 8001ae0:	f7ff fd42 	bl	8001568 <lcd_send_cmd>
	   	        	lcd_send_string(my_str);
 8001ae4:	484b      	ldr	r0, [pc, #300]	; (8001c14 <main+0x288>)
 8001ae6:	f7ff fdaf 	bl	8001648 <lcd_send_string>
	   	        	delay(56800000);
 8001aea:	484b      	ldr	r0, [pc, #300]	; (8001c18 <main+0x28c>)
 8001aec:	f7ff fdd4 	bl	8001698 <delay>
	   	            lcd_clear();
 8001af0:	f7ff fdc0 	bl	8001674 <lcd_clear>
	   	        	DisplayState=DisplayState_Update;
 8001af4:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <main+0x270>)
 8001af6:	2205      	movs	r2, #5
 8001af8:	701a      	strb	r2, [r3, #0]
	   	        	break;
 8001afa:	e071      	b.n	8001be0 <main+0x254>

	        case DisplayState_MinValueDay:
	       	   	    lcd_clear();
 8001afc:	f7ff fdba 	bl	8001674 <lcd_clear>
	   	        	delay(1680000);
 8001b00:	483f      	ldr	r0, [pc, #252]	; (8001c00 <main+0x274>)
 8001b02:	f7ff fdc9 	bl	8001698 <delay>
	   	        	lcd_send_cmd(0x81);
 8001b06:	2081      	movs	r0, #129	; 0x81
 8001b08:	f7ff fd2e 	bl	8001568 <lcd_send_cmd>
	       	   	    lcd_send_string("HighValueDay");
 8001b0c:	4844      	ldr	r0, [pc, #272]	; (8001c20 <main+0x294>)
 8001b0e:	f7ff fd9b 	bl	8001648 <lcd_send_string>
	       	   	    sprintf(my_str,"%.2f",maxValueDay);
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <main+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1e 	bl	8000558 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	493b      	ldr	r1, [pc, #236]	; (8001c10 <main+0x284>)
 8001b22:	483c      	ldr	r0, [pc, #240]	; (8001c14 <main+0x288>)
 8001b24:	f004 fc0e 	bl	8006344 <siprintf>
	       	   	    lcd_send_cmd(0xC9);
 8001b28:	20c9      	movs	r0, #201	; 0xc9
 8001b2a:	f7ff fd1d 	bl	8001568 <lcd_send_cmd>
	       	   	    lcd_send_string(my_str);
 8001b2e:	4839      	ldr	r0, [pc, #228]	; (8001c14 <main+0x288>)
 8001b30:	f7ff fd8a 	bl	8001648 <lcd_send_string>
	       	   	    delay(56800000);
 8001b34:	4838      	ldr	r0, [pc, #224]	; (8001c18 <main+0x28c>)
 8001b36:	f7ff fdaf 	bl	8001698 <delay>
	       	   	    lcd_clear();
 8001b3a:	f7ff fd9b 	bl	8001674 <lcd_clear>
	       	   	    DisplayState=DisplayState_Update;
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <main+0x270>)
 8001b40:	2205      	movs	r2, #5
 8001b42:	701a      	strb	r2, [r3, #0]
	       	   	    break;
 8001b44:	e04c      	b.n	8001be0 <main+0x254>

	        case DisplayState_MaxValueDay:
	       	   	    lcd_clear();
 8001b46:	f7ff fd95 	bl	8001674 <lcd_clear>
	       	   	    delay(1680000);
 8001b4a:	482d      	ldr	r0, [pc, #180]	; (8001c00 <main+0x274>)
 8001b4c:	f7ff fda4 	bl	8001698 <delay>
	       	   	    lcd_send_cmd(0x81);
 8001b50:	2081      	movs	r0, #129	; 0x81
 8001b52:	f7ff fd09 	bl	8001568 <lcd_send_cmd>
	       	   	    lcd_send_string("MinValueDay");
 8001b56:	4833      	ldr	r0, [pc, #204]	; (8001c24 <main+0x298>)
 8001b58:	f7ff fd76 	bl	8001648 <lcd_send_string>
	       	   	    sprintf(my_str,"%.2f",minValueDay);
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <main+0x264>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf9 	bl	8000558 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4929      	ldr	r1, [pc, #164]	; (8001c10 <main+0x284>)
 8001b6c:	4829      	ldr	r0, [pc, #164]	; (8001c14 <main+0x288>)
 8001b6e:	f004 fbe9 	bl	8006344 <siprintf>
	       	   	    lcd_send_cmd(0xC9);
 8001b72:	20c9      	movs	r0, #201	; 0xc9
 8001b74:	f7ff fcf8 	bl	8001568 <lcd_send_cmd>
	       	   	    lcd_send_string(my_str);
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <main+0x288>)
 8001b7a:	f7ff fd65 	bl	8001648 <lcd_send_string>
	       	   	    delay(56800000);
 8001b7e:	4826      	ldr	r0, [pc, #152]	; (8001c18 <main+0x28c>)
 8001b80:	f7ff fd8a 	bl	8001698 <delay>
	       	   	    lcd_clear();
 8001b84:	f7ff fd76 	bl	8001674 <lcd_clear>
	       	   	    DisplayState=DisplayState_Update;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <main+0x270>)
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	701a      	strb	r2, [r3, #0]
	       	   	    break;
 8001b8e:	e027      	b.n	8001be0 <main+0x254>

	         default :
	        	    get_time();
 8001b90:	f7ff fe50 	bl	8001834 <get_time>
		            sprintf(my_str,"%.2f",mytemperature);
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <main+0x25c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcdd 	bl	8000558 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	491b      	ldr	r1, [pc, #108]	; (8001c10 <main+0x284>)
 8001ba4:	481b      	ldr	r0, [pc, #108]	; (8001c14 <main+0x288>)
 8001ba6:	f004 fbcd 	bl	8006344 <siprintf>
                    display_time();
 8001baa:	f7ff fe79 	bl	80018a0 <display_time>
                    lcd_send_cmd(0xC9);
 8001bae:	20c9      	movs	r0, #201	; 0xc9
 8001bb0:	f7ff fcda 	bl	8001568 <lcd_send_cmd>
 	                lcd_send_string(my_str);
 8001bb4:	4817      	ldr	r0, [pc, #92]	; (8001c14 <main+0x288>)
 8001bb6:	f7ff fd47 	bl	8001648 <lcd_send_string>
 	                momenterytemp=BMP180_Get_Temperature();
 8001bba:	f7ff fc51 	bl	8001460 <BMP180_Get_Temperature>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <main+0x29c>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
                    if(hal_start==1)
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <main+0x2a0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <main+0x250>
                  {
            	    HAL_TIM_Base_Start_IT(&htim2);
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <main+0x2a4>)
 8001bd2:	f003 fb25 	bl	8005220 <HAL_TIM_Base_Start_IT>
            	    hal_start=0;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <main+0x2a0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
                  }
                    WriteToEEPROM();
 8001bdc:	f7ff fe74 	bl	80018c8 <WriteToEEPROM>
	        switch(DisplayState)
 8001be0:	e70c      	b.n	80019fc <main+0x70>
 8001be2:	bf00      	nop
 8001be4:	2000027c 	.word	0x2000027c
 8001be8:	200002e4 	.word	0x200002e4
 8001bec:	200002f4 	.word	0x200002f4
 8001bf0:	200002ec 	.word	0x200002ec
 8001bf4:	200002f8 	.word	0x200002f8
 8001bf8:	200002f0 	.word	0x200002f0
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	0019a280 	.word	0x0019a280
 8001c04:	080088b4 	.word	0x080088b4
 8001c08:	080088c4 	.word	0x080088c4
 8001c0c:	080088d0 	.word	0x080088d0
 8001c10:	080088ac 	.word	0x080088ac
 8001c14:	200002fc 	.word	0x200002fc
 8001c18:	0362b300 	.word	0x0362b300
 8001c1c:	080088e0 	.word	0x080088e0
 8001c20:	080088f0 	.word	0x080088f0
 8001c24:	08008900 	.word	0x08008900
 8001c28:	200002e8 	.word	0x200002e8
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	2000029c 	.word	0x2000029c

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2230      	movs	r2, #48	; 0x30
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 ff0c 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a28      	ldr	r2, [pc, #160]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <SystemClock_Config+0xd4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <SystemClock_Config+0xd4>)
 8001c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <SystemClock_Config+0xd4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c94:	230a      	movs	r3, #10
 8001c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cac:	2308      	movs	r3, #8
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cb0:	2354      	movs	r3, #84	; 0x54
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbc:	f107 0320 	add.w	r3, r7, #32
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 f9bb 	bl	800403c <HAL_RCC_OscConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ccc:	f000 f964 	bl	8001f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2102      	movs	r1, #2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fc1d 	bl	800452c <HAL_RCC_ClockConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001cf8:	f000 f94e 	bl	8001f98 <Error_Handler>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3750      	adds	r7, #80	; 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <MX_I2C1_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d4a:	f000 ff09 	bl	8002b60 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f000 f920 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000228 	.word	0x20000228
 8001d60:	40005400 	.word	0x40005400
 8001d64:	00061a80 	.word	0x00061a80

08001d68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0


  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_RTC_Init+0x44>)
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <MX_RTC_Init+0x48>)
 8001d70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_RTC_Init+0x44>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_RTC_Init+0x44>)
 8001d7a:	227f      	movs	r2, #127	; 0x7f
 8001d7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_RTC_Init+0x44>)
 8001d80:	22ff      	movs	r2, #255	; 0xff
 8001d82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_RTC_Init+0x44>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_RTC_Init+0x44>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_RTC_Init+0x44>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_RTC_Init+0x44>)
 8001d98:	f002 fec2 	bl	8004b20 <HAL_RTC_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001da2:	f000 f8f9 	bl	8001f98 <Error_Handler>
  }



}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000027c 	.word	0x2000027c
 8001db0:	40002800 	.word	0x40002800

08001db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001dda:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001de8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dfa:	4814      	ldr	r0, [pc, #80]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001dfc:	f003 f9c0 	bl	8005180 <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e06:	f000 f8c7 	bl	8001f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	4619      	mov	r1, r3
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001e18:	f003 fb6c 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e22:	f000 f8b9 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <MX_TIM2_Init+0x98>)
 8001e34:	f003 fd68 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e3e:	f000 f8ab 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000029c 	.word	0x2000029c

08001e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a47      	ldr	r2, [pc, #284]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2120      	movs	r1, #32
 8001eda:	482d      	ldr	r0, [pc, #180]	; (8001f90 <MX_GPIO_Init+0x140>)
 8001edc:	f000 fde8 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4827      	ldr	r0, [pc, #156]	; (8001f94 <MX_GPIO_Init+0x144>)
 8001ef8:	f000 fc56 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9;
 8001efc:	f240 2313 	movw	r3, #531	; 0x213
 8001f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	481f      	ldr	r0, [pc, #124]	; (8001f90 <MX_GPIO_Init+0x140>)
 8001f14:	f000 fc48 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4818      	ldr	r0, [pc, #96]	; (8001f90 <MX_GPIO_Init+0x140>)
 8001f30:	f000 fc3a 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	2006      	movs	r0, #6
 8001f3a:	f000 fbfe 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f3e:	2006      	movs	r0, #6
 8001f40:	f000 fc17 	bl	8002772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	2007      	movs	r0, #7
 8001f4a:	f000 fbf6 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f4e:	2007      	movs	r0, #7
 8001f50:	f000 fc0f 	bl	8002772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	200a      	movs	r0, #10
 8001f5a:	f000 fbee 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f000 fc07 	bl	8002772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2017      	movs	r0, #23
 8001f6a:	f000 fbe6 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f6e:	2017      	movs	r0, #23
 8001f70:	f000 fbff 	bl	8002772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2028      	movs	r0, #40	; 0x28
 8001f7a:	f000 fbde 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f7e:	2028      	movs	r0, #40	; 0x28
 8001f80:	f000 fbf7 	bl	8002772 <HAL_NVIC_EnableIRQ>

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020800 	.word	0x40020800

08001f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <Error_Handler+0x8>
	...

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f000 fb9e 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_I2C_MspInit+0x84>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12c      	bne.n	8002070 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_I2C_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002032:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002038:	2312      	movs	r3, #18
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002044:	2304      	movs	r3, #4
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	480c      	ldr	r0, [pc, #48]	; (8002080 <HAL_I2C_MspInit+0x8c>)
 8002050:	f000 fbaa 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_I2C_MspInit+0x88>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_I2C_MspInit+0x88>)
 800205e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40005400 	.word	0x40005400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400

08002084 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_RTC_MspInit+0x50>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d111      	bne.n	80020ca <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020a6:	2302      	movs	r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fc45 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020c0:	f7ff ff6a 	bl	8001f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <HAL_RTC_MspInit+0x54>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40002800 	.word	0x40002800
 80020d8:	42470e3c 	.word	0x42470e3c

080020dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d115      	bne.n	800211a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 800210a:	2201      	movs	r2, #1
 800210c:	2100      	movs	r1, #0
 800210e:	201c      	movs	r0, #28
 8002110:	f000 fb13 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002114:	201c      	movs	r0, #28
 8002116:	f000 fb2c 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 f9c2 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	DisplayState=DisplayState_MinValue;
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <EXTI0_IRQHandler+0x1c>)
 8002182:	2203      	movs	r2, #3
 8002184:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002186:	2120      	movs	r1, #32
 8002188:	4804      	ldr	r0, [pc, #16]	; (800219c <EXTI0_IRQHandler+0x20>)
 800218a:	f000 fcaa 	bl	8002ae2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800218e:	2001      	movs	r0, #1
 8002190:	f000 fcc2 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000004 	.word	0x20000004
 800219c:	40020000 	.word	0x40020000

080021a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	DisplayState=DisplayState_MaxValue;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <EXTI1_IRQHandler+0x1c>)
 80021a6:	2204      	movs	r2, #4
 80021a8:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021aa:	2120      	movs	r1, #32
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <EXTI1_IRQHandler+0x20>)
 80021ae:	f000 fc98 	bl	8002ae2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80021b2:	2002      	movs	r0, #2
 80021b4:	f000 fcb0 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000004 	.word	0x20000004
 80021c0:	40020000 	.word	0x40020000

080021c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	DisplayState=DisplayState_MinValueDay;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <EXTI4_IRQHandler+0x1c>)
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021ce:	2120      	movs	r1, #32
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <EXTI4_IRQHandler+0x20>)
 80021d2:	f000 fc86 	bl	8002ae2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021d6:	2010      	movs	r0, #16
 80021d8:	f000 fc9e 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000004 	.word	0x20000004
 80021e4:	40020000 	.word	0x40020000

080021e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021ec:	2120      	movs	r1, #32
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <EXTI9_5_IRQHandler+0x20>)
 80021f0:	f000 fc77 	bl	8002ae2 <HAL_GPIO_TogglePin>
 DisplayState=DisplayState_EraseEEPROM;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <EXTI9_5_IRQHandler+0x24>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021fe:	f000 fc8b 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020000 	.word	0x40020000
 800220c:	20000004 	.word	0x20000004

08002210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <TIM2_IRQHandler+0x10>)
 8002216:	f003 f865 	bl	80052e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000029c 	.word	0x2000029c

08002224 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	DisplayState=DisplayState_MaxValueDay;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <EXTI15_10_IRQHandler+0x20>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800222e:	2120      	movs	r1, #32
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <EXTI15_10_IRQHandler+0x24>)
 8002232:	f000 fc56 	bl	8002ae2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002236:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800223a:	f000 fc6d 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000004 	.word	0x20000004
 8002248:	40020000 	.word	0x40020000

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002266:	f003 fbd1 	bl	8005a0c <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
	return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
	while (1) {}		/* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
	}

return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
	}
	return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	605a      	str	r2, [r3, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_isatty>:

int _isatty(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return 1;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f003 fb36 	bl	8005a0c <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20018000 	.word	0x20018000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20000360 	.word	0x20000360
 80023d4:	20000378 	.word	0x20000378

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
void SystemInit(void)
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	607b      	str	r3, [r7, #4]
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <SystemInit+0x28>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <SystemInit+0x28>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
}}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800243c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800240a:	490e      	ldr	r1, [pc, #56]	; (8002444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002420:	4c0b      	ldr	r4, [pc, #44]	; (8002450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800242e:	f7ff ffd3 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f003 faf1 	bl	8005a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002436:	f7ff faa9 	bl	800198c <main>
  bx  lr    
 800243a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800243c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002448:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 800244c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002450:	20000378 	.word	0x20000378

08002454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC_IRQHandler>
	...

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_Init+0x40>)
 8002462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_Init+0x40>)
 800246e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_Init+0x40>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002480:	2003      	movs	r0, #3
 8002482:	f000 f94f 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002486:	2000      	movs	r0, #0
 8002488:	f000 f808 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800248c:	f7ff fd8a 	bl	8001fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x54>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_InitTick+0x58>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f967 	bl	800278e <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00e      	b.n	80024e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d80a      	bhi.n	80024e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f000 f92f 	bl	800273a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <HAL_InitTick+0x5c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000010 	.word	0x20000010
 80024f8:	2000000c 	.word	0x2000000c

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000010 	.word	0x20000010
 8002520:	20000364 	.word	0x20000364

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000364 	.word	0x20000364

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000010 	.word	0x20000010

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f0:	d301      	bcc.n	80026f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00f      	b.n	8002716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <SysTick_Config+0x40>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fe:	210f      	movs	r1, #15
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7ff ff8e 	bl	8002624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <SysTick_Config+0x40>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SysTick_Config+0x40>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010

08002724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff29 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff3e 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff8e 	bl	8002678 <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5d 	bl	8002624 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff31 	bl	80025e8 <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa2 	bl	80026e0 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e159      	b.n	8002a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8148 	bne.w	8002a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d005      	beq.n	80027fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d130      	bne.n	800285c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d017      	beq.n	8002898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d123      	bne.n	80028ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a2 	beq.w	8002a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b57      	ldr	r3, [pc, #348]	; (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a56      	ldr	r2, [pc, #344]	; (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294a:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_GPIO_Init+0x2ec>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a49      	ldr	r2, [pc, #292]	; (8002a98 <HAL_GPIO_Init+0x2f0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x202>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a48      	ldr	r2, [pc, #288]	; (8002a9c <HAL_GPIO_Init+0x2f4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x1fe>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a47      	ldr	r2, [pc, #284]	; (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x1fa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <HAL_GPIO_Init+0x2fc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x1f6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a45      	ldr	r2, [pc, #276]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x1f2>
 8002996:	2304      	movs	r3, #4
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x204>
 800299a:	2307      	movs	r3, #7
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x204>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4935      	ldr	r1, [pc, #212]	; (8002a94 <HAL_GPIO_Init+0x2ec>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a42:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f aea2 	bls.w	80027c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	041a      	lsls	r2, r3, #16
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	400b      	ands	r3, r1
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f806 	bl	8002b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e12b      	b.n	8002dca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fa34 	bl	8001ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f001 feaa 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8002bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a81      	ldr	r2, [pc, #516]	; (8002dd4 <HAL_I2C_Init+0x274>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d807      	bhi.n	8002be4 <HAL_I2C_Init+0x84>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a80      	ldr	r2, [pc, #512]	; (8002dd8 <HAL_I2C_Init+0x278>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	bf94      	ite	ls
 8002bdc:	2301      	movls	r3, #1
 8002bde:	2300      	movhi	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e006      	b.n	8002bf2 <HAL_I2C_Init+0x92>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a7d      	ldr	r2, [pc, #500]	; (8002ddc <HAL_I2C_Init+0x27c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bf94      	ite	ls
 8002bec:	2301      	movls	r3, #1
 8002bee:	2300      	movhi	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0e7      	b.n	8002dca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a78      	ldr	r2, [pc, #480]	; (8002de0 <HAL_I2C_Init+0x280>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0c9b      	lsrs	r3, r3, #18
 8002c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a6a      	ldr	r2, [pc, #424]	; (8002dd4 <HAL_I2C_Init+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d802      	bhi.n	8002c34 <HAL_I2C_Init+0xd4>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3301      	adds	r3, #1
 8002c32:	e009      	b.n	8002c48 <HAL_I2C_Init+0xe8>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	4a69      	ldr	r2, [pc, #420]	; (8002de4 <HAL_I2C_Init+0x284>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	3301      	adds	r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	495c      	ldr	r1, [pc, #368]	; (8002dd4 <HAL_I2C_Init+0x274>)
 8002c64:	428b      	cmp	r3, r1
 8002c66:	d819      	bhi.n	8002c9c <HAL_I2C_Init+0x13c>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e59      	subs	r1, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c76:	1c59      	adds	r1, r3, #1
 8002c78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_I2C_Init+0x138>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e59      	subs	r1, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c96:	e051      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002c98:	2304      	movs	r3, #4
 8002c9a:	e04f      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d111      	bne.n	8002cc8 <HAL_I2C_Init+0x168>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e012      	b.n	8002cee <HAL_I2C_Init+0x18e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e58      	subs	r0, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	0099      	lsls	r1, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Init+0x196>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e022      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10e      	bne.n	8002d1c <HAL_I2C_Init+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1e58      	subs	r0, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	440b      	add	r3, r1
 8002d0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1a:	e00f      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6809      	ldr	r1, [r1, #0]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6911      	ldr	r1, [r2, #16]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68d2      	ldr	r2, [r2, #12]
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	000186a0 	.word	0x000186a0
 8002dd8:	001e847f 	.word	0x001e847f
 8002ddc:	003d08ff 	.word	0x003d08ff
 8002de0:	431bde83 	.word	0x431bde83
 8002de4:	10624dd3 	.word	0x10624dd3

08002de8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	461a      	mov	r2, r3
 8002df4:	460b      	mov	r3, r1
 8002df6:	817b      	strh	r3, [r7, #10]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff fb92 	bl	8002524 <HAL_GetTick>
 8002e00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 80e0 	bne.w	8002fd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2319      	movs	r3, #25
 8002e16:	2201      	movs	r2, #1
 8002e18:	4970      	ldr	r1, [pc, #448]	; (8002fdc <HAL_I2C_Master_Transmit+0x1f4>)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 ff30 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	e0d3      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Master_Transmit+0x50>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0cc      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d007      	beq.n	8002e5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2221      	movs	r2, #33	; 0x21
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	893a      	ldrh	r2, [r7, #8]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a50      	ldr	r2, [pc, #320]	; (8002fe0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fcea 	bl	8003880 <I2C_MasterRequestWrite>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e08d      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ecc:	e066      	b.n	8002f9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	6a39      	ldr	r1, [r7, #32]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 ffaa 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d107      	bne.n	8002ef6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06b      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d11b      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0x188>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d017      	beq.n	8002f70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6a39      	ldr	r1, [r7, #32]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 ff9a 	bl	8003eae <I2C_WaitOnBTFFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d107      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e01a      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d194      	bne.n	8002ece <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	00100002 	.word	0x00100002
 8002fe0:	ffff0000 	.word	0xffff0000

08002fe4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	4608      	mov	r0, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	817b      	strh	r3, [r7, #10]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	813b      	strh	r3, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7ff fa91 	bl	8002524 <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	f040 80d9 	bne.w	80031c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2319      	movs	r3, #25
 8003018:	2201      	movs	r2, #1
 800301a:	496d      	ldr	r1, [pc, #436]	; (80031d0 <HAL_I2C_Mem_Write+0x1ec>)
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fe2f 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	e0cc      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_I2C_Mem_Write+0x56>
 8003036:	2302      	movs	r3, #2
 8003038:	e0c5      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d007      	beq.n	8003060 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2221      	movs	r2, #33	; 0x21
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_I2C_Mem_Write+0x1f0>)
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a2:	88f8      	ldrh	r0, [r7, #6]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	8979      	ldrh	r1, [r7, #10]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4603      	mov	r3, r0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fc66 	bl	8003984 <I2C_RequestMemoryWrite>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d052      	beq.n	8003164 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e081      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 feb0 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d107      	bne.n	80030ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06b      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <HAL_I2C_Mem_Write+0x180>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d017      	beq.n	8003164 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1aa      	bne.n	80030c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fe9c 	bl	8003eae <I2C_WaitOnBTFFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e016      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	00100002 	.word	0x00100002
 80031d4:	ffff0000 	.word	0xffff0000

080031d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	4608      	mov	r0, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	817b      	strh	r3, [r7, #10]
 80031ea:	460b      	mov	r3, r1
 80031ec:	813b      	strh	r3, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031f2:	f7ff f997 	bl	8002524 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	f040 8208 	bne.w	8003616 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2319      	movs	r3, #25
 800320c:	2201      	movs	r2, #1
 800320e:	497b      	ldr	r1, [pc, #492]	; (80033fc <HAL_I2C_Mem_Read+0x224>)
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fd35 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
 800321e:	e1fb      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_I2C_Mem_Read+0x56>
 800322a:	2302      	movs	r3, #2
 800322c:	e1f4      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d007      	beq.n	8003254 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2222      	movs	r2, #34	; 0x22
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a5b      	ldr	r2, [pc, #364]	; (8003400 <HAL_I2C_Mem_Read+0x228>)
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003296:	88f8      	ldrh	r0, [r7, #6]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4603      	mov	r3, r0
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fc02 	bl	8003ab0 <I2C_RequestMemoryRead>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1b0      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d113      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e184      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d11b      	bne.n	8003326 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e164      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	2b02      	cmp	r3, #2
 800332c:	d11b      	bne.n	8003366 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	e144      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800337c:	e138      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	2b03      	cmp	r3, #3
 8003384:	f200 80f1 	bhi.w	800356a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	2b01      	cmp	r3, #1
 800338e:	d123      	bne.n	80033d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fdcb 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e139      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033d6:	e10b      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d14e      	bne.n	800347e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	2200      	movs	r2, #0
 80033e8:	4906      	ldr	r1, [pc, #24]	; (8003404 <HAL_I2C_Mem_Read+0x22c>)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fc48 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e10e      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
 80033fa:	bf00      	nop
 80033fc:	00100002 	.word	0x00100002
 8003400:	ffff0000 	.word	0xffff0000
 8003404:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800347c:	e0b8      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2200      	movs	r2, #0
 8003486:	4966      	ldr	r1, [pc, #408]	; (8003620 <HAL_I2C_Mem_Read+0x448>)
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fbf9 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0bf      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2200      	movs	r2, #0
 80034e2:	494f      	ldr	r1, [pc, #316]	; (8003620 <HAL_I2C_Mem_Read+0x448>)
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fbcb 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e091      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003568:	e042      	b.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fcde 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e04c      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d118      	bne.n	80035f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f aec2 	bne.w	800337e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00010004 	.word	0x00010004

08003624 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7fe ff76 	bl	8002524 <HAL_GetTick>
 8003638:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 8111 	bne.w	800386e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2319      	movs	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	4988      	ldr	r1, [pc, #544]	; (8003878 <HAL_I2C_IsDeviceReady+0x254>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb12 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e104      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_I2C_IsDeviceReady+0x50>
 8003670:	2302      	movs	r3, #2
 8003672:	e0fd      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2224      	movs	r2, #36	; 0x24
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a70      	ldr	r2, [pc, #448]	; (800387c <HAL_I2C_IsDeviceReady+0x258>)
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fad0 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f4:	d103      	bne.n	80036fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b6      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003710:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe ff07 	bl	8002524 <HAL_GetTick>
 8003716:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003746:	e025      	b.n	8003794 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe feec 	bl	8002524 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <HAL_I2C_IsDeviceReady+0x13a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	22a0      	movs	r2, #160	; 0xa0
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2ba0      	cmp	r3, #160	; 0xa0
 800379e:	d005      	beq.n	80037ac <HAL_I2C_IsDeviceReady+0x188>
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_I2C_IsDeviceReady+0x188>
 80037a6:	7dbb      	ldrb	r3, [r7, #22]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0cd      	beq.n	8003748 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d129      	bne.n	8003816 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2319      	movs	r3, #25
 80037ee:	2201      	movs	r2, #1
 80037f0:	4921      	ldr	r1, [pc, #132]	; (8003878 <HAL_I2C_IsDeviceReady+0x254>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fa44 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e036      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e02c      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003824:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800382e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2319      	movs	r3, #25
 8003836:	2201      	movs	r2, #1
 8003838:	490f      	ldr	r1, [pc, #60]	; (8003878 <HAL_I2C_IsDeviceReady+0x254>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fa20 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e012      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3301      	adds	r3, #1
 800384e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	f4ff af32 	bcc.w	80036be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	00100002 	.word	0x00100002
 800387c:	ffff0000 	.word	0xffff0000

08003880 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d006      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d003      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a8:	d108      	bne.n	80038bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e00b      	b.n	80038d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	2b12      	cmp	r3, #18
 80038c2:	d107      	bne.n	80038d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f9cd 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d103      	bne.n	8003904 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e035      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d108      	bne.n	8003924 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e01b      	b.n	800395c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	11db      	asrs	r3, r3, #7
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f063 030f 	orn	r3, r3, #15
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <I2C_MasterRequestWrite+0xfc>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f9f3 	bl	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e010      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_MasterRequestWrite+0x100>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f9e3 	bl	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010008 	.word	0x00010008
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	817b      	strh	r3, [r7, #10]
 8003996:	460b      	mov	r3, r1
 8003998:	813b      	strh	r3, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f960 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d4:	d103      	bne.n	80039de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e05f      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e2:	897b      	ldrh	r3, [r7, #10]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	492d      	ldr	r1, [pc, #180]	; (8003aac <I2C_RequestMemoryWrite+0x128>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f998 	bl	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04c      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa02 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e02b      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	e021      	b.n	8003aa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f9dc 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e005      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a96:	893b      	ldrh	r3, [r7, #8]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	00010002 	.word	0x00010002

08003ab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8c2 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b10:	d103      	bne.n	8003b1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0aa      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	4952      	ldr	r1, [pc, #328]	; (8003c7c <I2C_RequestMemoryRead+0x1cc>)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f8fa 	bl	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e097      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	6a39      	ldr	r1, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f964 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d107      	bne.n	8003b82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e076      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8c:	893b      	ldrh	r3, [r7, #8]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	611a      	str	r2, [r3, #16]
 8003b96:	e021      	b.n	8003bdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f93e 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d107      	bne.n	8003bce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e050      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd2:	893b      	ldrh	r3, [r7, #8]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	6a39      	ldr	r1, [r7, #32]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f923 	bl	8003e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d107      	bne.n	8003c04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e035      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f82b 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3e:	d103      	bne.n	8003c48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e013      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	4906      	ldr	r1, [pc, #24]	; (8003c7c <I2C_RequestMemoryRead+0x1cc>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f863 	bl	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	00010002 	.word	0x00010002

08003c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	e025      	b.n	8003cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d021      	beq.n	8003cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7fe fc43 	bl	8002524 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d116      	bne.n	8003cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e023      	b.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d10d      	bne.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	e00c      	b.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d0b6      	beq.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3c:	e051      	b.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4c:	d123      	bne.n	8003d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0204 	orr.w	r2, r3, #4
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e046      	b.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d021      	beq.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fe fbc1 	bl	8002524 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d116      	bne.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e020      	b.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10c      	bne.n	8003e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e00b      	b.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	43da      	mvns	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d18d      	bne.n	8003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e38:	e02d      	b.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f8ce 	bl	8003fdc <I2C_IsAcknowledgeFailed>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e02d      	b.n	8003ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d021      	beq.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe fb67 	bl	8002524 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d116      	bne.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e007      	b.n	8003ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d1ca      	bne.n	8003e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eba:	e02d      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f88d 	bl	8003fdc <I2C_IsAcknowledgeFailed>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e02d      	b.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d021      	beq.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed4:	f7fe fb26 	bl	8002524 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d1ca      	bne.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3c:	e042      	b.n	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d119      	bne.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0210 	mvn.w	r2, #16
 8003f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e029      	b.n	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f80:	f7fe fad0 	bl	8002524 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d1b5      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d11b      	bne.n	800402c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e267      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d075      	beq.n	8004146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405a:	4b88      	ldr	r3, [pc, #544]	; (800427c <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d00c      	beq.n	8004080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b85      	ldr	r3, [pc, #532]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406e:	2b08      	cmp	r3, #8
 8004070:	d112      	bne.n	8004098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4b82      	ldr	r3, [pc, #520]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407e:	d10b      	bne.n	8004098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	4b7e      	ldr	r3, [pc, #504]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05b      	beq.n	8004144 <HAL_RCC_OscConfig+0x108>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d157      	bne.n	8004144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e242      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d106      	bne.n	80040b0 <HAL_RCC_OscConfig+0x74>
 80040a2:	4b76      	ldr	r3, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e01d      	b.n	80040ec <HAL_RCC_OscConfig+0xb0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x98>
 80040ba:	4b70      	ldr	r3, [pc, #448]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6f      	ldr	r2, [pc, #444]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b6d      	ldr	r3, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6c      	ldr	r2, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e00b      	b.n	80040ec <HAL_RCC_OscConfig+0xb0>
 80040d4:	4b69      	ldr	r3, [pc, #420]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a68      	ldr	r2, [pc, #416]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b66      	ldr	r3, [pc, #408]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a65      	ldr	r2, [pc, #404]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe fa16 	bl	8002524 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fe fa12 	bl	8002524 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	; 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e207      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0xc0>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe fa02 	bl	8002524 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004124:	f7fe f9fe 	bl	8002524 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1f3      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	4b51      	ldr	r3, [pc, #324]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0xe8>
 8004142:	e000      	b.n	8004146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d063      	beq.n	800421a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004166:	2b08      	cmp	r3, #8
 8004168:	d11c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416a:	4b44      	ldr	r3, [pc, #272]	; (800427c <HAL_RCC_OscConfig+0x240>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d116      	bne.n	80041a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004176:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_RCC_OscConfig+0x152>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e1c7      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4937      	ldr	r1, [pc, #220]	; (800427c <HAL_RCC_OscConfig+0x240>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	e03a      	b.n	800421a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ac:	4b34      	ldr	r3, [pc, #208]	; (8004280 <HAL_RCC_OscConfig+0x244>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fe f9b7 	bl	8002524 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ba:	f7fe f9b3 	bl	8002524 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1a8      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4925      	ldr	r1, [pc, #148]	; (800427c <HAL_RCC_OscConfig+0x240>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]
 80041ec:	e015      	b.n	800421a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x244>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe f996 	bl	8002524 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fc:	f7fe f992 	bl	8002524 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e187      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d036      	beq.n	8004294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <HAL_RCC_OscConfig+0x248>)
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fe f976 	bl	8002524 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423c:	f7fe f972 	bl	8002524 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e167      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x240>)
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x200>
 800425a:	e01b      	b.n	8004294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_OscConfig+0x248>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004262:	f7fe f95f 	bl	8002524 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	e00e      	b.n	8004288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426a:	f7fe f95b 	bl	8002524 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d907      	bls.n	8004288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e150      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
 800427c:	40023800 	.word	0x40023800
 8004280:	42470000 	.word	0x42470000
 8004284:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ea      	bne.n	800426a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8097 	beq.w	80043d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a6:	4b81      	ldr	r3, [pc, #516]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	4b7d      	ldr	r3, [pc, #500]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a7c      	ldr	r2, [pc, #496]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80042bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
 80042c2:	4b7a      	ldr	r3, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b77      	ldr	r3, [pc, #476]	; (80044b0 <HAL_RCC_OscConfig+0x474>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042de:	4b74      	ldr	r3, [pc, #464]	; (80044b0 <HAL_RCC_OscConfig+0x474>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a73      	ldr	r2, [pc, #460]	; (80044b0 <HAL_RCC_OscConfig+0x474>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ea:	f7fe f91b 	bl	8002524 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fe f917 	bl	8002524 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e10c      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <HAL_RCC_OscConfig+0x474>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x2ea>
 8004318:	4b64      	ldr	r3, [pc, #400]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
 8004324:	e01c      	b.n	8004360 <HAL_RCC_OscConfig+0x324>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b05      	cmp	r3, #5
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x30c>
 800432e:	4b5f      	ldr	r3, [pc, #380]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a5e      	ldr	r2, [pc, #376]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
 800433a:	4b5c      	ldr	r3, [pc, #368]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a5b      	ldr	r2, [pc, #364]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0x324>
 8004348:	4b58      	ldr	r3, [pc, #352]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a57      	ldr	r2, [pc, #348]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	4b55      	ldr	r3, [pc, #340]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a54      	ldr	r2, [pc, #336]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 800435a:	f023 0304 	bic.w	r3, r3, #4
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fe f8dc 	bl	8002524 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fe f8d8 	bl	8002524 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0cb      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004386:	4b49      	ldr	r3, [pc, #292]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0ee      	beq.n	8004370 <HAL_RCC_OscConfig+0x334>
 8004392:	e014      	b.n	80043be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004394:	f7fe f8c6 	bl	8002524 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fe f8c2 	bl	8002524 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0b5      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b2:	4b3e      	ldr	r3, [pc, #248]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ee      	bne.n	800439c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c4:	4b39      	ldr	r3, [pc, #228]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	4a38      	ldr	r2, [pc, #224]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a1 	beq.w	800451c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043da:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d05c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d141      	bne.n	8004472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCC_OscConfig+0x478>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fe f896 	bl	8002524 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe f892 	bl	8002524 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e087      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	3b01      	subs	r3, #1
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	491b      	ldr	r1, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <HAL_RCC_OscConfig+0x478>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fe f86b 	bl	8002524 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004452:	f7fe f867 	bl	8002524 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e05c      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x416>
 8004470:	e054      	b.n	800451c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_RCC_OscConfig+0x478>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe f854 	bl	8002524 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe f850 	bl	8002524 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e045      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_OscConfig+0x470>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x444>
 800449e:	e03d      	b.n	800451c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e038      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40007000 	.word	0x40007000
 80044b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x4ec>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d028      	beq.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d121      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d11a      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d111      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0cc      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b68      	ldr	r3, [pc, #416]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d90c      	bls.n	8004568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b63      	ldr	r3, [pc, #396]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0b8      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a58      	ldr	r2, [pc, #352]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800458a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004598:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	494d      	ldr	r1, [pc, #308]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d044      	beq.n	800464c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d119      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e067      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4934      	ldr	r1, [pc, #208]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fd ff82 	bl	8002524 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd ff7e 	bl	8002524 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e04f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d20c      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e032      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4916      	ldr	r1, [pc, #88]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	490e      	ldr	r1, [pc, #56]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046b2:	f000 f821 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b6:	4602      	mov	r2, r0
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	490a      	ldr	r1, [pc, #40]	; (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	5ccb      	ldrb	r3, [r1, r3]
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fee2 	bl	800249c <HAL_InitTick>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023c00 	.word	0x40023c00
 80046e8:	40023800 	.word	0x40023800
 80046ec:	0800890c 	.word	0x0800890c
 80046f0:	20000008 	.word	0x20000008
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b094      	sub	sp, #80	; 0x50
 80046fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	647b      	str	r3, [r7, #68]	; 0x44
 8004704:	2300      	movs	r3, #0
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	2300      	movs	r3, #0
 800470a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004710:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d00d      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x40>
 800471c:	2b08      	cmp	r3, #8
 800471e:	f200 80e1 	bhi.w	80048e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x34>
 8004726:	2b04      	cmp	r3, #4
 8004728:	d003      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0x3a>
 800472a:	e0db      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800472c:	4b73      	ldr	r3, [pc, #460]	; (80048fc <HAL_RCC_GetSysClockFreq+0x204>)
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004730:	e0db      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_GetSysClockFreq+0x208>)
 8004734:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004736:	e0d8      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004738:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d063      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474e:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	2200      	movs	r2, #0
 8004756:	63bb      	str	r3, [r7, #56]	; 0x38
 8004758:	63fa      	str	r2, [r7, #60]	; 0x3c
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
 8004762:	2300      	movs	r3, #0
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800476a:	4622      	mov	r2, r4
 800476c:	462b      	mov	r3, r5
 800476e:	f04f 0000 	mov.w	r0, #0
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	0159      	lsls	r1, r3, #5
 8004778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477c:	0150      	lsls	r0, r2, #5
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4621      	mov	r1, r4
 8004784:	1a51      	subs	r1, r2, r1
 8004786:	6139      	str	r1, [r7, #16]
 8004788:	4629      	mov	r1, r5
 800478a:	eb63 0301 	sbc.w	r3, r3, r1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800479c:	4659      	mov	r1, fp
 800479e:	018b      	lsls	r3, r1, #6
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047a6:	4651      	mov	r1, sl
 80047a8:	018a      	lsls	r2, r1, #6
 80047aa:	4651      	mov	r1, sl
 80047ac:	ebb2 0801 	subs.w	r8, r2, r1
 80047b0:	4659      	mov	r1, fp
 80047b2:	eb63 0901 	sbc.w	r9, r3, r1
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ca:	4690      	mov	r8, r2
 80047cc:	4699      	mov	r9, r3
 80047ce:	4623      	mov	r3, r4
 80047d0:	eb18 0303 	adds.w	r3, r8, r3
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	462b      	mov	r3, r5
 80047d8:	eb49 0303 	adc.w	r3, r9, r3
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047ea:	4629      	mov	r1, r5
 80047ec:	024b      	lsls	r3, r1, #9
 80047ee:	4621      	mov	r1, r4
 80047f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047f4:	4621      	mov	r1, r4
 80047f6:	024a      	lsls	r2, r1, #9
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fe:	2200      	movs	r2, #0
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
 8004802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004808:	f7fc fa26 	bl	8000c58 <__aeabi_uldivmod>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4613      	mov	r3, r2
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004814:	e058      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004816:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	2200      	movs	r2, #0
 800481e:	4618      	mov	r0, r3
 8004820:	4611      	mov	r1, r2
 8004822:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004826:	623b      	str	r3, [r7, #32]
 8004828:	2300      	movs	r3, #0
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
 800482c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	0159      	lsls	r1, r3, #5
 800483e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004842:	0150      	lsls	r0, r2, #5
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4641      	mov	r1, r8
 800484a:	ebb2 0a01 	subs.w	sl, r2, r1
 800484e:	4649      	mov	r1, r9
 8004850:	eb63 0b01 	sbc.w	fp, r3, r1
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004868:	ebb2 040a 	subs.w	r4, r2, sl
 800486c:	eb63 050b 	sbc.w	r5, r3, fp
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	00eb      	lsls	r3, r5, #3
 800487a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800487e:	00e2      	lsls	r2, r4, #3
 8004880:	4614      	mov	r4, r2
 8004882:	461d      	mov	r5, r3
 8004884:	4643      	mov	r3, r8
 8004886:	18e3      	adds	r3, r4, r3
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	464b      	mov	r3, r9
 800488c:	eb45 0303 	adc.w	r3, r5, r3
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800489e:	4629      	mov	r1, r5
 80048a0:	028b      	lsls	r3, r1, #10
 80048a2:	4621      	mov	r1, r4
 80048a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a8:	4621      	mov	r1, r4
 80048aa:	028a      	lsls	r2, r1, #10
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b2:	2200      	movs	r2, #0
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	61fa      	str	r2, [r7, #28]
 80048b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048bc:	f7fc f9cc 	bl	8000c58 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4613      	mov	r3, r2
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e2:	e002      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCC_GetSysClockFreq+0x204>)
 80048e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3750      	adds	r7, #80	; 0x50
 80048f0:	46bd      	mov	sp, r7
 80048f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	00f42400 	.word	0x00f42400
 8004900:	007a1200 	.word	0x007a1200

08004904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_RCC_GetHCLKFreq+0x14>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000008 	.word	0x20000008

0800491c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004920:	f7ff fff0 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0a9b      	lsrs	r3, r3, #10
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4903      	ldr	r1, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40023800 	.word	0x40023800
 8004940:	0800891c 	.word	0x0800891c

08004944 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004968:	2b00      	cmp	r3, #0
 800496a:	d035      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800496c:	4b67      	ldr	r3, [pc, #412]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004972:	f7fd fdd7 	bl	8002524 <HAL_GetTick>
 8004976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004978:	e008      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800497a:	f7fd fdd3 	bl	8002524 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0ba      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800498c:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	019a      	lsls	r2, r3, #6
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	495a      	ldr	r1, [pc, #360]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ac:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049b2:	f7fd fdb7 	bl	8002524 <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ba:	f7fd fdb3 	bl	8002524 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e09a      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8083 	beq.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	4a48      	ldr	r2, [pc, #288]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6413      	str	r3, [r2, #64]	; 0x40
 80049f6:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a43      	ldr	r2, [pc, #268]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fd89 	bl	8002524 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a16:	f7fd fd85 	bl	8002524 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e06c      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a28:	4b3a      	ldr	r3, [pc, #232]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02f      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d028      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a52:	4b2f      	ldr	r3, [pc, #188]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a6e:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d114      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fd53 	bl	8002524 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fd fd4f 	bl	8002524 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e034      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ee      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab0:	d10d      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	4912      	ldr	r1, [pc, #72]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	608b      	str	r3, [r1, #8]
 8004acc:	e005      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ad4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ad8:	6093      	str	r3, [r2, #8]
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae6:	490a      	ldr	r1, [pc, #40]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7c1a      	ldrb	r2, [r3, #16]
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004afe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	42470068 	.word	0x42470068
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42470e40 	.word	0x42470e40
 8004b1c:	424711e0 	.word	0x424711e0

08004b20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e066      	b.n	8004c04 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7f5b      	ldrb	r3, [r3, #29]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd fa9c 	bl	8002084 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	22ca      	movs	r2, #202	; 0xca
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2253      	movs	r2, #83	; 0x53
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa45 	bl	8004ff2 <RTC_EnterInitMode>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d12c      	bne.n	8004bcc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b84:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68d2      	ldr	r2, [r2, #12]
 8004bac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6919      	ldr	r1, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	041a      	lsls	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa4c 	bl	8005060 <RTC_ExitInitMode>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d113      	bne.n	8004bfa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	22ff      	movs	r2, #255	; 0xff
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	7f1b      	ldrb	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_RTC_SetTime+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e087      	b.n	8004d38 <HAL_RTC_SetTime+0x12c>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2202      	movs	r2, #2
 8004c32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d126      	bne.n	8004c88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa29 	bl	80050aa <RTC_ByteToBcd2>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fa22 	bl	80050aa <RTC_ByteToBcd2>
 8004c66:	4603      	mov	r3, r0
 8004c68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	789b      	ldrb	r3, [r3, #2]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fa1a 	bl	80050aa <RTC_ByteToBcd2>
 8004c76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	78db      	ldrb	r3, [r3, #3]
 8004c80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e018      	b.n	8004cba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ca8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	78db      	ldrb	r3, [r3, #3]
 8004cb4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	22ca      	movs	r2, #202	; 0xca
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2253      	movs	r2, #83	; 0x53
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f991 	bl	8004ff2 <RTC_EnterInitMode>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d120      	bne.n	8004d1c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ce4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cf8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f9a4 	bl	8005060 <RTC_ExitInitMode>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	771a      	strb	r2, [r3, #28]

  return status;
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd90      	pop	{r4, r7, pc}

08004d40 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	0c1b      	lsrs	r3, r3, #16
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	0d9b      	lsrs	r3, r3, #22
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11a      	bne.n	8004df2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f98f 	bl	80050e4 <RTC_Bcd2ToByte>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f986 	bl	80050e4 <RTC_Bcd2ToByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	789b      	ldrb	r3, [r3, #2]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f97d 	bl	80050e4 <RTC_Bcd2ToByte>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	7f1b      	ldrb	r3, [r3, #28]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_RTC_SetDate+0x1c>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e071      	b.n	8004efc <HAL_RTC_SetDate+0x100>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2202      	movs	r2, #2
 8004e22:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10e      	bne.n	8004e48 <HAL_RTC_SetDate+0x4c>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	330a      	adds	r3, #10
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d11c      	bne.n	8004e88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	78db      	ldrb	r3, [r3, #3]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f929 	bl	80050aa <RTC_ByteToBcd2>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f922 	bl	80050aa <RTC_ByteToBcd2>
 8004e66:	4603      	mov	r3, r0
 8004e68:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e6a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	789b      	ldrb	r3, [r3, #2]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f91a 	bl	80050aa <RTC_ByteToBcd2>
 8004e76:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e78:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e00e      	b.n	8004ea6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	78db      	ldrb	r3, [r3, #3]
 8004e8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e94:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	22ca      	movs	r2, #202	; 0xca
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2253      	movs	r2, #83	; 0x53
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f89b 	bl	8004ff2 <RTC_EnterInitMode>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ed4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f8c2 	bl	8005060 <RTC_ExitInitMode>
 8004edc:	4603      	mov	r3, r0
 8004ede:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	771a      	strb	r2, [r3, #28]

  return status;
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}

08004f04 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	0b5b      	lsrs	r3, r3, #13
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11a      	bne.n	8004f98 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	78db      	ldrb	r3, [r3, #3]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f8bc 	bl	80050e4 <RTC_Bcd2ToByte>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 f8b3 	bl	80050e4 <RTC_Bcd2ToByte>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	789b      	ldrb	r3, [r3, #2]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f8aa 	bl	80050e4 <RTC_Bcd2ToByte>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fbe:	f7fd fab1 	bl	8002524 <HAL_GetTick>
 8004fc2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fc4:	e009      	b.n	8004fda <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fc6:	f7fd faad 	bl	8002524 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd4:	d901      	bls.n	8004fda <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e007      	b.n	8004fea <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d122      	bne.n	8005056 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800501e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005020:	f7fd fa80 	bl	8002524 <HAL_GetTick>
 8005024:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005026:	e00c      	b.n	8005042 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005028:	f7fd fa7c 	bl	8002524 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005036:	d904      	bls.n	8005042 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2204      	movs	r2, #4
 800503c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <RTC_EnterInitMode+0x64>
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d1e8      	bne.n	8005028 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800507a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff ff89 	bl	8004fa2 <HAL_RTC_WaitForSynchro>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2204      	movs	r2, #4
 800509a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	4603      	mov	r3, r0
 80050b2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80050b8:	e005      	b.n	80050c6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	3301      	adds	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	3b0a      	subs	r3, #10
 80050c4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b09      	cmp	r3, #9
 80050ca:	d8f6      	bhi.n	80050ba <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	b2db      	uxtb	r3, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	b2da      	uxtb	r2, r3
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	4413      	add	r3, r2
 800510e:	b2db      	uxtb	r3, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3350      	adds	r3, #80	; 0x50
 8005132:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3350      	adds	r3, #80	; 0x50
 8005164:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc ff98 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fa88 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e044      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x6c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d013      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x6c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x6c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a19      	ldr	r2, [pc, #100]	; (80052d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x6c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a17      	ldr	r2, [pc, #92]	; (80052dc <HAL_TIM_Base_Start_IT+0xbc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x6c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d111      	bne.n	80052b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b06      	cmp	r3, #6
 800529c:	d010      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e007      	b.n	80052c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40014000 	.word	0x40014000

080052e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0202 	mvn.w	r2, #2
 8005310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9b5 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9a7 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9b8 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b04      	cmp	r3, #4
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0204 	mvn.w	r2, #4
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f98b 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f97d 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f98e 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0208 	mvn.w	r2, #8
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f961 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f953 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f964 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d122      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d11b      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2208      	movs	r2, #8
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f937 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f929 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f93a 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0201 	mvn.w	r2, #1
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc f92a 	bl	80016bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fab2 	bl	80059f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8ff 	bl	80056be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0220 	mvn.w	r2, #32
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa7c 	bl	80059e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIM_ConfigClockSource+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e0b4      	b.n	800567a <HAL_TIM_ConfigClockSource+0x186>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800552e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005548:	d03e      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0xd4>
 800554a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554e:	f200 8087 	bhi.w	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	f000 8086 	beq.w	8005666 <HAL_TIM_ConfigClockSource+0x172>
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	d87f      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d01a      	beq.n	800559a <HAL_TIM_ConfigClockSource+0xa6>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d87b      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d050      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x11a>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d877      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b50      	cmp	r3, #80	; 0x50
 8005572:	d03c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0xfa>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d873      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d058      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x13a>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d86f      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b30      	cmp	r3, #48	; 0x30
 8005582:	d064      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d86b      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b20      	cmp	r3, #32
 800558a:	d060      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d867      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05c      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 8005594:	2b10      	cmp	r3, #16
 8005596:	d05a      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 8005598:	e062      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6899      	ldr	r1, [r3, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f000 f98d 	bl	80058c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	609a      	str	r2, [r3, #8]
      break;
 80055c6:	e04f      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6899      	ldr	r1, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f000 f976 	bl	80058c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ea:	609a      	str	r2, [r3, #8]
      break;
 80055ec:	e03c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 f8ea 	bl	80057d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2150      	movs	r1, #80	; 0x50
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f943 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800560c:	e02c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	461a      	mov	r2, r3
 800561c:	f000 f909 	bl	8005832 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2160      	movs	r1, #96	; 0x60
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f933 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800562c:	e01c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	461a      	mov	r2, r3
 800563c:	f000 f8ca 	bl	80057d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2140      	movs	r1, #64	; 0x40
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f923 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800564c:	e00c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f000 f91a 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800565e:	e003      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	e000      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <TIM_Base_SetConfig+0xe4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a31      	ldr	r2, [pc, #196]	; (80057bc <TIM_Base_SetConfig+0xe8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a30      	ldr	r2, [pc, #192]	; (80057c0 <TIM_Base_SetConfig+0xec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <TIM_Base_SetConfig+0xf0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <TIM_Base_SetConfig+0xe4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a22      	ldr	r2, [pc, #136]	; (80057bc <TIM_Base_SetConfig+0xe8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <TIM_Base_SetConfig+0xec>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <TIM_Base_SetConfig+0xf0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <TIM_Base_SetConfig+0xf4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <TIM_Base_SetConfig+0xf8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <TIM_Base_SetConfig+0xfc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <TIM_Base_SetConfig+0xe4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d103      	bne.n	80057a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	615a      	str	r2, [r3, #20]
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 030a 	bic.w	r3, r3, #10
 8005810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0210 	bic.w	r2, r3, #16
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f043 0307 	orr.w	r3, r3, #7
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e050      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a16      	ldr	r2, [pc, #88]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a13      	ldr	r2, [pc, #76]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40014000 	.word	0x40014000

080059e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <__errno>:
 8005a0c:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <__errno+0x8>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000014 	.word	0x20000014

08005a18 <__libc_init_array>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4d0d      	ldr	r5, [pc, #52]	; (8005a50 <__libc_init_array+0x38>)
 8005a1c:	4c0d      	ldr	r4, [pc, #52]	; (8005a54 <__libc_init_array+0x3c>)
 8005a1e:	1b64      	subs	r4, r4, r5
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	2600      	movs	r6, #0
 8005a24:	42a6      	cmp	r6, r4
 8005a26:	d109      	bne.n	8005a3c <__libc_init_array+0x24>
 8005a28:	4d0b      	ldr	r5, [pc, #44]	; (8005a58 <__libc_init_array+0x40>)
 8005a2a:	4c0c      	ldr	r4, [pc, #48]	; (8005a5c <__libc_init_array+0x44>)
 8005a2c:	f002 ff18 	bl	8008860 <_init>
 8005a30:	1b64      	subs	r4, r4, r5
 8005a32:	10a4      	asrs	r4, r4, #2
 8005a34:	2600      	movs	r6, #0
 8005a36:	42a6      	cmp	r6, r4
 8005a38:	d105      	bne.n	8005a46 <__libc_init_array+0x2e>
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a40:	4798      	blx	r3
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7ee      	b.n	8005a24 <__libc_init_array+0xc>
 8005a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4a:	4798      	blx	r3
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	e7f2      	b.n	8005a36 <__libc_init_array+0x1e>
 8005a50:	08008d04 	.word	0x08008d04
 8005a54:	08008d04 	.word	0x08008d04
 8005a58:	08008d04 	.word	0x08008d04
 8005a5c:	08008d08 	.word	0x08008d08

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <__cvt>:
 8005a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	ec55 4b10 	vmov	r4, r5, d0
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	462b      	mov	r3, r5
 8005a80:	bfbb      	ittet	lt
 8005a82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a86:	461d      	movlt	r5, r3
 8005a88:	2300      	movge	r3, #0
 8005a8a:	232d      	movlt	r3, #45	; 0x2d
 8005a8c:	700b      	strb	r3, [r1, #0]
 8005a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a94:	4691      	mov	r9, r2
 8005a96:	f023 0820 	bic.w	r8, r3, #32
 8005a9a:	bfbc      	itt	lt
 8005a9c:	4622      	movlt	r2, r4
 8005a9e:	4614      	movlt	r4, r2
 8005aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aa4:	d005      	beq.n	8005ab2 <__cvt+0x42>
 8005aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aaa:	d100      	bne.n	8005aae <__cvt+0x3e>
 8005aac:	3601      	adds	r6, #1
 8005aae:	2102      	movs	r1, #2
 8005ab0:	e000      	b.n	8005ab4 <__cvt+0x44>
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	ab03      	add	r3, sp, #12
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	ab02      	add	r3, sp, #8
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	ec45 4b10 	vmov	d0, r4, r5
 8005ac0:	4653      	mov	r3, sl
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	f000 fd00 	bl	80064c8 <_dtoa_r>
 8005ac8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005acc:	4607      	mov	r7, r0
 8005ace:	d102      	bne.n	8005ad6 <__cvt+0x66>
 8005ad0:	f019 0f01 	tst.w	r9, #1
 8005ad4:	d022      	beq.n	8005b1c <__cvt+0xac>
 8005ad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ada:	eb07 0906 	add.w	r9, r7, r6
 8005ade:	d110      	bne.n	8005b02 <__cvt+0x92>
 8005ae0:	783b      	ldrb	r3, [r7, #0]
 8005ae2:	2b30      	cmp	r3, #48	; 0x30
 8005ae4:	d10a      	bne.n	8005afc <__cvt+0x8c>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005af2:	b918      	cbnz	r0, 8005afc <__cvt+0x8c>
 8005af4:	f1c6 0601 	rsb	r6, r6, #1
 8005af8:	f8ca 6000 	str.w	r6, [sl]
 8005afc:	f8da 3000 	ldr.w	r3, [sl]
 8005b00:	4499      	add	r9, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0e:	b108      	cbz	r0, 8005b14 <__cvt+0xa4>
 8005b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b14:	2230      	movs	r2, #48	; 0x30
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	454b      	cmp	r3, r9
 8005b1a:	d307      	bcc.n	8005b2c <__cvt+0xbc>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b20:	1bdb      	subs	r3, r3, r7
 8005b22:	4638      	mov	r0, r7
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	b004      	add	sp, #16
 8005b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2c:	1c59      	adds	r1, r3, #1
 8005b2e:	9103      	str	r1, [sp, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e7f0      	b.n	8005b16 <__cvt+0xa6>

08005b34 <__exponent>:
 8005b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b36:	4603      	mov	r3, r0
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	bfb8      	it	lt
 8005b3c:	4249      	neglt	r1, r1
 8005b3e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b42:	bfb4      	ite	lt
 8005b44:	222d      	movlt	r2, #45	; 0x2d
 8005b46:	222b      	movge	r2, #43	; 0x2b
 8005b48:	2909      	cmp	r1, #9
 8005b4a:	7042      	strb	r2, [r0, #1]
 8005b4c:	dd2a      	ble.n	8005ba4 <__exponent+0x70>
 8005b4e:	f10d 0407 	add.w	r4, sp, #7
 8005b52:	46a4      	mov	ip, r4
 8005b54:	270a      	movs	r7, #10
 8005b56:	46a6      	mov	lr, r4
 8005b58:	460a      	mov	r2, r1
 8005b5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b5e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b62:	3530      	adds	r5, #48	; 0x30
 8005b64:	2a63      	cmp	r2, #99	; 0x63
 8005b66:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b6e:	4631      	mov	r1, r6
 8005b70:	dcf1      	bgt.n	8005b56 <__exponent+0x22>
 8005b72:	3130      	adds	r1, #48	; 0x30
 8005b74:	f1ae 0502 	sub.w	r5, lr, #2
 8005b78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b7c:	1c44      	adds	r4, r0, #1
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4561      	cmp	r1, ip
 8005b82:	d30a      	bcc.n	8005b9a <__exponent+0x66>
 8005b84:	f10d 0209 	add.w	r2, sp, #9
 8005b88:	eba2 020e 	sub.w	r2, r2, lr
 8005b8c:	4565      	cmp	r5, ip
 8005b8e:	bf88      	it	hi
 8005b90:	2200      	movhi	r2, #0
 8005b92:	4413      	add	r3, r2
 8005b94:	1a18      	subs	r0, r3, r0
 8005b96:	b003      	add	sp, #12
 8005b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ba2:	e7ed      	b.n	8005b80 <__exponent+0x4c>
 8005ba4:	2330      	movs	r3, #48	; 0x30
 8005ba6:	3130      	adds	r1, #48	; 0x30
 8005ba8:	7083      	strb	r3, [r0, #2]
 8005baa:	70c1      	strb	r1, [r0, #3]
 8005bac:	1d03      	adds	r3, r0, #4
 8005bae:	e7f1      	b.n	8005b94 <__exponent+0x60>

08005bb0 <_printf_float>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b02 	vpush	{d8}
 8005bb8:	b08d      	sub	sp, #52	; 0x34
 8005bba:	460c      	mov	r4, r1
 8005bbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	461f      	mov	r7, r3
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	f001 fa6d 	bl	80070a4 <_localeconv_r>
 8005bca:	f8d0 a000 	ldr.w	sl, [r0]
 8005bce:	4650      	mov	r0, sl
 8005bd0:	f7fa fb06 	bl	80001e0 <strlen>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005be0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005be4:	3307      	adds	r3, #7
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	f103 0208 	add.w	r2, r3, #8
 8005bee:	f8c8 2000 	str.w	r2, [r8]
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c08:	ee08 0a10 	vmov	s16, r0
 8005c0c:	4b9f      	ldr	r3, [pc, #636]	; (8005e8c <_printf_float+0x2dc>)
 8005c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	f7fa ff91 	bl	8000b3c <__aeabi_dcmpun>
 8005c1a:	bb88      	cbnz	r0, 8005c80 <_printf_float+0xd0>
 8005c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c20:	4b9a      	ldr	r3, [pc, #616]	; (8005e8c <_printf_float+0x2dc>)
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295
 8005c26:	f7fa ff6b 	bl	8000b00 <__aeabi_dcmple>
 8005c2a:	bb48      	cbnz	r0, 8005c80 <_printf_float+0xd0>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa ff5a 	bl	8000aec <__aeabi_dcmplt>
 8005c38:	b110      	cbz	r0, 8005c40 <_printf_float+0x90>
 8005c3a:	232d      	movs	r3, #45	; 0x2d
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <_printf_float+0x2e0>)
 8005c42:	4894      	ldr	r0, [pc, #592]	; (8005e94 <_printf_float+0x2e4>)
 8005c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c48:	bf94      	ite	ls
 8005c4a:	4698      	movls	r8, r3
 8005c4c:	4680      	movhi	r8, r0
 8005c4e:	2303      	movs	r3, #3
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	9b05      	ldr	r3, [sp, #20]
 8005c54:	f023 0204 	bic.w	r2, r3, #4
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	9700      	str	r7, [sp, #0]
 8005c60:	4633      	mov	r3, r6
 8005c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c64:	4621      	mov	r1, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f9d8 	bl	800601c <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f040 8090 	bne.w	8005d92 <_printf_float+0x1e2>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	b00d      	add	sp, #52	; 0x34
 8005c78:	ecbd 8b02 	vpop	{d8}
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa ff58 	bl	8000b3c <__aeabi_dcmpun>
 8005c8c:	b140      	cbz	r0, 8005ca0 <_printf_float+0xf0>
 8005c8e:	464b      	mov	r3, r9
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bfbc      	itt	lt
 8005c94:	232d      	movlt	r3, #45	; 0x2d
 8005c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c9a:	487f      	ldr	r0, [pc, #508]	; (8005e98 <_printf_float+0x2e8>)
 8005c9c:	4b7f      	ldr	r3, [pc, #508]	; (8005e9c <_printf_float+0x2ec>)
 8005c9e:	e7d1      	b.n	8005c44 <_printf_float+0x94>
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ca6:	9206      	str	r2, [sp, #24]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	d13f      	bne.n	8005d2c <_printf_float+0x17c>
 8005cac:	2306      	movs	r3, #6
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	6861      	ldr	r1, [r4, #4]
 8005cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8005cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cc2:	ab09      	add	r3, sp, #36	; 0x24
 8005cc4:	ec49 8b10 	vmov	d0, r8, r9
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff fecd 	bl	8005a70 <__cvt>
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cda:	2b47      	cmp	r3, #71	; 0x47
 8005cdc:	4680      	mov	r8, r0
 8005cde:	d108      	bne.n	8005cf2 <_printf_float+0x142>
 8005ce0:	1cc8      	adds	r0, r1, #3
 8005ce2:	db02      	blt.n	8005cea <_printf_float+0x13a>
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	dd41      	ble.n	8005d6e <_printf_float+0x1be>
 8005cea:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cee:	fa5f fb8b 	uxtb.w	fp, fp
 8005cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cf6:	d820      	bhi.n	8005d3a <_printf_float+0x18a>
 8005cf8:	3901      	subs	r1, #1
 8005cfa:	465a      	mov	r2, fp
 8005cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d00:	9109      	str	r1, [sp, #36]	; 0x24
 8005d02:	f7ff ff17 	bl	8005b34 <__exponent>
 8005d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d08:	1813      	adds	r3, r2, r0
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	4681      	mov	r9, r0
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	dc02      	bgt.n	8005d18 <_printf_float+0x168>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d2      	lsls	r2, r2, #31
 8005d16:	d501      	bpl.n	8005d1c <_printf_float+0x16c>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d09c      	beq.n	8005c5e <_printf_float+0xae>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2a:	e798      	b.n	8005c5e <_printf_float+0xae>
 8005d2c:	9a06      	ldr	r2, [sp, #24]
 8005d2e:	2a47      	cmp	r2, #71	; 0x47
 8005d30:	d1be      	bne.n	8005cb0 <_printf_float+0x100>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1bc      	bne.n	8005cb0 <_printf_float+0x100>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7b9      	b.n	8005cae <_printf_float+0xfe>
 8005d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d3e:	d118      	bne.n	8005d72 <_printf_float+0x1c2>
 8005d40:	2900      	cmp	r1, #0
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	dd0b      	ble.n	8005d5e <_printf_float+0x1ae>
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	b913      	cbnz	r3, 8005d50 <_printf_float+0x1a0>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d502      	bpl.n	8005d56 <_printf_float+0x1a6>
 8005d50:	3301      	adds	r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d58:	f04f 0900 	mov.w	r9, #0
 8005d5c:	e7de      	b.n	8005d1c <_printf_float+0x16c>
 8005d5e:	b913      	cbnz	r3, 8005d66 <_printf_float+0x1b6>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d501      	bpl.n	8005d6a <_printf_float+0x1ba>
 8005d66:	3302      	adds	r3, #2
 8005d68:	e7f4      	b.n	8005d54 <_printf_float+0x1a4>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7f2      	b.n	8005d54 <_printf_float+0x1a4>
 8005d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d74:	4299      	cmp	r1, r3
 8005d76:	db05      	blt.n	8005d84 <_printf_float+0x1d4>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	6121      	str	r1, [r4, #16]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d5ea      	bpl.n	8005d56 <_printf_float+0x1a6>
 8005d80:	1c4b      	adds	r3, r1, #1
 8005d82:	e7e7      	b.n	8005d54 <_printf_float+0x1a4>
 8005d84:	2900      	cmp	r1, #0
 8005d86:	bfd4      	ite	le
 8005d88:	f1c1 0202 	rsble	r2, r1, #2
 8005d8c:	2201      	movgt	r2, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	e7e0      	b.n	8005d54 <_printf_float+0x1a4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	055a      	lsls	r2, r3, #21
 8005d96:	d407      	bmi.n	8005da8 <_printf_float+0x1f8>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	d12c      	bne.n	8005e00 <_printf_float+0x250>
 8005da6:	e764      	b.n	8005c72 <_printf_float+0xc2>
 8005da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dac:	f240 80e0 	bls.w	8005f70 <_printf_float+0x3c0>
 8005db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f7fa fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d034      	beq.n	8005e2a <_printf_float+0x27a>
 8005dc0:	4a37      	ldr	r2, [pc, #220]	; (8005ea0 <_printf_float+0x2f0>)
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af51 	beq.w	8005c72 <_printf_float+0xc2>
 8005dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	db02      	blt.n	8005dde <_printf_float+0x22e>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d8      	lsls	r0, r3, #31
 8005ddc:	d510      	bpl.n	8005e00 <_printf_float+0x250>
 8005dde:	ee18 3a10 	vmov	r3, s16
 8005de2:	4652      	mov	r2, sl
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af41 	beq.w	8005c72 <_printf_float+0xc2>
 8005df0:	f04f 0800 	mov.w	r8, #0
 8005df4:	f104 091a 	add.w	r9, r4, #26
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	4543      	cmp	r3, r8
 8005dfe:	dc09      	bgt.n	8005e14 <_printf_float+0x264>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	079b      	lsls	r3, r3, #30
 8005e04:	f100 8105 	bmi.w	8006012 <_printf_float+0x462>
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	bfb8      	it	lt
 8005e10:	4618      	movlt	r0, r3
 8005e12:	e730      	b.n	8005c76 <_printf_float+0xc6>
 8005e14:	2301      	movs	r3, #1
 8005e16:	464a      	mov	r2, r9
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af27 	beq.w	8005c72 <_printf_float+0xc2>
 8005e24:	f108 0801 	add.w	r8, r8, #1
 8005e28:	e7e6      	b.n	8005df8 <_printf_float+0x248>
 8005e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dc39      	bgt.n	8005ea4 <_printf_float+0x2f4>
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <_printf_float+0x2f0>)
 8005e32:	2301      	movs	r3, #1
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af19 	beq.w	8005c72 <_printf_float+0xc2>
 8005e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e44:	4313      	orrs	r3, r2
 8005e46:	d102      	bne.n	8005e4e <_printf_float+0x29e>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	d5d8      	bpl.n	8005e00 <_printf_float+0x250>
 8005e4e:	ee18 3a10 	vmov	r3, s16
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af09 	beq.w	8005c72 <_printf_float+0xc2>
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	f104 0a1a 	add.w	sl, r4, #26
 8005e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6a:	425b      	negs	r3, r3
 8005e6c:	454b      	cmp	r3, r9
 8005e6e:	dc01      	bgt.n	8005e74 <_printf_float+0x2c4>
 8005e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e72:	e792      	b.n	8005d9a <_printf_float+0x1ea>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4652      	mov	r2, sl
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f aef7 	beq.w	8005c72 <_printf_float+0xc2>
 8005e84:	f109 0901 	add.w	r9, r9, #1
 8005e88:	e7ee      	b.n	8005e68 <_printf_float+0x2b8>
 8005e8a:	bf00      	nop
 8005e8c:	7fefffff 	.word	0x7fefffff
 8005e90:	08008928 	.word	0x08008928
 8005e94:	0800892c 	.word	0x0800892c
 8005e98:	08008934 	.word	0x08008934
 8005e9c:	08008930 	.word	0x08008930
 8005ea0:	08008938 	.word	0x08008938
 8005ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bfa8      	it	ge
 8005eac:	461a      	movge	r2, r3
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	4691      	mov	r9, r2
 8005eb2:	dc37      	bgt.n	8005f24 <_printf_float+0x374>
 8005eb4:	f04f 0b00 	mov.w	fp, #0
 8005eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ebc:	f104 021a 	add.w	r2, r4, #26
 8005ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	eba3 0309 	sub.w	r3, r3, r9
 8005ec8:	455b      	cmp	r3, fp
 8005eca:	dc33      	bgt.n	8005f34 <_printf_float+0x384>
 8005ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	db3b      	blt.n	8005f4c <_printf_float+0x39c>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	07da      	lsls	r2, r3, #31
 8005ed8:	d438      	bmi.n	8005f4c <_printf_float+0x39c>
 8005eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005edc:	9a05      	ldr	r2, [sp, #20]
 8005ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee0:	1a9a      	subs	r2, r3, r2
 8005ee2:	eba3 0901 	sub.w	r9, r3, r1
 8005ee6:	4591      	cmp	r9, r2
 8005ee8:	bfa8      	it	ge
 8005eea:	4691      	movge	r9, r2
 8005eec:	f1b9 0f00 	cmp.w	r9, #0
 8005ef0:	dc35      	bgt.n	8005f5e <_printf_float+0x3ae>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efa:	f104 0a1a 	add.w	sl, r4, #26
 8005efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	eba3 0309 	sub.w	r3, r3, r9
 8005f08:	4543      	cmp	r3, r8
 8005f0a:	f77f af79 	ble.w	8005e00 <_printf_float+0x250>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f aeaa 	beq.w	8005c72 <_printf_float+0xc2>
 8005f1e:	f108 0801 	add.w	r8, r8, #1
 8005f22:	e7ec      	b.n	8005efe <_printf_float+0x34e>
 8005f24:	4613      	mov	r3, r2
 8005f26:	4631      	mov	r1, r6
 8005f28:	4642      	mov	r2, r8
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d1c0      	bne.n	8005eb4 <_printf_float+0x304>
 8005f32:	e69e      	b.n	8005c72 <_printf_float+0xc2>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	9205      	str	r2, [sp, #20]
 8005f3c:	47b8      	blx	r7
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f43f ae97 	beq.w	8005c72 <_printf_float+0xc2>
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	f10b 0b01 	add.w	fp, fp, #1
 8005f4a:	e7b9      	b.n	8005ec0 <_printf_float+0x310>
 8005f4c:	ee18 3a10 	vmov	r3, s16
 8005f50:	4652      	mov	r2, sl
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d1be      	bne.n	8005eda <_printf_float+0x32a>
 8005f5c:	e689      	b.n	8005c72 <_printf_float+0xc2>
 8005f5e:	9a05      	ldr	r2, [sp, #20]
 8005f60:	464b      	mov	r3, r9
 8005f62:	4442      	add	r2, r8
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d1c1      	bne.n	8005ef2 <_printf_float+0x342>
 8005f6e:	e680      	b.n	8005c72 <_printf_float+0xc2>
 8005f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	dc01      	bgt.n	8005f7a <_printf_float+0x3ca>
 8005f76:	07db      	lsls	r3, r3, #31
 8005f78:	d538      	bpl.n	8005fec <_printf_float+0x43c>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f ae74 	beq.w	8005c72 <_printf_float+0xc2>
 8005f8a:	ee18 3a10 	vmov	r3, s16
 8005f8e:	4652      	mov	r2, sl
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f ae6b 	beq.w	8005c72 <_printf_float+0xc2>
 8005f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f7fa fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fa8:	b9d8      	cbnz	r0, 8005fe2 <_printf_float+0x432>
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	f108 0201 	add.w	r2, r8, #1
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d10e      	bne.n	8005fda <_printf_float+0x42a>
 8005fbc:	e659      	b.n	8005c72 <_printf_float+0xc2>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f43f ae52 	beq.w	8005c72 <_printf_float+0xc2>
 8005fce:	f108 0801 	add.w	r8, r8, #1
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4543      	cmp	r3, r8
 8005fd8:	dcf1      	bgt.n	8005fbe <_printf_float+0x40e>
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe0:	e6dc      	b.n	8005d9c <_printf_float+0x1ec>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f104 0a1a 	add.w	sl, r4, #26
 8005fea:	e7f2      	b.n	8005fd2 <_printf_float+0x422>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4642      	mov	r2, r8
 8005ff0:	e7df      	b.n	8005fb2 <_printf_float+0x402>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	464a      	mov	r2, r9
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae38 	beq.w	8005c72 <_printf_float+0xc2>
 8006002:	f108 0801 	add.w	r8, r8, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	4543      	cmp	r3, r8
 800600e:	dcf0      	bgt.n	8005ff2 <_printf_float+0x442>
 8006010:	e6fa      	b.n	8005e08 <_printf_float+0x258>
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	f104 0919 	add.w	r9, r4, #25
 800601a:	e7f4      	b.n	8006006 <_printf_float+0x456>

0800601c <_printf_common>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	4616      	mov	r6, r2
 8006022:	4699      	mov	r9, r3
 8006024:	688a      	ldr	r2, [r1, #8]
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800602c:	4293      	cmp	r3, r2
 800602e:	bfb8      	it	lt
 8006030:	4613      	movlt	r3, r2
 8006032:	6033      	str	r3, [r6, #0]
 8006034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006038:	4607      	mov	r7, r0
 800603a:	460c      	mov	r4, r1
 800603c:	b10a      	cbz	r2, 8006042 <_printf_common+0x26>
 800603e:	3301      	adds	r3, #1
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	0699      	lsls	r1, r3, #26
 8006046:	bf42      	ittt	mi
 8006048:	6833      	ldrmi	r3, [r6, #0]
 800604a:	3302      	addmi	r3, #2
 800604c:	6033      	strmi	r3, [r6, #0]
 800604e:	6825      	ldr	r5, [r4, #0]
 8006050:	f015 0506 	ands.w	r5, r5, #6
 8006054:	d106      	bne.n	8006064 <_printf_common+0x48>
 8006056:	f104 0a19 	add.w	sl, r4, #25
 800605a:	68e3      	ldr	r3, [r4, #12]
 800605c:	6832      	ldr	r2, [r6, #0]
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc26      	bgt.n	80060b2 <_printf_common+0x96>
 8006064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006068:	1e13      	subs	r3, r2, #0
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	bf18      	it	ne
 800606e:	2301      	movne	r3, #1
 8006070:	0692      	lsls	r2, r2, #26
 8006072:	d42b      	bmi.n	80060cc <_printf_common+0xb0>
 8006074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006078:	4649      	mov	r1, r9
 800607a:	4638      	mov	r0, r7
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d01e      	beq.n	80060c0 <_printf_common+0xa4>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	68e5      	ldr	r5, [r4, #12]
 8006086:	6832      	ldr	r2, [r6, #0]
 8006088:	f003 0306 	and.w	r3, r3, #6
 800608c:	2b04      	cmp	r3, #4
 800608e:	bf08      	it	eq
 8006090:	1aad      	subeq	r5, r5, r2
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	bf0c      	ite	eq
 8006098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800609c:	2500      	movne	r5, #0
 800609e:	4293      	cmp	r3, r2
 80060a0:	bfc4      	itt	gt
 80060a2:	1a9b      	subgt	r3, r3, r2
 80060a4:	18ed      	addgt	r5, r5, r3
 80060a6:	2600      	movs	r6, #0
 80060a8:	341a      	adds	r4, #26
 80060aa:	42b5      	cmp	r5, r6
 80060ac:	d11a      	bne.n	80060e4 <_printf_common+0xc8>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e008      	b.n	80060c4 <_printf_common+0xa8>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4652      	mov	r2, sl
 80060b6:	4649      	mov	r1, r9
 80060b8:	4638      	mov	r0, r7
 80060ba:	47c0      	blx	r8
 80060bc:	3001      	adds	r0, #1
 80060be:	d103      	bne.n	80060c8 <_printf_common+0xac>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c8:	3501      	adds	r5, #1
 80060ca:	e7c6      	b.n	800605a <_printf_common+0x3e>
 80060cc:	18e1      	adds	r1, r4, r3
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	2030      	movs	r0, #48	; 0x30
 80060d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d6:	4422      	add	r2, r4
 80060d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e0:	3302      	adds	r3, #2
 80060e2:	e7c7      	b.n	8006074 <_printf_common+0x58>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4622      	mov	r2, r4
 80060e8:	4649      	mov	r1, r9
 80060ea:	4638      	mov	r0, r7
 80060ec:	47c0      	blx	r8
 80060ee:	3001      	adds	r0, #1
 80060f0:	d0e6      	beq.n	80060c0 <_printf_common+0xa4>
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7d9      	b.n	80060aa <_printf_common+0x8e>
	...

080060f8 <_printf_i>:
 80060f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	7e0f      	ldrb	r7, [r1, #24]
 80060fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006100:	2f78      	cmp	r7, #120	; 0x78
 8006102:	4691      	mov	r9, r2
 8006104:	4680      	mov	r8, r0
 8006106:	460c      	mov	r4, r1
 8006108:	469a      	mov	sl, r3
 800610a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800610e:	d807      	bhi.n	8006120 <_printf_i+0x28>
 8006110:	2f62      	cmp	r7, #98	; 0x62
 8006112:	d80a      	bhi.n	800612a <_printf_i+0x32>
 8006114:	2f00      	cmp	r7, #0
 8006116:	f000 80d8 	beq.w	80062ca <_printf_i+0x1d2>
 800611a:	2f58      	cmp	r7, #88	; 0x58
 800611c:	f000 80a3 	beq.w	8006266 <_printf_i+0x16e>
 8006120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006128:	e03a      	b.n	80061a0 <_printf_i+0xa8>
 800612a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800612e:	2b15      	cmp	r3, #21
 8006130:	d8f6      	bhi.n	8006120 <_printf_i+0x28>
 8006132:	a101      	add	r1, pc, #4	; (adr r1, 8006138 <_printf_i+0x40>)
 8006134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006138:	08006191 	.word	0x08006191
 800613c:	080061a5 	.word	0x080061a5
 8006140:	08006121 	.word	0x08006121
 8006144:	08006121 	.word	0x08006121
 8006148:	08006121 	.word	0x08006121
 800614c:	08006121 	.word	0x08006121
 8006150:	080061a5 	.word	0x080061a5
 8006154:	08006121 	.word	0x08006121
 8006158:	08006121 	.word	0x08006121
 800615c:	08006121 	.word	0x08006121
 8006160:	08006121 	.word	0x08006121
 8006164:	080062b1 	.word	0x080062b1
 8006168:	080061d5 	.word	0x080061d5
 800616c:	08006293 	.word	0x08006293
 8006170:	08006121 	.word	0x08006121
 8006174:	08006121 	.word	0x08006121
 8006178:	080062d3 	.word	0x080062d3
 800617c:	08006121 	.word	0x08006121
 8006180:	080061d5 	.word	0x080061d5
 8006184:	08006121 	.word	0x08006121
 8006188:	08006121 	.word	0x08006121
 800618c:	0800629b 	.word	0x0800629b
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	602a      	str	r2, [r5, #0]
 8006198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0a3      	b.n	80062ec <_printf_i+0x1f4>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	6829      	ldr	r1, [r5, #0]
 80061a8:	0606      	lsls	r6, r0, #24
 80061aa:	f101 0304 	add.w	r3, r1, #4
 80061ae:	d50a      	bpl.n	80061c6 <_printf_i+0xce>
 80061b0:	680e      	ldr	r6, [r1, #0]
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	da03      	bge.n	80061c0 <_printf_i+0xc8>
 80061b8:	232d      	movs	r3, #45	; 0x2d
 80061ba:	4276      	negs	r6, r6
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c0:	485e      	ldr	r0, [pc, #376]	; (800633c <_printf_i+0x244>)
 80061c2:	230a      	movs	r3, #10
 80061c4:	e019      	b.n	80061fa <_printf_i+0x102>
 80061c6:	680e      	ldr	r6, [r1, #0]
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061ce:	bf18      	it	ne
 80061d0:	b236      	sxthne	r6, r6
 80061d2:	e7ef      	b.n	80061b4 <_printf_i+0xbc>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	1d19      	adds	r1, r3, #4
 80061da:	6029      	str	r1, [r5, #0]
 80061dc:	0601      	lsls	r1, r0, #24
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0xec>
 80061e0:	681e      	ldr	r6, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0xf2>
 80061e4:	0646      	lsls	r6, r0, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0xe8>
 80061e8:	881e      	ldrh	r6, [r3, #0]
 80061ea:	4854      	ldr	r0, [pc, #336]	; (800633c <_printf_i+0x244>)
 80061ec:	2f6f      	cmp	r7, #111	; 0x6f
 80061ee:	bf0c      	ite	eq
 80061f0:	2308      	moveq	r3, #8
 80061f2:	230a      	movne	r3, #10
 80061f4:	2100      	movs	r1, #0
 80061f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fa:	6865      	ldr	r5, [r4, #4]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	2d00      	cmp	r5, #0
 8006200:	bfa2      	ittt	ge
 8006202:	6821      	ldrge	r1, [r4, #0]
 8006204:	f021 0104 	bicge.w	r1, r1, #4
 8006208:	6021      	strge	r1, [r4, #0]
 800620a:	b90e      	cbnz	r6, 8006210 <_printf_i+0x118>
 800620c:	2d00      	cmp	r5, #0
 800620e:	d04d      	beq.n	80062ac <_printf_i+0x1b4>
 8006210:	4615      	mov	r5, r2
 8006212:	fbb6 f1f3 	udiv	r1, r6, r3
 8006216:	fb03 6711 	mls	r7, r3, r1, r6
 800621a:	5dc7      	ldrb	r7, [r0, r7]
 800621c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006220:	4637      	mov	r7, r6
 8006222:	42bb      	cmp	r3, r7
 8006224:	460e      	mov	r6, r1
 8006226:	d9f4      	bls.n	8006212 <_printf_i+0x11a>
 8006228:	2b08      	cmp	r3, #8
 800622a:	d10b      	bne.n	8006244 <_printf_i+0x14c>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	07de      	lsls	r6, r3, #31
 8006230:	d508      	bpl.n	8006244 <_printf_i+0x14c>
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	6861      	ldr	r1, [r4, #4]
 8006236:	4299      	cmp	r1, r3
 8006238:	bfde      	ittt	le
 800623a:	2330      	movle	r3, #48	; 0x30
 800623c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006240:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006244:	1b52      	subs	r2, r2, r5
 8006246:	6122      	str	r2, [r4, #16]
 8006248:	f8cd a000 	str.w	sl, [sp]
 800624c:	464b      	mov	r3, r9
 800624e:	aa03      	add	r2, sp, #12
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f7ff fee2 	bl	800601c <_printf_common>
 8006258:	3001      	adds	r0, #1
 800625a:	d14c      	bne.n	80062f6 <_printf_i+0x1fe>
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	b004      	add	sp, #16
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	4835      	ldr	r0, [pc, #212]	; (800633c <_printf_i+0x244>)
 8006268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800626c:	6829      	ldr	r1, [r5, #0]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f851 6b04 	ldr.w	r6, [r1], #4
 8006274:	6029      	str	r1, [r5, #0]
 8006276:	061d      	lsls	r5, r3, #24
 8006278:	d514      	bpl.n	80062a4 <_printf_i+0x1ac>
 800627a:	07df      	lsls	r7, r3, #31
 800627c:	bf44      	itt	mi
 800627e:	f043 0320 	orrmi.w	r3, r3, #32
 8006282:	6023      	strmi	r3, [r4, #0]
 8006284:	b91e      	cbnz	r6, 800628e <_printf_i+0x196>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f023 0320 	bic.w	r3, r3, #32
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	2310      	movs	r3, #16
 8006290:	e7b0      	b.n	80061f4 <_printf_i+0xfc>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	2378      	movs	r3, #120	; 0x78
 800629c:	4828      	ldr	r0, [pc, #160]	; (8006340 <_printf_i+0x248>)
 800629e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062a2:	e7e3      	b.n	800626c <_printf_i+0x174>
 80062a4:	0659      	lsls	r1, r3, #25
 80062a6:	bf48      	it	mi
 80062a8:	b2b6      	uxthmi	r6, r6
 80062aa:	e7e6      	b.n	800627a <_printf_i+0x182>
 80062ac:	4615      	mov	r5, r2
 80062ae:	e7bb      	b.n	8006228 <_printf_i+0x130>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	6826      	ldr	r6, [r4, #0]
 80062b4:	6961      	ldr	r1, [r4, #20]
 80062b6:	1d18      	adds	r0, r3, #4
 80062b8:	6028      	str	r0, [r5, #0]
 80062ba:	0635      	lsls	r5, r6, #24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0x1cc>
 80062c0:	6019      	str	r1, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0x1d2>
 80062c4:	0670      	lsls	r0, r6, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0x1c8>
 80062c8:	8019      	strh	r1, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	4615      	mov	r5, r2
 80062d0:	e7ba      	b.n	8006248 <_printf_i+0x150>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	4628      	mov	r0, r5
 80062e0:	f7f9 ff86 	bl	80001f0 <memchr>
 80062e4:	b108      	cbz	r0, 80062ea <_printf_i+0x1f2>
 80062e6:	1b40      	subs	r0, r0, r5
 80062e8:	6060      	str	r0, [r4, #4]
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f4:	e7a8      	b.n	8006248 <_printf_i+0x150>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d0ab      	beq.n	800625c <_printf_i+0x164>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	d413      	bmi.n	8006332 <_printf_i+0x23a>
 800630a:	68e0      	ldr	r0, [r4, #12]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	4298      	cmp	r0, r3
 8006310:	bfb8      	it	lt
 8006312:	4618      	movlt	r0, r3
 8006314:	e7a4      	b.n	8006260 <_printf_i+0x168>
 8006316:	2301      	movs	r3, #1
 8006318:	4632      	mov	r2, r6
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	47d0      	blx	sl
 8006320:	3001      	adds	r0, #1
 8006322:	d09b      	beq.n	800625c <_printf_i+0x164>
 8006324:	3501      	adds	r5, #1
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	9903      	ldr	r1, [sp, #12]
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	42ab      	cmp	r3, r5
 800632e:	dcf2      	bgt.n	8006316 <_printf_i+0x21e>
 8006330:	e7eb      	b.n	800630a <_printf_i+0x212>
 8006332:	2500      	movs	r5, #0
 8006334:	f104 0619 	add.w	r6, r4, #25
 8006338:	e7f5      	b.n	8006326 <_printf_i+0x22e>
 800633a:	bf00      	nop
 800633c:	0800893a 	.word	0x0800893a
 8006340:	0800894b 	.word	0x0800894b

08006344 <siprintf>:
 8006344:	b40e      	push	{r1, r2, r3}
 8006346:	b500      	push	{lr}
 8006348:	b09c      	sub	sp, #112	; 0x70
 800634a:	ab1d      	add	r3, sp, #116	; 0x74
 800634c:	9002      	str	r0, [sp, #8]
 800634e:	9006      	str	r0, [sp, #24]
 8006350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006354:	4809      	ldr	r0, [pc, #36]	; (800637c <siprintf+0x38>)
 8006356:	9107      	str	r1, [sp, #28]
 8006358:	9104      	str	r1, [sp, #16]
 800635a:	4909      	ldr	r1, [pc, #36]	; (8006380 <siprintf+0x3c>)
 800635c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006360:	9105      	str	r1, [sp, #20]
 8006362:	6800      	ldr	r0, [r0, #0]
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	a902      	add	r1, sp, #8
 8006368:	f001 fb8c 	bl	8007a84 <_svfiprintf_r>
 800636c:	9b02      	ldr	r3, [sp, #8]
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	b01c      	add	sp, #112	; 0x70
 8006374:	f85d eb04 	ldr.w	lr, [sp], #4
 8006378:	b003      	add	sp, #12
 800637a:	4770      	bx	lr
 800637c:	20000014 	.word	0x20000014
 8006380:	ffff0208 	.word	0xffff0208

08006384 <strcat>:
 8006384:	b510      	push	{r4, lr}
 8006386:	4602      	mov	r2, r0
 8006388:	7814      	ldrb	r4, [r2, #0]
 800638a:	4613      	mov	r3, r2
 800638c:	3201      	adds	r2, #1
 800638e:	2c00      	cmp	r4, #0
 8006390:	d1fa      	bne.n	8006388 <strcat+0x4>
 8006392:	3b01      	subs	r3, #1
 8006394:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006398:	f803 2f01 	strb.w	r2, [r3, #1]!
 800639c:	2a00      	cmp	r2, #0
 800639e:	d1f9      	bne.n	8006394 <strcat+0x10>
 80063a0:	bd10      	pop	{r4, pc}

080063a2 <strcpy>:
 80063a2:	4603      	mov	r3, r0
 80063a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a8:	f803 2b01 	strb.w	r2, [r3], #1
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d1f9      	bne.n	80063a4 <strcpy+0x2>
 80063b0:	4770      	bx	lr

080063b2 <quorem>:
 80063b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b6:	6903      	ldr	r3, [r0, #16]
 80063b8:	690c      	ldr	r4, [r1, #16]
 80063ba:	42a3      	cmp	r3, r4
 80063bc:	4607      	mov	r7, r0
 80063be:	f2c0 8081 	blt.w	80064c4 <quorem+0x112>
 80063c2:	3c01      	subs	r4, #1
 80063c4:	f101 0814 	add.w	r8, r1, #20
 80063c8:	f100 0514 	add.w	r5, r0, #20
 80063cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063da:	3301      	adds	r3, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ea:	d331      	bcc.n	8006450 <quorem+0x9e>
 80063ec:	f04f 0e00 	mov.w	lr, #0
 80063f0:	4640      	mov	r0, r8
 80063f2:	46ac      	mov	ip, r5
 80063f4:	46f2      	mov	sl, lr
 80063f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80063fa:	b293      	uxth	r3, r2
 80063fc:	fb06 e303 	mla	r3, r6, r3, lr
 8006400:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006404:	b29b      	uxth	r3, r3
 8006406:	ebaa 0303 	sub.w	r3, sl, r3
 800640a:	f8dc a000 	ldr.w	sl, [ip]
 800640e:	0c12      	lsrs	r2, r2, #16
 8006410:	fa13 f38a 	uxtah	r3, r3, sl
 8006414:	fb06 e202 	mla	r2, r6, r2, lr
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006420:	b292      	uxth	r2, r2
 8006422:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006426:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800642a:	f8bd 3000 	ldrh.w	r3, [sp]
 800642e:	4581      	cmp	r9, r0
 8006430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006434:	f84c 3b04 	str.w	r3, [ip], #4
 8006438:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800643c:	d2db      	bcs.n	80063f6 <quorem+0x44>
 800643e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006442:	b92b      	cbnz	r3, 8006450 <quorem+0x9e>
 8006444:	9b01      	ldr	r3, [sp, #4]
 8006446:	3b04      	subs	r3, #4
 8006448:	429d      	cmp	r5, r3
 800644a:	461a      	mov	r2, r3
 800644c:	d32e      	bcc.n	80064ac <quorem+0xfa>
 800644e:	613c      	str	r4, [r7, #16]
 8006450:	4638      	mov	r0, r7
 8006452:	f001 f8c3 	bl	80075dc <__mcmp>
 8006456:	2800      	cmp	r0, #0
 8006458:	db24      	blt.n	80064a4 <quorem+0xf2>
 800645a:	3601      	adds	r6, #1
 800645c:	4628      	mov	r0, r5
 800645e:	f04f 0c00 	mov.w	ip, #0
 8006462:	f858 2b04 	ldr.w	r2, [r8], #4
 8006466:	f8d0 e000 	ldr.w	lr, [r0]
 800646a:	b293      	uxth	r3, r2
 800646c:	ebac 0303 	sub.w	r3, ip, r3
 8006470:	0c12      	lsrs	r2, r2, #16
 8006472:	fa13 f38e 	uxtah	r3, r3, lr
 8006476:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800647a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800647e:	b29b      	uxth	r3, r3
 8006480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006484:	45c1      	cmp	r9, r8
 8006486:	f840 3b04 	str.w	r3, [r0], #4
 800648a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800648e:	d2e8      	bcs.n	8006462 <quorem+0xb0>
 8006490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006494:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006498:	b922      	cbnz	r2, 80064a4 <quorem+0xf2>
 800649a:	3b04      	subs	r3, #4
 800649c:	429d      	cmp	r5, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	d30a      	bcc.n	80064b8 <quorem+0x106>
 80064a2:	613c      	str	r4, [r7, #16]
 80064a4:	4630      	mov	r0, r6
 80064a6:	b003      	add	sp, #12
 80064a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	3b04      	subs	r3, #4
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	d1cc      	bne.n	800644e <quorem+0x9c>
 80064b4:	3c01      	subs	r4, #1
 80064b6:	e7c7      	b.n	8006448 <quorem+0x96>
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	3b04      	subs	r3, #4
 80064bc:	2a00      	cmp	r2, #0
 80064be:	d1f0      	bne.n	80064a2 <quorem+0xf0>
 80064c0:	3c01      	subs	r4, #1
 80064c2:	e7eb      	b.n	800649c <quorem+0xea>
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7ee      	b.n	80064a6 <quorem+0xf4>

080064c8 <_dtoa_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	ed2d 8b04 	vpush	{d8-d9}
 80064d0:	ec57 6b10 	vmov	r6, r7, d0
 80064d4:	b093      	sub	sp, #76	; 0x4c
 80064d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064dc:	9106      	str	r1, [sp, #24]
 80064de:	ee10 aa10 	vmov	sl, s0
 80064e2:	4604      	mov	r4, r0
 80064e4:	9209      	str	r2, [sp, #36]	; 0x24
 80064e6:	930c      	str	r3, [sp, #48]	; 0x30
 80064e8:	46bb      	mov	fp, r7
 80064ea:	b975      	cbnz	r5, 800650a <_dtoa_r+0x42>
 80064ec:	2010      	movs	r0, #16
 80064ee:	f000 fddd 	bl	80070ac <malloc>
 80064f2:	4602      	mov	r2, r0
 80064f4:	6260      	str	r0, [r4, #36]	; 0x24
 80064f6:	b920      	cbnz	r0, 8006502 <_dtoa_r+0x3a>
 80064f8:	4ba7      	ldr	r3, [pc, #668]	; (8006798 <_dtoa_r+0x2d0>)
 80064fa:	21ea      	movs	r1, #234	; 0xea
 80064fc:	48a7      	ldr	r0, [pc, #668]	; (800679c <_dtoa_r+0x2d4>)
 80064fe:	f001 fbd1 	bl	8007ca4 <__assert_func>
 8006502:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006506:	6005      	str	r5, [r0, #0]
 8006508:	60c5      	str	r5, [r0, #12]
 800650a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	b151      	cbz	r1, 8006526 <_dtoa_r+0x5e>
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	604a      	str	r2, [r1, #4]
 8006514:	2301      	movs	r3, #1
 8006516:	4093      	lsls	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fe1c 	bl	8007158 <_Bfree>
 8006520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	1e3b      	subs	r3, r7, #0
 8006528:	bfaa      	itet	ge
 800652a:	2300      	movge	r3, #0
 800652c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006530:	f8c8 3000 	strge.w	r3, [r8]
 8006534:	4b9a      	ldr	r3, [pc, #616]	; (80067a0 <_dtoa_r+0x2d8>)
 8006536:	bfbc      	itt	lt
 8006538:	2201      	movlt	r2, #1
 800653a:	f8c8 2000 	strlt.w	r2, [r8]
 800653e:	ea33 030b 	bics.w	r3, r3, fp
 8006542:	d11b      	bne.n	800657c <_dtoa_r+0xb4>
 8006544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006546:	f242 730f 	movw	r3, #9999	; 0x270f
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006550:	4333      	orrs	r3, r6
 8006552:	f000 8592 	beq.w	800707a <_dtoa_r+0xbb2>
 8006556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006558:	b963      	cbnz	r3, 8006574 <_dtoa_r+0xac>
 800655a:	4b92      	ldr	r3, [pc, #584]	; (80067a4 <_dtoa_r+0x2dc>)
 800655c:	e022      	b.n	80065a4 <_dtoa_r+0xdc>
 800655e:	4b92      	ldr	r3, [pc, #584]	; (80067a8 <_dtoa_r+0x2e0>)
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	3308      	adds	r3, #8
 8006564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	9801      	ldr	r0, [sp, #4]
 800656a:	b013      	add	sp, #76	; 0x4c
 800656c:	ecbd 8b04 	vpop	{d8-d9}
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	4b8b      	ldr	r3, [pc, #556]	; (80067a4 <_dtoa_r+0x2dc>)
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	3303      	adds	r3, #3
 800657a:	e7f3      	b.n	8006564 <_dtoa_r+0x9c>
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	4650      	mov	r0, sl
 8006582:	4659      	mov	r1, fp
 8006584:	f7fa faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006588:	ec4b ab19 	vmov	d9, sl, fp
 800658c:	4680      	mov	r8, r0
 800658e:	b158      	cbz	r0, 80065a8 <_dtoa_r+0xe0>
 8006590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006592:	2301      	movs	r3, #1
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 856b 	beq.w	8007074 <_dtoa_r+0xbac>
 800659e:	4883      	ldr	r0, [pc, #524]	; (80067ac <_dtoa_r+0x2e4>)
 80065a0:	6018      	str	r0, [r3, #0]
 80065a2:	1e43      	subs	r3, r0, #1
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	e7df      	b.n	8006568 <_dtoa_r+0xa0>
 80065a8:	ec4b ab10 	vmov	d0, sl, fp
 80065ac:	aa10      	add	r2, sp, #64	; 0x40
 80065ae:	a911      	add	r1, sp, #68	; 0x44
 80065b0:	4620      	mov	r0, r4
 80065b2:	f001 f8b9 	bl	8007728 <__d2b>
 80065b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065ba:	ee08 0a10 	vmov	s16, r0
 80065be:	2d00      	cmp	r5, #0
 80065c0:	f000 8084 	beq.w	80066cc <_dtoa_r+0x204>
 80065c4:	ee19 3a90 	vmov	r3, s19
 80065c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065d0:	4656      	mov	r6, sl
 80065d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065de:	4b74      	ldr	r3, [pc, #464]	; (80067b0 <_dtoa_r+0x2e8>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7f9 fe57 	bl	8000298 <__aeabi_dsub>
 80065ea:	a365      	add	r3, pc, #404	; (adr r3, 8006780 <_dtoa_r+0x2b8>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7fa f80a 	bl	8000608 <__aeabi_dmul>
 80065f4:	a364      	add	r3, pc, #400	; (adr r3, 8006788 <_dtoa_r+0x2c0>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7f9 fe4f 	bl	800029c <__adddf3>
 80065fe:	4606      	mov	r6, r0
 8006600:	4628      	mov	r0, r5
 8006602:	460f      	mov	r7, r1
 8006604:	f7f9 ff96 	bl	8000534 <__aeabi_i2d>
 8006608:	a361      	add	r3, pc, #388	; (adr r3, 8006790 <_dtoa_r+0x2c8>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fffb 	bl	8000608 <__aeabi_dmul>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7f9 fe3f 	bl	800029c <__adddf3>
 800661e:	4606      	mov	r6, r0
 8006620:	460f      	mov	r7, r1
 8006622:	f7fa faa1 	bl	8000b68 <__aeabi_d2iz>
 8006626:	2200      	movs	r2, #0
 8006628:	9000      	str	r0, [sp, #0]
 800662a:	2300      	movs	r3, #0
 800662c:	4630      	mov	r0, r6
 800662e:	4639      	mov	r1, r7
 8006630:	f7fa fa5c 	bl	8000aec <__aeabi_dcmplt>
 8006634:	b150      	cbz	r0, 800664c <_dtoa_r+0x184>
 8006636:	9800      	ldr	r0, [sp, #0]
 8006638:	f7f9 ff7c 	bl	8000534 <__aeabi_i2d>
 800663c:	4632      	mov	r2, r6
 800663e:	463b      	mov	r3, r7
 8006640:	f7fa fa4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006644:	b910      	cbnz	r0, 800664c <_dtoa_r+0x184>
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	3b01      	subs	r3, #1
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	9b00      	ldr	r3, [sp, #0]
 800664e:	2b16      	cmp	r3, #22
 8006650:	d85a      	bhi.n	8006708 <_dtoa_r+0x240>
 8006652:	9a00      	ldr	r2, [sp, #0]
 8006654:	4b57      	ldr	r3, [pc, #348]	; (80067b4 <_dtoa_r+0x2ec>)
 8006656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	ec51 0b19 	vmov	r0, r1, d9
 8006662:	f7fa fa43 	bl	8000aec <__aeabi_dcmplt>
 8006666:	2800      	cmp	r0, #0
 8006668:	d050      	beq.n	800670c <_dtoa_r+0x244>
 800666a:	9b00      	ldr	r3, [sp, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2300      	movs	r3, #0
 8006672:	930b      	str	r3, [sp, #44]	; 0x2c
 8006674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006676:	1b5d      	subs	r5, r3, r5
 8006678:	1e6b      	subs	r3, r5, #1
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	bf45      	ittet	mi
 800667e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006682:	9304      	strmi	r3, [sp, #16]
 8006684:	2300      	movpl	r3, #0
 8006686:	2300      	movmi	r3, #0
 8006688:	bf4c      	ite	mi
 800668a:	9305      	strmi	r3, [sp, #20]
 800668c:	9304      	strpl	r3, [sp, #16]
 800668e:	9b00      	ldr	r3, [sp, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	db3d      	blt.n	8006710 <_dtoa_r+0x248>
 8006694:	9b05      	ldr	r3, [sp, #20]
 8006696:	9a00      	ldr	r2, [sp, #0]
 8006698:	920a      	str	r2, [sp, #40]	; 0x28
 800669a:	4413      	add	r3, r2
 800669c:	9305      	str	r3, [sp, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	9307      	str	r3, [sp, #28]
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	2b09      	cmp	r3, #9
 80066a6:	f200 8089 	bhi.w	80067bc <_dtoa_r+0x2f4>
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	bfc4      	itt	gt
 80066ae:	3b04      	subgt	r3, #4
 80066b0:	9306      	strgt	r3, [sp, #24]
 80066b2:	9b06      	ldr	r3, [sp, #24]
 80066b4:	f1a3 0302 	sub.w	r3, r3, #2
 80066b8:	bfcc      	ite	gt
 80066ba:	2500      	movgt	r5, #0
 80066bc:	2501      	movle	r5, #1
 80066be:	2b03      	cmp	r3, #3
 80066c0:	f200 8087 	bhi.w	80067d2 <_dtoa_r+0x30a>
 80066c4:	e8df f003 	tbb	[pc, r3]
 80066c8:	59383a2d 	.word	0x59383a2d
 80066cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066d0:	441d      	add	r5, r3
 80066d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	bfc1      	itttt	gt
 80066da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066ea:	bfda      	itte	le
 80066ec:	f1c3 0320 	rsble	r3, r3, #32
 80066f0:	fa06 f003 	lslle.w	r0, r6, r3
 80066f4:	4318      	orrgt	r0, r3
 80066f6:	f7f9 ff0d 	bl	8000514 <__aeabi_ui2d>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4606      	mov	r6, r0
 80066fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006702:	3d01      	subs	r5, #1
 8006704:	930e      	str	r3, [sp, #56]	; 0x38
 8006706:	e76a      	b.n	80065de <_dtoa_r+0x116>
 8006708:	2301      	movs	r3, #1
 800670a:	e7b2      	b.n	8006672 <_dtoa_r+0x1aa>
 800670c:	900b      	str	r0, [sp, #44]	; 0x2c
 800670e:	e7b1      	b.n	8006674 <_dtoa_r+0x1ac>
 8006710:	9b04      	ldr	r3, [sp, #16]
 8006712:	9a00      	ldr	r2, [sp, #0]
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	4253      	negs	r3, r2
 800671a:	9307      	str	r3, [sp, #28]
 800671c:	2300      	movs	r3, #0
 800671e:	930a      	str	r3, [sp, #40]	; 0x28
 8006720:	e7bf      	b.n	80066a2 <_dtoa_r+0x1da>
 8006722:	2300      	movs	r3, #0
 8006724:	9308      	str	r3, [sp, #32]
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	dc55      	bgt.n	80067d8 <_dtoa_r+0x310>
 800672c:	2301      	movs	r3, #1
 800672e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006732:	461a      	mov	r2, r3
 8006734:	9209      	str	r2, [sp, #36]	; 0x24
 8006736:	e00c      	b.n	8006752 <_dtoa_r+0x28a>
 8006738:	2301      	movs	r3, #1
 800673a:	e7f3      	b.n	8006724 <_dtoa_r+0x25c>
 800673c:	2300      	movs	r3, #0
 800673e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006740:	9308      	str	r3, [sp, #32]
 8006742:	9b00      	ldr	r3, [sp, #0]
 8006744:	4413      	add	r3, r2
 8006746:	9302      	str	r3, [sp, #8]
 8006748:	3301      	adds	r3, #1
 800674a:	2b01      	cmp	r3, #1
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	bfb8      	it	lt
 8006750:	2301      	movlt	r3, #1
 8006752:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006754:	2200      	movs	r2, #0
 8006756:	6042      	str	r2, [r0, #4]
 8006758:	2204      	movs	r2, #4
 800675a:	f102 0614 	add.w	r6, r2, #20
 800675e:	429e      	cmp	r6, r3
 8006760:	6841      	ldr	r1, [r0, #4]
 8006762:	d93d      	bls.n	80067e0 <_dtoa_r+0x318>
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fcb7 	bl	80070d8 <_Balloc>
 800676a:	9001      	str	r0, [sp, #4]
 800676c:	2800      	cmp	r0, #0
 800676e:	d13b      	bne.n	80067e8 <_dtoa_r+0x320>
 8006770:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <_dtoa_r+0x2f0>)
 8006772:	4602      	mov	r2, r0
 8006774:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006778:	e6c0      	b.n	80064fc <_dtoa_r+0x34>
 800677a:	2301      	movs	r3, #1
 800677c:	e7df      	b.n	800673e <_dtoa_r+0x276>
 800677e:	bf00      	nop
 8006780:	636f4361 	.word	0x636f4361
 8006784:	3fd287a7 	.word	0x3fd287a7
 8006788:	8b60c8b3 	.word	0x8b60c8b3
 800678c:	3fc68a28 	.word	0x3fc68a28
 8006790:	509f79fb 	.word	0x509f79fb
 8006794:	3fd34413 	.word	0x3fd34413
 8006798:	08008969 	.word	0x08008969
 800679c:	08008980 	.word	0x08008980
 80067a0:	7ff00000 	.word	0x7ff00000
 80067a4:	08008965 	.word	0x08008965
 80067a8:	0800895c 	.word	0x0800895c
 80067ac:	08008939 	.word	0x08008939
 80067b0:	3ff80000 	.word	0x3ff80000
 80067b4:	08008a70 	.word	0x08008a70
 80067b8:	080089db 	.word	0x080089db
 80067bc:	2501      	movs	r5, #1
 80067be:	2300      	movs	r3, #0
 80067c0:	9306      	str	r3, [sp, #24]
 80067c2:	9508      	str	r5, [sp, #32]
 80067c4:	f04f 33ff 	mov.w	r3, #4294967295
 80067c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2312      	movs	r3, #18
 80067d0:	e7b0      	b.n	8006734 <_dtoa_r+0x26c>
 80067d2:	2301      	movs	r3, #1
 80067d4:	9308      	str	r3, [sp, #32]
 80067d6:	e7f5      	b.n	80067c4 <_dtoa_r+0x2fc>
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067de:	e7b8      	b.n	8006752 <_dtoa_r+0x28a>
 80067e0:	3101      	adds	r1, #1
 80067e2:	6041      	str	r1, [r0, #4]
 80067e4:	0052      	lsls	r2, r2, #1
 80067e6:	e7b8      	b.n	800675a <_dtoa_r+0x292>
 80067e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ea:	9a01      	ldr	r2, [sp, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	2b0e      	cmp	r3, #14
 80067f2:	f200 809d 	bhi.w	8006930 <_dtoa_r+0x468>
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	f000 809a 	beq.w	8006930 <_dtoa_r+0x468>
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dd32      	ble.n	8006868 <_dtoa_r+0x3a0>
 8006802:	4ab7      	ldr	r2, [pc, #732]	; (8006ae0 <_dtoa_r+0x618>)
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800680c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006810:	9b00      	ldr	r3, [sp, #0]
 8006812:	05d8      	lsls	r0, r3, #23
 8006814:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006818:	d516      	bpl.n	8006848 <_dtoa_r+0x380>
 800681a:	4bb2      	ldr	r3, [pc, #712]	; (8006ae4 <_dtoa_r+0x61c>)
 800681c:	ec51 0b19 	vmov	r0, r1, d9
 8006820:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006824:	f7fa f81a 	bl	800085c <__aeabi_ddiv>
 8006828:	f007 070f 	and.w	r7, r7, #15
 800682c:	4682      	mov	sl, r0
 800682e:	468b      	mov	fp, r1
 8006830:	2503      	movs	r5, #3
 8006832:	4eac      	ldr	r6, [pc, #688]	; (8006ae4 <_dtoa_r+0x61c>)
 8006834:	b957      	cbnz	r7, 800684c <_dtoa_r+0x384>
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	4650      	mov	r0, sl
 800683c:	4659      	mov	r1, fp
 800683e:	f7fa f80d 	bl	800085c <__aeabi_ddiv>
 8006842:	4682      	mov	sl, r0
 8006844:	468b      	mov	fp, r1
 8006846:	e028      	b.n	800689a <_dtoa_r+0x3d2>
 8006848:	2502      	movs	r5, #2
 800684a:	e7f2      	b.n	8006832 <_dtoa_r+0x36a>
 800684c:	07f9      	lsls	r1, r7, #31
 800684e:	d508      	bpl.n	8006862 <_dtoa_r+0x39a>
 8006850:	4640      	mov	r0, r8
 8006852:	4649      	mov	r1, r9
 8006854:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006858:	f7f9 fed6 	bl	8000608 <__aeabi_dmul>
 800685c:	3501      	adds	r5, #1
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	107f      	asrs	r7, r7, #1
 8006864:	3608      	adds	r6, #8
 8006866:	e7e5      	b.n	8006834 <_dtoa_r+0x36c>
 8006868:	f000 809b 	beq.w	80069a2 <_dtoa_r+0x4da>
 800686c:	9b00      	ldr	r3, [sp, #0]
 800686e:	4f9d      	ldr	r7, [pc, #628]	; (8006ae4 <_dtoa_r+0x61c>)
 8006870:	425e      	negs	r6, r3
 8006872:	4b9b      	ldr	r3, [pc, #620]	; (8006ae0 <_dtoa_r+0x618>)
 8006874:	f006 020f 	and.w	r2, r6, #15
 8006878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	ec51 0b19 	vmov	r0, r1, d9
 8006884:	f7f9 fec0 	bl	8000608 <__aeabi_dmul>
 8006888:	1136      	asrs	r6, r6, #4
 800688a:	4682      	mov	sl, r0
 800688c:	468b      	mov	fp, r1
 800688e:	2300      	movs	r3, #0
 8006890:	2502      	movs	r5, #2
 8006892:	2e00      	cmp	r6, #0
 8006894:	d17a      	bne.n	800698c <_dtoa_r+0x4c4>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1d3      	bne.n	8006842 <_dtoa_r+0x37a>
 800689a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8082 	beq.w	80069a6 <_dtoa_r+0x4de>
 80068a2:	4b91      	ldr	r3, [pc, #580]	; (8006ae8 <_dtoa_r+0x620>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	4650      	mov	r0, sl
 80068a8:	4659      	mov	r1, fp
 80068aa:	f7fa f91f 	bl	8000aec <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d079      	beq.n	80069a6 <_dtoa_r+0x4de>
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d076      	beq.n	80069a6 <_dtoa_r+0x4de>
 80068b8:	9b02      	ldr	r3, [sp, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd36      	ble.n	800692c <_dtoa_r+0x464>
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	1e5f      	subs	r7, r3, #1
 80068c6:	2200      	movs	r2, #0
 80068c8:	4b88      	ldr	r3, [pc, #544]	; (8006aec <_dtoa_r+0x624>)
 80068ca:	f7f9 fe9d 	bl	8000608 <__aeabi_dmul>
 80068ce:	9e02      	ldr	r6, [sp, #8]
 80068d0:	4682      	mov	sl, r0
 80068d2:	468b      	mov	fp, r1
 80068d4:	3501      	adds	r5, #1
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7f9 fe2c 	bl	8000534 <__aeabi_i2d>
 80068dc:	4652      	mov	r2, sl
 80068de:	465b      	mov	r3, fp
 80068e0:	f7f9 fe92 	bl	8000608 <__aeabi_dmul>
 80068e4:	4b82      	ldr	r3, [pc, #520]	; (8006af0 <_dtoa_r+0x628>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	f7f9 fcd8 	bl	800029c <__adddf3>
 80068ec:	46d0      	mov	r8, sl
 80068ee:	46d9      	mov	r9, fp
 80068f0:	4682      	mov	sl, r0
 80068f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	d158      	bne.n	80069ac <_dtoa_r+0x4e4>
 80068fa:	4b7e      	ldr	r3, [pc, #504]	; (8006af4 <_dtoa_r+0x62c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7f9 fcc9 	bl	8000298 <__aeabi_dsub>
 8006906:	4652      	mov	r2, sl
 8006908:	465b      	mov	r3, fp
 800690a:	4680      	mov	r8, r0
 800690c:	4689      	mov	r9, r1
 800690e:	f7fa f90b 	bl	8000b28 <__aeabi_dcmpgt>
 8006912:	2800      	cmp	r0, #0
 8006914:	f040 8295 	bne.w	8006e42 <_dtoa_r+0x97a>
 8006918:	4652      	mov	r2, sl
 800691a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800691e:	4640      	mov	r0, r8
 8006920:	4649      	mov	r1, r9
 8006922:	f7fa f8e3 	bl	8000aec <__aeabi_dcmplt>
 8006926:	2800      	cmp	r0, #0
 8006928:	f040 8289 	bne.w	8006e3e <_dtoa_r+0x976>
 800692c:	ec5b ab19 	vmov	sl, fp, d9
 8006930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006932:	2b00      	cmp	r3, #0
 8006934:	f2c0 8148 	blt.w	8006bc8 <_dtoa_r+0x700>
 8006938:	9a00      	ldr	r2, [sp, #0]
 800693a:	2a0e      	cmp	r2, #14
 800693c:	f300 8144 	bgt.w	8006bc8 <_dtoa_r+0x700>
 8006940:	4b67      	ldr	r3, [pc, #412]	; (8006ae0 <_dtoa_r+0x618>)
 8006942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006946:	e9d3 8900 	ldrd	r8, r9, [r3]
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	f280 80d5 	bge.w	8006afc <_dtoa_r+0x634>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f300 80d1 	bgt.w	8006afc <_dtoa_r+0x634>
 800695a:	f040 826f 	bne.w	8006e3c <_dtoa_r+0x974>
 800695e:	4b65      	ldr	r3, [pc, #404]	; (8006af4 <_dtoa_r+0x62c>)
 8006960:	2200      	movs	r2, #0
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	f7f9 fe4f 	bl	8000608 <__aeabi_dmul>
 800696a:	4652      	mov	r2, sl
 800696c:	465b      	mov	r3, fp
 800696e:	f7fa f8d1 	bl	8000b14 <__aeabi_dcmpge>
 8006972:	9e03      	ldr	r6, [sp, #12]
 8006974:	4637      	mov	r7, r6
 8006976:	2800      	cmp	r0, #0
 8006978:	f040 8245 	bne.w	8006e06 <_dtoa_r+0x93e>
 800697c:	9d01      	ldr	r5, [sp, #4]
 800697e:	2331      	movs	r3, #49	; 0x31
 8006980:	f805 3b01 	strb.w	r3, [r5], #1
 8006984:	9b00      	ldr	r3, [sp, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	e240      	b.n	8006e0e <_dtoa_r+0x946>
 800698c:	07f2      	lsls	r2, r6, #31
 800698e:	d505      	bpl.n	800699c <_dtoa_r+0x4d4>
 8006990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006994:	f7f9 fe38 	bl	8000608 <__aeabi_dmul>
 8006998:	3501      	adds	r5, #1
 800699a:	2301      	movs	r3, #1
 800699c:	1076      	asrs	r6, r6, #1
 800699e:	3708      	adds	r7, #8
 80069a0:	e777      	b.n	8006892 <_dtoa_r+0x3ca>
 80069a2:	2502      	movs	r5, #2
 80069a4:	e779      	b.n	800689a <_dtoa_r+0x3d2>
 80069a6:	9f00      	ldr	r7, [sp, #0]
 80069a8:	9e03      	ldr	r6, [sp, #12]
 80069aa:	e794      	b.n	80068d6 <_dtoa_r+0x40e>
 80069ac:	9901      	ldr	r1, [sp, #4]
 80069ae:	4b4c      	ldr	r3, [pc, #304]	; (8006ae0 <_dtoa_r+0x618>)
 80069b0:	4431      	add	r1, r6
 80069b2:	910d      	str	r1, [sp, #52]	; 0x34
 80069b4:	9908      	ldr	r1, [sp, #32]
 80069b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069be:	2900      	cmp	r1, #0
 80069c0:	d043      	beq.n	8006a4a <_dtoa_r+0x582>
 80069c2:	494d      	ldr	r1, [pc, #308]	; (8006af8 <_dtoa_r+0x630>)
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7f9 ff49 	bl	800085c <__aeabi_ddiv>
 80069ca:	4652      	mov	r2, sl
 80069cc:	465b      	mov	r3, fp
 80069ce:	f7f9 fc63 	bl	8000298 <__aeabi_dsub>
 80069d2:	9d01      	ldr	r5, [sp, #4]
 80069d4:	4682      	mov	sl, r0
 80069d6:	468b      	mov	fp, r1
 80069d8:	4649      	mov	r1, r9
 80069da:	4640      	mov	r0, r8
 80069dc:	f7fa f8c4 	bl	8000b68 <__aeabi_d2iz>
 80069e0:	4606      	mov	r6, r0
 80069e2:	f7f9 fda7 	bl	8000534 <__aeabi_i2d>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fc53 	bl	8000298 <__aeabi_dsub>
 80069f2:	3630      	adds	r6, #48	; 0x30
 80069f4:	f805 6b01 	strb.w	r6, [r5], #1
 80069f8:	4652      	mov	r2, sl
 80069fa:	465b      	mov	r3, fp
 80069fc:	4680      	mov	r8, r0
 80069fe:	4689      	mov	r9, r1
 8006a00:	f7fa f874 	bl	8000aec <__aeabi_dcmplt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d163      	bne.n	8006ad0 <_dtoa_r+0x608>
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	4936      	ldr	r1, [pc, #216]	; (8006ae8 <_dtoa_r+0x620>)
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f7f9 fc42 	bl	8000298 <__aeabi_dsub>
 8006a14:	4652      	mov	r2, sl
 8006a16:	465b      	mov	r3, fp
 8006a18:	f7fa f868 	bl	8000aec <__aeabi_dcmplt>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f040 80b5 	bne.w	8006b8c <_dtoa_r+0x6c4>
 8006a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a24:	429d      	cmp	r5, r3
 8006a26:	d081      	beq.n	800692c <_dtoa_r+0x464>
 8006a28:	4b30      	ldr	r3, [pc, #192]	; (8006aec <_dtoa_r+0x624>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	4659      	mov	r1, fp
 8006a30:	f7f9 fdea 	bl	8000608 <__aeabi_dmul>
 8006a34:	4b2d      	ldr	r3, [pc, #180]	; (8006aec <_dtoa_r+0x624>)
 8006a36:	4682      	mov	sl, r0
 8006a38:	468b      	mov	fp, r1
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f7f9 fde2 	bl	8000608 <__aeabi_dmul>
 8006a44:	4680      	mov	r8, r0
 8006a46:	4689      	mov	r9, r1
 8006a48:	e7c6      	b.n	80069d8 <_dtoa_r+0x510>
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	f7f9 fddb 	bl	8000608 <__aeabi_dmul>
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	9d01      	ldr	r5, [sp, #4]
 8006a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a58:	4682      	mov	sl, r0
 8006a5a:	468b      	mov	fp, r1
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f7fa f882 	bl	8000b68 <__aeabi_d2iz>
 8006a64:	4606      	mov	r6, r0
 8006a66:	f7f9 fd65 	bl	8000534 <__aeabi_i2d>
 8006a6a:	3630      	adds	r6, #48	; 0x30
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4640      	mov	r0, r8
 8006a72:	4649      	mov	r1, r9
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	f805 6b01 	strb.w	r6, [r5], #1
 8006a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	4680      	mov	r8, r0
 8006a82:	4689      	mov	r9, r1
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	d124      	bne.n	8006ad4 <_dtoa_r+0x60c>
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <_dtoa_r+0x630>)
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	4659      	mov	r1, fp
 8006a90:	f7f9 fc04 	bl	800029c <__adddf3>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	f7fa f844 	bl	8000b28 <__aeabi_dcmpgt>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d173      	bne.n	8006b8c <_dtoa_r+0x6c4>
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	465b      	mov	r3, fp
 8006aa8:	4913      	ldr	r1, [pc, #76]	; (8006af8 <_dtoa_r+0x630>)
 8006aaa:	2000      	movs	r0, #0
 8006aac:	f7f9 fbf4 	bl	8000298 <__aeabi_dsub>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7fa f818 	bl	8000aec <__aeabi_dcmplt>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f43f af35 	beq.w	800692c <_dtoa_r+0x464>
 8006ac2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ac4:	1e6b      	subs	r3, r5, #1
 8006ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ac8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006acc:	2b30      	cmp	r3, #48	; 0x30
 8006ace:	d0f8      	beq.n	8006ac2 <_dtoa_r+0x5fa>
 8006ad0:	9700      	str	r7, [sp, #0]
 8006ad2:	e049      	b.n	8006b68 <_dtoa_r+0x6a0>
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <_dtoa_r+0x624>)
 8006ad6:	f7f9 fd97 	bl	8000608 <__aeabi_dmul>
 8006ada:	4680      	mov	r8, r0
 8006adc:	4689      	mov	r9, r1
 8006ade:	e7bd      	b.n	8006a5c <_dtoa_r+0x594>
 8006ae0:	08008a70 	.word	0x08008a70
 8006ae4:	08008a48 	.word	0x08008a48
 8006ae8:	3ff00000 	.word	0x3ff00000
 8006aec:	40240000 	.word	0x40240000
 8006af0:	401c0000 	.word	0x401c0000
 8006af4:	40140000 	.word	0x40140000
 8006af8:	3fe00000 	.word	0x3fe00000
 8006afc:	9d01      	ldr	r5, [sp, #4]
 8006afe:	4656      	mov	r6, sl
 8006b00:	465f      	mov	r7, fp
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	4630      	mov	r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	f7f9 fea7 	bl	800085c <__aeabi_ddiv>
 8006b0e:	f7fa f82b 	bl	8000b68 <__aeabi_d2iz>
 8006b12:	4682      	mov	sl, r0
 8006b14:	f7f9 fd0e 	bl	8000534 <__aeabi_i2d>
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	f7f9 fd74 	bl	8000608 <__aeabi_dmul>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4630      	mov	r0, r6
 8006b26:	4639      	mov	r1, r7
 8006b28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b2c:	f7f9 fbb4 	bl	8000298 <__aeabi_dsub>
 8006b30:	f805 6b01 	strb.w	r6, [r5], #1
 8006b34:	9e01      	ldr	r6, [sp, #4]
 8006b36:	9f03      	ldr	r7, [sp, #12]
 8006b38:	1bae      	subs	r6, r5, r6
 8006b3a:	42b7      	cmp	r7, r6
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	d135      	bne.n	8006bae <_dtoa_r+0x6e6>
 8006b42:	f7f9 fbab 	bl	800029c <__adddf3>
 8006b46:	4642      	mov	r2, r8
 8006b48:	464b      	mov	r3, r9
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	f7f9 ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 8006b52:	b9d0      	cbnz	r0, 8006b8a <_dtoa_r+0x6c2>
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 ffbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b60:	b110      	cbz	r0, 8006b68 <_dtoa_r+0x6a0>
 8006b62:	f01a 0f01 	tst.w	sl, #1
 8006b66:	d110      	bne.n	8006b8a <_dtoa_r+0x6c2>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	ee18 1a10 	vmov	r1, s16
 8006b6e:	f000 faf3 	bl	8007158 <_Bfree>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9800      	ldr	r0, [sp, #0]
 8006b76:	702b      	strb	r3, [r5, #0]
 8006b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	6018      	str	r0, [r3, #0]
 8006b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f43f acf1 	beq.w	8006568 <_dtoa_r+0xa0>
 8006b86:	601d      	str	r5, [r3, #0]
 8006b88:	e4ee      	b.n	8006568 <_dtoa_r+0xa0>
 8006b8a:	9f00      	ldr	r7, [sp, #0]
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	461d      	mov	r5, r3
 8006b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b94:	2a39      	cmp	r2, #57	; 0x39
 8006b96:	d106      	bne.n	8006ba6 <_dtoa_r+0x6de>
 8006b98:	9a01      	ldr	r2, [sp, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d1f7      	bne.n	8006b8e <_dtoa_r+0x6c6>
 8006b9e:	9901      	ldr	r1, [sp, #4]
 8006ba0:	2230      	movs	r2, #48	; 0x30
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	700a      	strb	r2, [r1, #0]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	3201      	adds	r2, #1
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e790      	b.n	8006ad0 <_dtoa_r+0x608>
 8006bae:	4ba6      	ldr	r3, [pc, #664]	; (8006e48 <_dtoa_r+0x980>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f7f9 fd29 	bl	8000608 <__aeabi_dmul>
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	f7f9 ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d09d      	beq.n	8006b02 <_dtoa_r+0x63a>
 8006bc6:	e7cf      	b.n	8006b68 <_dtoa_r+0x6a0>
 8006bc8:	9a08      	ldr	r2, [sp, #32]
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	f000 80d7 	beq.w	8006d7e <_dtoa_r+0x8b6>
 8006bd0:	9a06      	ldr	r2, [sp, #24]
 8006bd2:	2a01      	cmp	r2, #1
 8006bd4:	f300 80ba 	bgt.w	8006d4c <_dtoa_r+0x884>
 8006bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	f000 80b2 	beq.w	8006d44 <_dtoa_r+0x87c>
 8006be0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006be4:	9e07      	ldr	r6, [sp, #28]
 8006be6:	9d04      	ldr	r5, [sp, #16]
 8006be8:	9a04      	ldr	r2, [sp, #16]
 8006bea:	441a      	add	r2, r3
 8006bec:	9204      	str	r2, [sp, #16]
 8006bee:	9a05      	ldr	r2, [sp, #20]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	441a      	add	r2, r3
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	9205      	str	r2, [sp, #20]
 8006bf8:	f000 fb66 	bl	80072c8 <__i2b>
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	dd0c      	ble.n	8006c1c <_dtoa_r+0x754>
 8006c02:	9b05      	ldr	r3, [sp, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd09      	ble.n	8006c1c <_dtoa_r+0x754>
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	9a04      	ldr	r2, [sp, #16]
 8006c0c:	bfa8      	it	ge
 8006c0e:	462b      	movge	r3, r5
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	9204      	str	r2, [sp, #16]
 8006c14:	9a05      	ldr	r2, [sp, #20]
 8006c16:	1aed      	subs	r5, r5, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	9305      	str	r3, [sp, #20]
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	b31b      	cbz	r3, 8006c68 <_dtoa_r+0x7a0>
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80af 	beq.w	8006d86 <_dtoa_r+0x8be>
 8006c28:	2e00      	cmp	r6, #0
 8006c2a:	dd13      	ble.n	8006c54 <_dtoa_r+0x78c>
 8006c2c:	4639      	mov	r1, r7
 8006c2e:	4632      	mov	r2, r6
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fc09 	bl	8007448 <__pow5mult>
 8006c36:	ee18 2a10 	vmov	r2, s16
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fb58 	bl	80072f4 <__multiply>
 8006c44:	ee18 1a10 	vmov	r1, s16
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fa84 	bl	8007158 <_Bfree>
 8006c50:	ee08 8a10 	vmov	s16, r8
 8006c54:	9b07      	ldr	r3, [sp, #28]
 8006c56:	1b9a      	subs	r2, r3, r6
 8006c58:	d006      	beq.n	8006c68 <_dtoa_r+0x7a0>
 8006c5a:	ee18 1a10 	vmov	r1, s16
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fbf2 	bl	8007448 <__pow5mult>
 8006c64:	ee08 0a10 	vmov	s16, r0
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fb2c 	bl	80072c8 <__i2b>
 8006c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	4606      	mov	r6, r0
 8006c76:	f340 8088 	ble.w	8006d8a <_dtoa_r+0x8c2>
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 fbe2 	bl	8007448 <__pow5mult>
 8006c84:	9b06      	ldr	r3, [sp, #24]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	4606      	mov	r6, r0
 8006c8a:	f340 8081 	ble.w	8006d90 <_dtoa_r+0x8c8>
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	6933      	ldr	r3, [r6, #16]
 8006c94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c98:	6918      	ldr	r0, [r3, #16]
 8006c9a:	f000 fac5 	bl	8007228 <__hi0bits>
 8006c9e:	f1c0 0020 	rsb	r0, r0, #32
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	4418      	add	r0, r3
 8006ca6:	f010 001f 	ands.w	r0, r0, #31
 8006caa:	f000 8092 	beq.w	8006dd2 <_dtoa_r+0x90a>
 8006cae:	f1c0 0320 	rsb	r3, r0, #32
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	f340 808a 	ble.w	8006dcc <_dtoa_r+0x904>
 8006cb8:	f1c0 001c 	rsb	r0, r0, #28
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	4403      	add	r3, r0
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	9b05      	ldr	r3, [sp, #20]
 8006cc4:	4403      	add	r3, r0
 8006cc6:	4405      	add	r5, r0
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd07      	ble.n	8006ce0 <_dtoa_r+0x818>
 8006cd0:	ee18 1a10 	vmov	r1, s16
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f000 fc10 	bl	80074fc <__lshift>
 8006cdc:	ee08 0a10 	vmov	s16, r0
 8006ce0:	9b05      	ldr	r3, [sp, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x82a>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 fc06 	bl	80074fc <__lshift>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d06e      	beq.n	8006dd6 <_dtoa_r+0x90e>
 8006cf8:	ee18 0a10 	vmov	r0, s16
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	f000 fc6d 	bl	80075dc <__mcmp>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	da67      	bge.n	8006dd6 <_dtoa_r+0x90e>
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	ee18 1a10 	vmov	r1, s16
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	220a      	movs	r2, #10
 8006d12:	2300      	movs	r3, #0
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fa41 	bl	800719c <__multadd>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	ee08 0a10 	vmov	s16, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 81b1 	beq.w	8007088 <_dtoa_r+0xbc0>
 8006d26:	2300      	movs	r3, #0
 8006d28:	4639      	mov	r1, r7
 8006d2a:	220a      	movs	r2, #10
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 fa35 	bl	800719c <__multadd>
 8006d32:	9b02      	ldr	r3, [sp, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	4607      	mov	r7, r0
 8006d38:	f300 808e 	bgt.w	8006e58 <_dtoa_r+0x990>
 8006d3c:	9b06      	ldr	r3, [sp, #24]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	dc51      	bgt.n	8006de6 <_dtoa_r+0x91e>
 8006d42:	e089      	b.n	8006e58 <_dtoa_r+0x990>
 8006d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d4a:	e74b      	b.n	8006be4 <_dtoa_r+0x71c>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	1e5e      	subs	r6, r3, #1
 8006d50:	9b07      	ldr	r3, [sp, #28]
 8006d52:	42b3      	cmp	r3, r6
 8006d54:	bfbf      	itttt	lt
 8006d56:	9b07      	ldrlt	r3, [sp, #28]
 8006d58:	9607      	strlt	r6, [sp, #28]
 8006d5a:	1af2      	sublt	r2, r6, r3
 8006d5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d5e:	bfb6      	itet	lt
 8006d60:	189b      	addlt	r3, r3, r2
 8006d62:	1b9e      	subge	r6, r3, r6
 8006d64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	bfb8      	it	lt
 8006d6a:	2600      	movlt	r6, #0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bfb7      	itett	lt
 8006d70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d78:	1a9d      	sublt	r5, r3, r2
 8006d7a:	2300      	movlt	r3, #0
 8006d7c:	e734      	b.n	8006be8 <_dtoa_r+0x720>
 8006d7e:	9e07      	ldr	r6, [sp, #28]
 8006d80:	9d04      	ldr	r5, [sp, #16]
 8006d82:	9f08      	ldr	r7, [sp, #32]
 8006d84:	e73b      	b.n	8006bfe <_dtoa_r+0x736>
 8006d86:	9a07      	ldr	r2, [sp, #28]
 8006d88:	e767      	b.n	8006c5a <_dtoa_r+0x792>
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	dc18      	bgt.n	8006dc2 <_dtoa_r+0x8fa>
 8006d90:	f1ba 0f00 	cmp.w	sl, #0
 8006d94:	d115      	bne.n	8006dc2 <_dtoa_r+0x8fa>
 8006d96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d9a:	b993      	cbnz	r3, 8006dc2 <_dtoa_r+0x8fa>
 8006d9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	051b      	lsls	r3, r3, #20
 8006da4:	b183      	cbz	r3, 8006dc8 <_dtoa_r+0x900>
 8006da6:	9b04      	ldr	r3, [sp, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	3301      	adds	r3, #1
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	f04f 0801 	mov.w	r8, #1
 8006db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f af6a 	bne.w	8006c92 <_dtoa_r+0x7ca>
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	e76f      	b.n	8006ca2 <_dtoa_r+0x7da>
 8006dc2:	f04f 0800 	mov.w	r8, #0
 8006dc6:	e7f6      	b.n	8006db6 <_dtoa_r+0x8ee>
 8006dc8:	4698      	mov	r8, r3
 8006dca:	e7f4      	b.n	8006db6 <_dtoa_r+0x8ee>
 8006dcc:	f43f af7d 	beq.w	8006cca <_dtoa_r+0x802>
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	301c      	adds	r0, #28
 8006dd4:	e772      	b.n	8006cbc <_dtoa_r+0x7f4>
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc37      	bgt.n	8006e4c <_dtoa_r+0x984>
 8006ddc:	9b06      	ldr	r3, [sp, #24]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	dd34      	ble.n	8006e4c <_dtoa_r+0x984>
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	9302      	str	r3, [sp, #8]
 8006de6:	9b02      	ldr	r3, [sp, #8]
 8006de8:	b96b      	cbnz	r3, 8006e06 <_dtoa_r+0x93e>
 8006dea:	4631      	mov	r1, r6
 8006dec:	2205      	movs	r2, #5
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f9d4 	bl	800719c <__multadd>
 8006df4:	4601      	mov	r1, r0
 8006df6:	4606      	mov	r6, r0
 8006df8:	ee18 0a10 	vmov	r0, s16
 8006dfc:	f000 fbee 	bl	80075dc <__mcmp>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	f73f adbb 	bgt.w	800697c <_dtoa_r+0x4b4>
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	9d01      	ldr	r5, [sp, #4]
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	4631      	mov	r1, r6
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f99f 	bl	8007158 <_Bfree>
 8006e1a:	2f00      	cmp	r7, #0
 8006e1c:	f43f aea4 	beq.w	8006b68 <_dtoa_r+0x6a0>
 8006e20:	f1b8 0f00 	cmp.w	r8, #0
 8006e24:	d005      	beq.n	8006e32 <_dtoa_r+0x96a>
 8006e26:	45b8      	cmp	r8, r7
 8006e28:	d003      	beq.n	8006e32 <_dtoa_r+0x96a>
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f993 	bl	8007158 <_Bfree>
 8006e32:	4639      	mov	r1, r7
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 f98f 	bl	8007158 <_Bfree>
 8006e3a:	e695      	b.n	8006b68 <_dtoa_r+0x6a0>
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	4637      	mov	r7, r6
 8006e40:	e7e1      	b.n	8006e06 <_dtoa_r+0x93e>
 8006e42:	9700      	str	r7, [sp, #0]
 8006e44:	4637      	mov	r7, r6
 8006e46:	e599      	b.n	800697c <_dtoa_r+0x4b4>
 8006e48:	40240000 	.word	0x40240000
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80ca 	beq.w	8006fe8 <_dtoa_r+0xb20>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	9302      	str	r3, [sp, #8]
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	dd05      	ble.n	8006e68 <_dtoa_r+0x9a0>
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	462a      	mov	r2, r5
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fb4b 	bl	80074fc <__lshift>
 8006e66:	4607      	mov	r7, r0
 8006e68:	f1b8 0f00 	cmp.w	r8, #0
 8006e6c:	d05b      	beq.n	8006f26 <_dtoa_r+0xa5e>
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 f931 	bl	80070d8 <_Balloc>
 8006e76:	4605      	mov	r5, r0
 8006e78:	b928      	cbnz	r0, 8006e86 <_dtoa_r+0x9be>
 8006e7a:	4b87      	ldr	r3, [pc, #540]	; (8007098 <_dtoa_r+0xbd0>)
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e82:	f7ff bb3b 	b.w	80064fc <_dtoa_r+0x34>
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	3202      	adds	r2, #2
 8006e8a:	0092      	lsls	r2, r2, #2
 8006e8c:	f107 010c 	add.w	r1, r7, #12
 8006e90:	300c      	adds	r0, #12
 8006e92:	f000 f913 	bl	80070bc <memcpy>
 8006e96:	2201      	movs	r2, #1
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 fb2e 	bl	80074fc <__lshift>
 8006ea0:	9b01      	ldr	r3, [sp, #4]
 8006ea2:	f103 0901 	add.w	r9, r3, #1
 8006ea6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	f00a 0301 	and.w	r3, sl, #1
 8006eb2:	46b8      	mov	r8, r7
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	4631      	mov	r1, r6
 8006eba:	ee18 0a10 	vmov	r0, s16
 8006ebe:	f7ff fa78 	bl	80063b2 <quorem>
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	9002      	str	r0, [sp, #8]
 8006ec6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eca:	ee18 0a10 	vmov	r0, s16
 8006ece:	f000 fb85 	bl	80075dc <__mcmp>
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	9003      	str	r0, [sp, #12]
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fb9b 	bl	8007614 <__mdiff>
 8006ede:	68c2      	ldr	r2, [r0, #12]
 8006ee0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	bb02      	cbnz	r2, 8006f2a <_dtoa_r+0xa62>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	ee18 0a10 	vmov	r0, s16
 8006eee:	f000 fb75 	bl	80075dc <__mcmp>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	9207      	str	r2, [sp, #28]
 8006efa:	f000 f92d 	bl	8007158 <_Bfree>
 8006efe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f02:	ea43 0102 	orr.w	r1, r3, r2
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	464d      	mov	r5, r9
 8006f0c:	d10f      	bne.n	8006f2e <_dtoa_r+0xa66>
 8006f0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f12:	d02a      	beq.n	8006f6a <_dtoa_r+0xaa2>
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dd02      	ble.n	8006f20 <_dtoa_r+0xa58>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f20:	f88b a000 	strb.w	sl, [fp]
 8006f24:	e775      	b.n	8006e12 <_dtoa_r+0x94a>
 8006f26:	4638      	mov	r0, r7
 8006f28:	e7ba      	b.n	8006ea0 <_dtoa_r+0x9d8>
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	e7e2      	b.n	8006ef4 <_dtoa_r+0xa2c>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db04      	blt.n	8006f3e <_dtoa_r+0xa76>
 8006f34:	9906      	ldr	r1, [sp, #24]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	9904      	ldr	r1, [sp, #16]
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	d122      	bne.n	8006f84 <_dtoa_r+0xabc>
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	ddee      	ble.n	8006f20 <_dtoa_r+0xa58>
 8006f42:	ee18 1a10 	vmov	r1, s16
 8006f46:	2201      	movs	r2, #1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fad7 	bl	80074fc <__lshift>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	ee08 0a10 	vmov	s16, r0
 8006f54:	f000 fb42 	bl	80075dc <__mcmp>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	dc03      	bgt.n	8006f64 <_dtoa_r+0xa9c>
 8006f5c:	d1e0      	bne.n	8006f20 <_dtoa_r+0xa58>
 8006f5e:	f01a 0f01 	tst.w	sl, #1
 8006f62:	d0dd      	beq.n	8006f20 <_dtoa_r+0xa58>
 8006f64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f68:	d1d7      	bne.n	8006f1a <_dtoa_r+0xa52>
 8006f6a:	2339      	movs	r3, #57	; 0x39
 8006f6c:	f88b 3000 	strb.w	r3, [fp]
 8006f70:	462b      	mov	r3, r5
 8006f72:	461d      	mov	r5, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f7a:	2a39      	cmp	r2, #57	; 0x39
 8006f7c:	d071      	beq.n	8007062 <_dtoa_r+0xb9a>
 8006f7e:	3201      	adds	r2, #1
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e746      	b.n	8006e12 <_dtoa_r+0x94a>
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	dd07      	ble.n	8006f98 <_dtoa_r+0xad0>
 8006f88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f8c:	d0ed      	beq.n	8006f6a <_dtoa_r+0xaa2>
 8006f8e:	f10a 0301 	add.w	r3, sl, #1
 8006f92:	f88b 3000 	strb.w	r3, [fp]
 8006f96:	e73c      	b.n	8006e12 <_dtoa_r+0x94a>
 8006f98:	9b05      	ldr	r3, [sp, #20]
 8006f9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f9e:	4599      	cmp	r9, r3
 8006fa0:	d047      	beq.n	8007032 <_dtoa_r+0xb6a>
 8006fa2:	ee18 1a10 	vmov	r1, s16
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	220a      	movs	r2, #10
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 f8f6 	bl	800719c <__multadd>
 8006fb0:	45b8      	cmp	r8, r7
 8006fb2:	ee08 0a10 	vmov	s16, r0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	f04f 020a 	mov.w	r2, #10
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	d106      	bne.n	8006fd2 <_dtoa_r+0xb0a>
 8006fc4:	f000 f8ea 	bl	800719c <__multadd>
 8006fc8:	4680      	mov	r8, r0
 8006fca:	4607      	mov	r7, r0
 8006fcc:	f109 0901 	add.w	r9, r9, #1
 8006fd0:	e772      	b.n	8006eb8 <_dtoa_r+0x9f0>
 8006fd2:	f000 f8e3 	bl	800719c <__multadd>
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	4680      	mov	r8, r0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	220a      	movs	r2, #10
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 f8dc 	bl	800719c <__multadd>
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	e7f1      	b.n	8006fcc <_dtoa_r+0xb04>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	9302      	str	r3, [sp, #8]
 8006fec:	9d01      	ldr	r5, [sp, #4]
 8006fee:	ee18 0a10 	vmov	r0, s16
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	f7ff f9dd 	bl	80063b2 <quorem>
 8006ff8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ffc:	9b01      	ldr	r3, [sp, #4]
 8006ffe:	f805 ab01 	strb.w	sl, [r5], #1
 8007002:	1aea      	subs	r2, r5, r3
 8007004:	9b02      	ldr	r3, [sp, #8]
 8007006:	4293      	cmp	r3, r2
 8007008:	dd09      	ble.n	800701e <_dtoa_r+0xb56>
 800700a:	ee18 1a10 	vmov	r1, s16
 800700e:	2300      	movs	r3, #0
 8007010:	220a      	movs	r2, #10
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f8c2 	bl	800719c <__multadd>
 8007018:	ee08 0a10 	vmov	s16, r0
 800701c:	e7e7      	b.n	8006fee <_dtoa_r+0xb26>
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	bfc8      	it	gt
 8007024:	461d      	movgt	r5, r3
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	bfd8      	it	le
 800702a:	2501      	movle	r5, #1
 800702c:	441d      	add	r5, r3
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	ee18 1a10 	vmov	r1, s16
 8007036:	2201      	movs	r2, #1
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fa5f 	bl	80074fc <__lshift>
 800703e:	4631      	mov	r1, r6
 8007040:	ee08 0a10 	vmov	s16, r0
 8007044:	f000 faca 	bl	80075dc <__mcmp>
 8007048:	2800      	cmp	r0, #0
 800704a:	dc91      	bgt.n	8006f70 <_dtoa_r+0xaa8>
 800704c:	d102      	bne.n	8007054 <_dtoa_r+0xb8c>
 800704e:	f01a 0f01 	tst.w	sl, #1
 8007052:	d18d      	bne.n	8006f70 <_dtoa_r+0xaa8>
 8007054:	462b      	mov	r3, r5
 8007056:	461d      	mov	r5, r3
 8007058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800705c:	2a30      	cmp	r2, #48	; 0x30
 800705e:	d0fa      	beq.n	8007056 <_dtoa_r+0xb8e>
 8007060:	e6d7      	b.n	8006e12 <_dtoa_r+0x94a>
 8007062:	9a01      	ldr	r2, [sp, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d184      	bne.n	8006f72 <_dtoa_r+0xaaa>
 8007068:	9b00      	ldr	r3, [sp, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	2331      	movs	r3, #49	; 0x31
 8007070:	7013      	strb	r3, [r2, #0]
 8007072:	e6ce      	b.n	8006e12 <_dtoa_r+0x94a>
 8007074:	4b09      	ldr	r3, [pc, #36]	; (800709c <_dtoa_r+0xbd4>)
 8007076:	f7ff ba95 	b.w	80065a4 <_dtoa_r+0xdc>
 800707a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f aa6e 	bne.w	800655e <_dtoa_r+0x96>
 8007082:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <_dtoa_r+0xbd8>)
 8007084:	f7ff ba8e 	b.w	80065a4 <_dtoa_r+0xdc>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	dcae      	bgt.n	8006fec <_dtoa_r+0xb24>
 800708e:	9b06      	ldr	r3, [sp, #24]
 8007090:	2b02      	cmp	r3, #2
 8007092:	f73f aea8 	bgt.w	8006de6 <_dtoa_r+0x91e>
 8007096:	e7a9      	b.n	8006fec <_dtoa_r+0xb24>
 8007098:	080089db 	.word	0x080089db
 800709c:	08008938 	.word	0x08008938
 80070a0:	0800895c 	.word	0x0800895c

080070a4 <_localeconv_r>:
 80070a4:	4800      	ldr	r0, [pc, #0]	; (80070a8 <_localeconv_r+0x4>)
 80070a6:	4770      	bx	lr
 80070a8:	20000168 	.word	0x20000168

080070ac <malloc>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <malloc+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f000 bc17 	b.w	80078e4 <_malloc_r>
 80070b6:	bf00      	nop
 80070b8:	20000014 	.word	0x20000014

080070bc <memcpy>:
 80070bc:	440a      	add	r2, r1
 80070be:	4291      	cmp	r1, r2
 80070c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c4:	d100      	bne.n	80070c8 <memcpy+0xc>
 80070c6:	4770      	bx	lr
 80070c8:	b510      	push	{r4, lr}
 80070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d2:	4291      	cmp	r1, r2
 80070d4:	d1f9      	bne.n	80070ca <memcpy+0xe>
 80070d6:	bd10      	pop	{r4, pc}

080070d8 <_Balloc>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	b976      	cbnz	r6, 8007100 <_Balloc+0x28>
 80070e2:	2010      	movs	r0, #16
 80070e4:	f7ff ffe2 	bl	80070ac <malloc>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6260      	str	r0, [r4, #36]	; 0x24
 80070ec:	b920      	cbnz	r0, 80070f8 <_Balloc+0x20>
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <_Balloc+0x78>)
 80070f0:	4818      	ldr	r0, [pc, #96]	; (8007154 <_Balloc+0x7c>)
 80070f2:	2166      	movs	r1, #102	; 0x66
 80070f4:	f000 fdd6 	bl	8007ca4 <__assert_func>
 80070f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070fc:	6006      	str	r6, [r0, #0]
 80070fe:	60c6      	str	r6, [r0, #12]
 8007100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007102:	68f3      	ldr	r3, [r6, #12]
 8007104:	b183      	cbz	r3, 8007128 <_Balloc+0x50>
 8007106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800710e:	b9b8      	cbnz	r0, 8007140 <_Balloc+0x68>
 8007110:	2101      	movs	r1, #1
 8007112:	fa01 f605 	lsl.w	r6, r1, r5
 8007116:	1d72      	adds	r2, r6, #5
 8007118:	0092      	lsls	r2, r2, #2
 800711a:	4620      	mov	r0, r4
 800711c:	f000 fb60 	bl	80077e0 <_calloc_r>
 8007120:	b160      	cbz	r0, 800713c <_Balloc+0x64>
 8007122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007126:	e00e      	b.n	8007146 <_Balloc+0x6e>
 8007128:	2221      	movs	r2, #33	; 0x21
 800712a:	2104      	movs	r1, #4
 800712c:	4620      	mov	r0, r4
 800712e:	f000 fb57 	bl	80077e0 <_calloc_r>
 8007132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007134:	60f0      	str	r0, [r6, #12]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e4      	bne.n	8007106 <_Balloc+0x2e>
 800713c:	2000      	movs	r0, #0
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	6802      	ldr	r2, [r0, #0]
 8007142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007146:	2300      	movs	r3, #0
 8007148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800714c:	e7f7      	b.n	800713e <_Balloc+0x66>
 800714e:	bf00      	nop
 8007150:	08008969 	.word	0x08008969
 8007154:	080089ec 	.word	0x080089ec

08007158 <_Bfree>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	b976      	cbnz	r6, 8007180 <_Bfree+0x28>
 8007162:	2010      	movs	r0, #16
 8007164:	f7ff ffa2 	bl	80070ac <malloc>
 8007168:	4602      	mov	r2, r0
 800716a:	6268      	str	r0, [r5, #36]	; 0x24
 800716c:	b920      	cbnz	r0, 8007178 <_Bfree+0x20>
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <_Bfree+0x3c>)
 8007170:	4809      	ldr	r0, [pc, #36]	; (8007198 <_Bfree+0x40>)
 8007172:	218a      	movs	r1, #138	; 0x8a
 8007174:	f000 fd96 	bl	8007ca4 <__assert_func>
 8007178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800717c:	6006      	str	r6, [r0, #0]
 800717e:	60c6      	str	r6, [r0, #12]
 8007180:	b13c      	cbz	r4, 8007192 <_Bfree+0x3a>
 8007182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007184:	6862      	ldr	r2, [r4, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800718c:	6021      	str	r1, [r4, #0]
 800718e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	08008969 	.word	0x08008969
 8007198:	080089ec 	.word	0x080089ec

0800719c <__multadd>:
 800719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a0:	690d      	ldr	r5, [r1, #16]
 80071a2:	4607      	mov	r7, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	461e      	mov	r6, r3
 80071a8:	f101 0c14 	add.w	ip, r1, #20
 80071ac:	2000      	movs	r0, #0
 80071ae:	f8dc 3000 	ldr.w	r3, [ip]
 80071b2:	b299      	uxth	r1, r3
 80071b4:	fb02 6101 	mla	r1, r2, r1, r6
 80071b8:	0c1e      	lsrs	r6, r3, #16
 80071ba:	0c0b      	lsrs	r3, r1, #16
 80071bc:	fb02 3306 	mla	r3, r2, r6, r3
 80071c0:	b289      	uxth	r1, r1
 80071c2:	3001      	adds	r0, #1
 80071c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071c8:	4285      	cmp	r5, r0
 80071ca:	f84c 1b04 	str.w	r1, [ip], #4
 80071ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071d2:	dcec      	bgt.n	80071ae <__multadd+0x12>
 80071d4:	b30e      	cbz	r6, 800721a <__multadd+0x7e>
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc19      	bgt.n	8007210 <__multadd+0x74>
 80071dc:	6861      	ldr	r1, [r4, #4]
 80071de:	4638      	mov	r0, r7
 80071e0:	3101      	adds	r1, #1
 80071e2:	f7ff ff79 	bl	80070d8 <_Balloc>
 80071e6:	4680      	mov	r8, r0
 80071e8:	b928      	cbnz	r0, 80071f6 <__multadd+0x5a>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <__multadd+0x84>)
 80071ee:	480d      	ldr	r0, [pc, #52]	; (8007224 <__multadd+0x88>)
 80071f0:	21b5      	movs	r1, #181	; 0xb5
 80071f2:	f000 fd57 	bl	8007ca4 <__assert_func>
 80071f6:	6922      	ldr	r2, [r4, #16]
 80071f8:	3202      	adds	r2, #2
 80071fa:	f104 010c 	add.w	r1, r4, #12
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	300c      	adds	r0, #12
 8007202:	f7ff ff5b 	bl	80070bc <memcpy>
 8007206:	4621      	mov	r1, r4
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff ffa5 	bl	8007158 <_Bfree>
 800720e:	4644      	mov	r4, r8
 8007210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007214:	3501      	adds	r5, #1
 8007216:	615e      	str	r6, [r3, #20]
 8007218:	6125      	str	r5, [r4, #16]
 800721a:	4620      	mov	r0, r4
 800721c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007220:	080089db 	.word	0x080089db
 8007224:	080089ec 	.word	0x080089ec

08007228 <__hi0bits>:
 8007228:	0c03      	lsrs	r3, r0, #16
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	b9d3      	cbnz	r3, 8007264 <__hi0bits+0x3c>
 800722e:	0400      	lsls	r0, r0, #16
 8007230:	2310      	movs	r3, #16
 8007232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007236:	bf04      	itt	eq
 8007238:	0200      	lsleq	r0, r0, #8
 800723a:	3308      	addeq	r3, #8
 800723c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007240:	bf04      	itt	eq
 8007242:	0100      	lsleq	r0, r0, #4
 8007244:	3304      	addeq	r3, #4
 8007246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800724a:	bf04      	itt	eq
 800724c:	0080      	lsleq	r0, r0, #2
 800724e:	3302      	addeq	r3, #2
 8007250:	2800      	cmp	r0, #0
 8007252:	db05      	blt.n	8007260 <__hi0bits+0x38>
 8007254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007258:	f103 0301 	add.w	r3, r3, #1
 800725c:	bf08      	it	eq
 800725e:	2320      	moveq	r3, #32
 8007260:	4618      	mov	r0, r3
 8007262:	4770      	bx	lr
 8007264:	2300      	movs	r3, #0
 8007266:	e7e4      	b.n	8007232 <__hi0bits+0xa>

08007268 <__lo0bits>:
 8007268:	6803      	ldr	r3, [r0, #0]
 800726a:	f013 0207 	ands.w	r2, r3, #7
 800726e:	4601      	mov	r1, r0
 8007270:	d00b      	beq.n	800728a <__lo0bits+0x22>
 8007272:	07da      	lsls	r2, r3, #31
 8007274:	d423      	bmi.n	80072be <__lo0bits+0x56>
 8007276:	0798      	lsls	r0, r3, #30
 8007278:	bf49      	itett	mi
 800727a:	085b      	lsrmi	r3, r3, #1
 800727c:	089b      	lsrpl	r3, r3, #2
 800727e:	2001      	movmi	r0, #1
 8007280:	600b      	strmi	r3, [r1, #0]
 8007282:	bf5c      	itt	pl
 8007284:	600b      	strpl	r3, [r1, #0]
 8007286:	2002      	movpl	r0, #2
 8007288:	4770      	bx	lr
 800728a:	b298      	uxth	r0, r3
 800728c:	b9a8      	cbnz	r0, 80072ba <__lo0bits+0x52>
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	2010      	movs	r0, #16
 8007292:	b2da      	uxtb	r2, r3
 8007294:	b90a      	cbnz	r2, 800729a <__lo0bits+0x32>
 8007296:	3008      	adds	r0, #8
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	071a      	lsls	r2, r3, #28
 800729c:	bf04      	itt	eq
 800729e:	091b      	lsreq	r3, r3, #4
 80072a0:	3004      	addeq	r0, #4
 80072a2:	079a      	lsls	r2, r3, #30
 80072a4:	bf04      	itt	eq
 80072a6:	089b      	lsreq	r3, r3, #2
 80072a8:	3002      	addeq	r0, #2
 80072aa:	07da      	lsls	r2, r3, #31
 80072ac:	d403      	bmi.n	80072b6 <__lo0bits+0x4e>
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f100 0001 	add.w	r0, r0, #1
 80072b4:	d005      	beq.n	80072c2 <__lo0bits+0x5a>
 80072b6:	600b      	str	r3, [r1, #0]
 80072b8:	4770      	bx	lr
 80072ba:	4610      	mov	r0, r2
 80072bc:	e7e9      	b.n	8007292 <__lo0bits+0x2a>
 80072be:	2000      	movs	r0, #0
 80072c0:	4770      	bx	lr
 80072c2:	2020      	movs	r0, #32
 80072c4:	4770      	bx	lr
	...

080072c8 <__i2b>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	2101      	movs	r1, #1
 80072ce:	f7ff ff03 	bl	80070d8 <_Balloc>
 80072d2:	4602      	mov	r2, r0
 80072d4:	b928      	cbnz	r0, 80072e2 <__i2b+0x1a>
 80072d6:	4b05      	ldr	r3, [pc, #20]	; (80072ec <__i2b+0x24>)
 80072d8:	4805      	ldr	r0, [pc, #20]	; (80072f0 <__i2b+0x28>)
 80072da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072de:	f000 fce1 	bl	8007ca4 <__assert_func>
 80072e2:	2301      	movs	r3, #1
 80072e4:	6144      	str	r4, [r0, #20]
 80072e6:	6103      	str	r3, [r0, #16]
 80072e8:	bd10      	pop	{r4, pc}
 80072ea:	bf00      	nop
 80072ec:	080089db 	.word	0x080089db
 80072f0:	080089ec 	.word	0x080089ec

080072f4 <__multiply>:
 80072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f8:	4691      	mov	r9, r2
 80072fa:	690a      	ldr	r2, [r1, #16]
 80072fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007300:	429a      	cmp	r2, r3
 8007302:	bfb8      	it	lt
 8007304:	460b      	movlt	r3, r1
 8007306:	460c      	mov	r4, r1
 8007308:	bfbc      	itt	lt
 800730a:	464c      	movlt	r4, r9
 800730c:	4699      	movlt	r9, r3
 800730e:	6927      	ldr	r7, [r4, #16]
 8007310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	6861      	ldr	r1, [r4, #4]
 8007318:	eb07 060a 	add.w	r6, r7, sl
 800731c:	42b3      	cmp	r3, r6
 800731e:	b085      	sub	sp, #20
 8007320:	bfb8      	it	lt
 8007322:	3101      	addlt	r1, #1
 8007324:	f7ff fed8 	bl	80070d8 <_Balloc>
 8007328:	b930      	cbnz	r0, 8007338 <__multiply+0x44>
 800732a:	4602      	mov	r2, r0
 800732c:	4b44      	ldr	r3, [pc, #272]	; (8007440 <__multiply+0x14c>)
 800732e:	4845      	ldr	r0, [pc, #276]	; (8007444 <__multiply+0x150>)
 8007330:	f240 115d 	movw	r1, #349	; 0x15d
 8007334:	f000 fcb6 	bl	8007ca4 <__assert_func>
 8007338:	f100 0514 	add.w	r5, r0, #20
 800733c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007340:	462b      	mov	r3, r5
 8007342:	2200      	movs	r2, #0
 8007344:	4543      	cmp	r3, r8
 8007346:	d321      	bcc.n	800738c <__multiply+0x98>
 8007348:	f104 0314 	add.w	r3, r4, #20
 800734c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007350:	f109 0314 	add.w	r3, r9, #20
 8007354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	1b3a      	subs	r2, r7, r4
 800735c:	3a15      	subs	r2, #21
 800735e:	f022 0203 	bic.w	r2, r2, #3
 8007362:	3204      	adds	r2, #4
 8007364:	f104 0115 	add.w	r1, r4, #21
 8007368:	428f      	cmp	r7, r1
 800736a:	bf38      	it	cc
 800736c:	2204      	movcc	r2, #4
 800736e:	9201      	str	r2, [sp, #4]
 8007370:	9a02      	ldr	r2, [sp, #8]
 8007372:	9303      	str	r3, [sp, #12]
 8007374:	429a      	cmp	r2, r3
 8007376:	d80c      	bhi.n	8007392 <__multiply+0x9e>
 8007378:	2e00      	cmp	r6, #0
 800737a:	dd03      	ble.n	8007384 <__multiply+0x90>
 800737c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007380:	2b00      	cmp	r3, #0
 8007382:	d05a      	beq.n	800743a <__multiply+0x146>
 8007384:	6106      	str	r6, [r0, #16]
 8007386:	b005      	add	sp, #20
 8007388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738c:	f843 2b04 	str.w	r2, [r3], #4
 8007390:	e7d8      	b.n	8007344 <__multiply+0x50>
 8007392:	f8b3 a000 	ldrh.w	sl, [r3]
 8007396:	f1ba 0f00 	cmp.w	sl, #0
 800739a:	d024      	beq.n	80073e6 <__multiply+0xf2>
 800739c:	f104 0e14 	add.w	lr, r4, #20
 80073a0:	46a9      	mov	r9, r5
 80073a2:	f04f 0c00 	mov.w	ip, #0
 80073a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073aa:	f8d9 1000 	ldr.w	r1, [r9]
 80073ae:	fa1f fb82 	uxth.w	fp, r2
 80073b2:	b289      	uxth	r1, r1
 80073b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80073b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073bc:	f8d9 2000 	ldr.w	r2, [r9]
 80073c0:	4461      	add	r1, ip
 80073c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80073ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ce:	b289      	uxth	r1, r1
 80073d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073d4:	4577      	cmp	r7, lr
 80073d6:	f849 1b04 	str.w	r1, [r9], #4
 80073da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073de:	d8e2      	bhi.n	80073a6 <__multiply+0xb2>
 80073e0:	9a01      	ldr	r2, [sp, #4]
 80073e2:	f845 c002 	str.w	ip, [r5, r2]
 80073e6:	9a03      	ldr	r2, [sp, #12]
 80073e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073ec:	3304      	adds	r3, #4
 80073ee:	f1b9 0f00 	cmp.w	r9, #0
 80073f2:	d020      	beq.n	8007436 <__multiply+0x142>
 80073f4:	6829      	ldr	r1, [r5, #0]
 80073f6:	f104 0c14 	add.w	ip, r4, #20
 80073fa:	46ae      	mov	lr, r5
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	f8bc b000 	ldrh.w	fp, [ip]
 8007404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007408:	fb09 220b 	mla	r2, r9, fp, r2
 800740c:	4492      	add	sl, r2
 800740e:	b289      	uxth	r1, r1
 8007410:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007414:	f84e 1b04 	str.w	r1, [lr], #4
 8007418:	f85c 2b04 	ldr.w	r2, [ip], #4
 800741c:	f8be 1000 	ldrh.w	r1, [lr]
 8007420:	0c12      	lsrs	r2, r2, #16
 8007422:	fb09 1102 	mla	r1, r9, r2, r1
 8007426:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800742a:	4567      	cmp	r7, ip
 800742c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007430:	d8e6      	bhi.n	8007400 <__multiply+0x10c>
 8007432:	9a01      	ldr	r2, [sp, #4]
 8007434:	50a9      	str	r1, [r5, r2]
 8007436:	3504      	adds	r5, #4
 8007438:	e79a      	b.n	8007370 <__multiply+0x7c>
 800743a:	3e01      	subs	r6, #1
 800743c:	e79c      	b.n	8007378 <__multiply+0x84>
 800743e:	bf00      	nop
 8007440:	080089db 	.word	0x080089db
 8007444:	080089ec 	.word	0x080089ec

08007448 <__pow5mult>:
 8007448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744c:	4615      	mov	r5, r2
 800744e:	f012 0203 	ands.w	r2, r2, #3
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	d007      	beq.n	8007468 <__pow5mult+0x20>
 8007458:	4c25      	ldr	r4, [pc, #148]	; (80074f0 <__pow5mult+0xa8>)
 800745a:	3a01      	subs	r2, #1
 800745c:	2300      	movs	r3, #0
 800745e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007462:	f7ff fe9b 	bl	800719c <__multadd>
 8007466:	4607      	mov	r7, r0
 8007468:	10ad      	asrs	r5, r5, #2
 800746a:	d03d      	beq.n	80074e8 <__pow5mult+0xa0>
 800746c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800746e:	b97c      	cbnz	r4, 8007490 <__pow5mult+0x48>
 8007470:	2010      	movs	r0, #16
 8007472:	f7ff fe1b 	bl	80070ac <malloc>
 8007476:	4602      	mov	r2, r0
 8007478:	6270      	str	r0, [r6, #36]	; 0x24
 800747a:	b928      	cbnz	r0, 8007488 <__pow5mult+0x40>
 800747c:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <__pow5mult+0xac>)
 800747e:	481e      	ldr	r0, [pc, #120]	; (80074f8 <__pow5mult+0xb0>)
 8007480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007484:	f000 fc0e 	bl	8007ca4 <__assert_func>
 8007488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800748c:	6004      	str	r4, [r0, #0]
 800748e:	60c4      	str	r4, [r0, #12]
 8007490:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007498:	b94c      	cbnz	r4, 80074ae <__pow5mult+0x66>
 800749a:	f240 2171 	movw	r1, #625	; 0x271
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ff12 	bl	80072c8 <__i2b>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074aa:	4604      	mov	r4, r0
 80074ac:	6003      	str	r3, [r0, #0]
 80074ae:	f04f 0900 	mov.w	r9, #0
 80074b2:	07eb      	lsls	r3, r5, #31
 80074b4:	d50a      	bpl.n	80074cc <__pow5mult+0x84>
 80074b6:	4639      	mov	r1, r7
 80074b8:	4622      	mov	r2, r4
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7ff ff1a 	bl	80072f4 <__multiply>
 80074c0:	4639      	mov	r1, r7
 80074c2:	4680      	mov	r8, r0
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff fe47 	bl	8007158 <_Bfree>
 80074ca:	4647      	mov	r7, r8
 80074cc:	106d      	asrs	r5, r5, #1
 80074ce:	d00b      	beq.n	80074e8 <__pow5mult+0xa0>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	b938      	cbnz	r0, 80074e4 <__pow5mult+0x9c>
 80074d4:	4622      	mov	r2, r4
 80074d6:	4621      	mov	r1, r4
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff ff0b 	bl	80072f4 <__multiply>
 80074de:	6020      	str	r0, [r4, #0]
 80074e0:	f8c0 9000 	str.w	r9, [r0]
 80074e4:	4604      	mov	r4, r0
 80074e6:	e7e4      	b.n	80074b2 <__pow5mult+0x6a>
 80074e8:	4638      	mov	r0, r7
 80074ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ee:	bf00      	nop
 80074f0:	08008b38 	.word	0x08008b38
 80074f4:	08008969 	.word	0x08008969
 80074f8:	080089ec 	.word	0x080089ec

080074fc <__lshift>:
 80074fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	6849      	ldr	r1, [r1, #4]
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800750a:	68a3      	ldr	r3, [r4, #8]
 800750c:	4607      	mov	r7, r0
 800750e:	4691      	mov	r9, r2
 8007510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007514:	f108 0601 	add.w	r6, r8, #1
 8007518:	42b3      	cmp	r3, r6
 800751a:	db0b      	blt.n	8007534 <__lshift+0x38>
 800751c:	4638      	mov	r0, r7
 800751e:	f7ff fddb 	bl	80070d8 <_Balloc>
 8007522:	4605      	mov	r5, r0
 8007524:	b948      	cbnz	r0, 800753a <__lshift+0x3e>
 8007526:	4602      	mov	r2, r0
 8007528:	4b2a      	ldr	r3, [pc, #168]	; (80075d4 <__lshift+0xd8>)
 800752a:	482b      	ldr	r0, [pc, #172]	; (80075d8 <__lshift+0xdc>)
 800752c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007530:	f000 fbb8 	bl	8007ca4 <__assert_func>
 8007534:	3101      	adds	r1, #1
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	e7ee      	b.n	8007518 <__lshift+0x1c>
 800753a:	2300      	movs	r3, #0
 800753c:	f100 0114 	add.w	r1, r0, #20
 8007540:	f100 0210 	add.w	r2, r0, #16
 8007544:	4618      	mov	r0, r3
 8007546:	4553      	cmp	r3, sl
 8007548:	db37      	blt.n	80075ba <__lshift+0xbe>
 800754a:	6920      	ldr	r0, [r4, #16]
 800754c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007550:	f104 0314 	add.w	r3, r4, #20
 8007554:	f019 091f 	ands.w	r9, r9, #31
 8007558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800755c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007560:	d02f      	beq.n	80075c2 <__lshift+0xc6>
 8007562:	f1c9 0e20 	rsb	lr, r9, #32
 8007566:	468a      	mov	sl, r1
 8007568:	f04f 0c00 	mov.w	ip, #0
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	fa02 f209 	lsl.w	r2, r2, r9
 8007572:	ea42 020c 	orr.w	r2, r2, ip
 8007576:	f84a 2b04 	str.w	r2, [sl], #4
 800757a:	f853 2b04 	ldr.w	r2, [r3], #4
 800757e:	4298      	cmp	r0, r3
 8007580:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007584:	d8f2      	bhi.n	800756c <__lshift+0x70>
 8007586:	1b03      	subs	r3, r0, r4
 8007588:	3b15      	subs	r3, #21
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	3304      	adds	r3, #4
 8007590:	f104 0215 	add.w	r2, r4, #21
 8007594:	4290      	cmp	r0, r2
 8007596:	bf38      	it	cc
 8007598:	2304      	movcc	r3, #4
 800759a:	f841 c003 	str.w	ip, [r1, r3]
 800759e:	f1bc 0f00 	cmp.w	ip, #0
 80075a2:	d001      	beq.n	80075a8 <__lshift+0xac>
 80075a4:	f108 0602 	add.w	r6, r8, #2
 80075a8:	3e01      	subs	r6, #1
 80075aa:	4638      	mov	r0, r7
 80075ac:	612e      	str	r6, [r5, #16]
 80075ae:	4621      	mov	r1, r4
 80075b0:	f7ff fdd2 	bl	8007158 <_Bfree>
 80075b4:	4628      	mov	r0, r5
 80075b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80075be:	3301      	adds	r3, #1
 80075c0:	e7c1      	b.n	8007546 <__lshift+0x4a>
 80075c2:	3904      	subs	r1, #4
 80075c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075cc:	4298      	cmp	r0, r3
 80075ce:	d8f9      	bhi.n	80075c4 <__lshift+0xc8>
 80075d0:	e7ea      	b.n	80075a8 <__lshift+0xac>
 80075d2:	bf00      	nop
 80075d4:	080089db 	.word	0x080089db
 80075d8:	080089ec 	.word	0x080089ec

080075dc <__mcmp>:
 80075dc:	b530      	push	{r4, r5, lr}
 80075de:	6902      	ldr	r2, [r0, #16]
 80075e0:	690c      	ldr	r4, [r1, #16]
 80075e2:	1b12      	subs	r2, r2, r4
 80075e4:	d10e      	bne.n	8007604 <__mcmp+0x28>
 80075e6:	f100 0314 	add.w	r3, r0, #20
 80075ea:	3114      	adds	r1, #20
 80075ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075fc:	42a5      	cmp	r5, r4
 80075fe:	d003      	beq.n	8007608 <__mcmp+0x2c>
 8007600:	d305      	bcc.n	800760e <__mcmp+0x32>
 8007602:	2201      	movs	r2, #1
 8007604:	4610      	mov	r0, r2
 8007606:	bd30      	pop	{r4, r5, pc}
 8007608:	4283      	cmp	r3, r0
 800760a:	d3f3      	bcc.n	80075f4 <__mcmp+0x18>
 800760c:	e7fa      	b.n	8007604 <__mcmp+0x28>
 800760e:	f04f 32ff 	mov.w	r2, #4294967295
 8007612:	e7f7      	b.n	8007604 <__mcmp+0x28>

08007614 <__mdiff>:
 8007614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	460c      	mov	r4, r1
 800761a:	4606      	mov	r6, r0
 800761c:	4611      	mov	r1, r2
 800761e:	4620      	mov	r0, r4
 8007620:	4690      	mov	r8, r2
 8007622:	f7ff ffdb 	bl	80075dc <__mcmp>
 8007626:	1e05      	subs	r5, r0, #0
 8007628:	d110      	bne.n	800764c <__mdiff+0x38>
 800762a:	4629      	mov	r1, r5
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff fd53 	bl	80070d8 <_Balloc>
 8007632:	b930      	cbnz	r0, 8007642 <__mdiff+0x2e>
 8007634:	4b3a      	ldr	r3, [pc, #232]	; (8007720 <__mdiff+0x10c>)
 8007636:	4602      	mov	r2, r0
 8007638:	f240 2132 	movw	r1, #562	; 0x232
 800763c:	4839      	ldr	r0, [pc, #228]	; (8007724 <__mdiff+0x110>)
 800763e:	f000 fb31 	bl	8007ca4 <__assert_func>
 8007642:	2301      	movs	r3, #1
 8007644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	bfa4      	itt	ge
 800764e:	4643      	movge	r3, r8
 8007650:	46a0      	movge	r8, r4
 8007652:	4630      	mov	r0, r6
 8007654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007658:	bfa6      	itte	ge
 800765a:	461c      	movge	r4, r3
 800765c:	2500      	movge	r5, #0
 800765e:	2501      	movlt	r5, #1
 8007660:	f7ff fd3a 	bl	80070d8 <_Balloc>
 8007664:	b920      	cbnz	r0, 8007670 <__mdiff+0x5c>
 8007666:	4b2e      	ldr	r3, [pc, #184]	; (8007720 <__mdiff+0x10c>)
 8007668:	4602      	mov	r2, r0
 800766a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800766e:	e7e5      	b.n	800763c <__mdiff+0x28>
 8007670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007674:	6926      	ldr	r6, [r4, #16]
 8007676:	60c5      	str	r5, [r0, #12]
 8007678:	f104 0914 	add.w	r9, r4, #20
 800767c:	f108 0514 	add.w	r5, r8, #20
 8007680:	f100 0e14 	add.w	lr, r0, #20
 8007684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800768c:	f108 0210 	add.w	r2, r8, #16
 8007690:	46f2      	mov	sl, lr
 8007692:	2100      	movs	r1, #0
 8007694:	f859 3b04 	ldr.w	r3, [r9], #4
 8007698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800769c:	fa1f f883 	uxth.w	r8, r3
 80076a0:	fa11 f18b 	uxtah	r1, r1, fp
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	eba1 0808 	sub.w	r8, r1, r8
 80076aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076b2:	fa1f f888 	uxth.w	r8, r8
 80076b6:	1419      	asrs	r1, r3, #16
 80076b8:	454e      	cmp	r6, r9
 80076ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076be:	f84a 3b04 	str.w	r3, [sl], #4
 80076c2:	d8e7      	bhi.n	8007694 <__mdiff+0x80>
 80076c4:	1b33      	subs	r3, r6, r4
 80076c6:	3b15      	subs	r3, #21
 80076c8:	f023 0303 	bic.w	r3, r3, #3
 80076cc:	3304      	adds	r3, #4
 80076ce:	3415      	adds	r4, #21
 80076d0:	42a6      	cmp	r6, r4
 80076d2:	bf38      	it	cc
 80076d4:	2304      	movcc	r3, #4
 80076d6:	441d      	add	r5, r3
 80076d8:	4473      	add	r3, lr
 80076da:	469e      	mov	lr, r3
 80076dc:	462e      	mov	r6, r5
 80076de:	4566      	cmp	r6, ip
 80076e0:	d30e      	bcc.n	8007700 <__mdiff+0xec>
 80076e2:	f10c 0203 	add.w	r2, ip, #3
 80076e6:	1b52      	subs	r2, r2, r5
 80076e8:	f022 0203 	bic.w	r2, r2, #3
 80076ec:	3d03      	subs	r5, #3
 80076ee:	45ac      	cmp	ip, r5
 80076f0:	bf38      	it	cc
 80076f2:	2200      	movcc	r2, #0
 80076f4:	441a      	add	r2, r3
 80076f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076fa:	b17b      	cbz	r3, 800771c <__mdiff+0x108>
 80076fc:	6107      	str	r7, [r0, #16]
 80076fe:	e7a3      	b.n	8007648 <__mdiff+0x34>
 8007700:	f856 8b04 	ldr.w	r8, [r6], #4
 8007704:	fa11 f288 	uxtah	r2, r1, r8
 8007708:	1414      	asrs	r4, r2, #16
 800770a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800770e:	b292      	uxth	r2, r2
 8007710:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007714:	f84e 2b04 	str.w	r2, [lr], #4
 8007718:	1421      	asrs	r1, r4, #16
 800771a:	e7e0      	b.n	80076de <__mdiff+0xca>
 800771c:	3f01      	subs	r7, #1
 800771e:	e7ea      	b.n	80076f6 <__mdiff+0xe2>
 8007720:	080089db 	.word	0x080089db
 8007724:	080089ec 	.word	0x080089ec

08007728 <__d2b>:
 8007728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800772c:	4689      	mov	r9, r1
 800772e:	2101      	movs	r1, #1
 8007730:	ec57 6b10 	vmov	r6, r7, d0
 8007734:	4690      	mov	r8, r2
 8007736:	f7ff fccf 	bl	80070d8 <_Balloc>
 800773a:	4604      	mov	r4, r0
 800773c:	b930      	cbnz	r0, 800774c <__d2b+0x24>
 800773e:	4602      	mov	r2, r0
 8007740:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <__d2b+0xb0>)
 8007742:	4826      	ldr	r0, [pc, #152]	; (80077dc <__d2b+0xb4>)
 8007744:	f240 310a 	movw	r1, #778	; 0x30a
 8007748:	f000 faac 	bl	8007ca4 <__assert_func>
 800774c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007754:	bb35      	cbnz	r5, 80077a4 <__d2b+0x7c>
 8007756:	2e00      	cmp	r6, #0
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	d028      	beq.n	80077ae <__d2b+0x86>
 800775c:	4668      	mov	r0, sp
 800775e:	9600      	str	r6, [sp, #0]
 8007760:	f7ff fd82 	bl	8007268 <__lo0bits>
 8007764:	9900      	ldr	r1, [sp, #0]
 8007766:	b300      	cbz	r0, 80077aa <__d2b+0x82>
 8007768:	9a01      	ldr	r2, [sp, #4]
 800776a:	f1c0 0320 	rsb	r3, r0, #32
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	430b      	orrs	r3, r1
 8007774:	40c2      	lsrs	r2, r0
 8007776:	6163      	str	r3, [r4, #20]
 8007778:	9201      	str	r2, [sp, #4]
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	61a3      	str	r3, [r4, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	bf14      	ite	ne
 8007782:	2202      	movne	r2, #2
 8007784:	2201      	moveq	r2, #1
 8007786:	6122      	str	r2, [r4, #16]
 8007788:	b1d5      	cbz	r5, 80077c0 <__d2b+0x98>
 800778a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800778e:	4405      	add	r5, r0
 8007790:	f8c9 5000 	str.w	r5, [r9]
 8007794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007798:	f8c8 0000 	str.w	r0, [r8]
 800779c:	4620      	mov	r0, r4
 800779e:	b003      	add	sp, #12
 80077a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a8:	e7d5      	b.n	8007756 <__d2b+0x2e>
 80077aa:	6161      	str	r1, [r4, #20]
 80077ac:	e7e5      	b.n	800777a <__d2b+0x52>
 80077ae:	a801      	add	r0, sp, #4
 80077b0:	f7ff fd5a 	bl	8007268 <__lo0bits>
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	6163      	str	r3, [r4, #20]
 80077b8:	2201      	movs	r2, #1
 80077ba:	6122      	str	r2, [r4, #16]
 80077bc:	3020      	adds	r0, #32
 80077be:	e7e3      	b.n	8007788 <__d2b+0x60>
 80077c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077c8:	f8c9 0000 	str.w	r0, [r9]
 80077cc:	6918      	ldr	r0, [r3, #16]
 80077ce:	f7ff fd2b 	bl	8007228 <__hi0bits>
 80077d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077d6:	e7df      	b.n	8007798 <__d2b+0x70>
 80077d8:	080089db 	.word	0x080089db
 80077dc:	080089ec 	.word	0x080089ec

080077e0 <_calloc_r>:
 80077e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077e2:	fba1 2402 	umull	r2, r4, r1, r2
 80077e6:	b94c      	cbnz	r4, 80077fc <_calloc_r+0x1c>
 80077e8:	4611      	mov	r1, r2
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	f000 f87a 	bl	80078e4 <_malloc_r>
 80077f0:	9a01      	ldr	r2, [sp, #4]
 80077f2:	4605      	mov	r5, r0
 80077f4:	b930      	cbnz	r0, 8007804 <_calloc_r+0x24>
 80077f6:	4628      	mov	r0, r5
 80077f8:	b003      	add	sp, #12
 80077fa:	bd30      	pop	{r4, r5, pc}
 80077fc:	220c      	movs	r2, #12
 80077fe:	6002      	str	r2, [r0, #0]
 8007800:	2500      	movs	r5, #0
 8007802:	e7f8      	b.n	80077f6 <_calloc_r+0x16>
 8007804:	4621      	mov	r1, r4
 8007806:	f7fe f92b 	bl	8005a60 <memset>
 800780a:	e7f4      	b.n	80077f6 <_calloc_r+0x16>

0800780c <_free_r>:
 800780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780e:	2900      	cmp	r1, #0
 8007810:	d044      	beq.n	800789c <_free_r+0x90>
 8007812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007816:	9001      	str	r0, [sp, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f1a1 0404 	sub.w	r4, r1, #4
 800781e:	bfb8      	it	lt
 8007820:	18e4      	addlt	r4, r4, r3
 8007822:	f000 fa9b 	bl	8007d5c <__malloc_lock>
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <_free_r+0x94>)
 8007828:	9801      	ldr	r0, [sp, #4]
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	b933      	cbnz	r3, 800783c <_free_r+0x30>
 800782e:	6063      	str	r3, [r4, #4]
 8007830:	6014      	str	r4, [r2, #0]
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007838:	f000 ba96 	b.w	8007d68 <__malloc_unlock>
 800783c:	42a3      	cmp	r3, r4
 800783e:	d908      	bls.n	8007852 <_free_r+0x46>
 8007840:	6825      	ldr	r5, [r4, #0]
 8007842:	1961      	adds	r1, r4, r5
 8007844:	428b      	cmp	r3, r1
 8007846:	bf01      	itttt	eq
 8007848:	6819      	ldreq	r1, [r3, #0]
 800784a:	685b      	ldreq	r3, [r3, #4]
 800784c:	1949      	addeq	r1, r1, r5
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	e7ed      	b.n	800782e <_free_r+0x22>
 8007852:	461a      	mov	r2, r3
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	b10b      	cbz	r3, 800785c <_free_r+0x50>
 8007858:	42a3      	cmp	r3, r4
 800785a:	d9fa      	bls.n	8007852 <_free_r+0x46>
 800785c:	6811      	ldr	r1, [r2, #0]
 800785e:	1855      	adds	r5, r2, r1
 8007860:	42a5      	cmp	r5, r4
 8007862:	d10b      	bne.n	800787c <_free_r+0x70>
 8007864:	6824      	ldr	r4, [r4, #0]
 8007866:	4421      	add	r1, r4
 8007868:	1854      	adds	r4, r2, r1
 800786a:	42a3      	cmp	r3, r4
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	d1e0      	bne.n	8007832 <_free_r+0x26>
 8007870:	681c      	ldr	r4, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	6053      	str	r3, [r2, #4]
 8007876:	4421      	add	r1, r4
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	e7da      	b.n	8007832 <_free_r+0x26>
 800787c:	d902      	bls.n	8007884 <_free_r+0x78>
 800787e:	230c      	movs	r3, #12
 8007880:	6003      	str	r3, [r0, #0]
 8007882:	e7d6      	b.n	8007832 <_free_r+0x26>
 8007884:	6825      	ldr	r5, [r4, #0]
 8007886:	1961      	adds	r1, r4, r5
 8007888:	428b      	cmp	r3, r1
 800788a:	bf04      	itt	eq
 800788c:	6819      	ldreq	r1, [r3, #0]
 800788e:	685b      	ldreq	r3, [r3, #4]
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	bf04      	itt	eq
 8007894:	1949      	addeq	r1, r1, r5
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	6054      	str	r4, [r2, #4]
 800789a:	e7ca      	b.n	8007832 <_free_r+0x26>
 800789c:	b003      	add	sp, #12
 800789e:	bd30      	pop	{r4, r5, pc}
 80078a0:	20000368 	.word	0x20000368

080078a4 <sbrk_aligned>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4e0e      	ldr	r6, [pc, #56]	; (80078e0 <sbrk_aligned+0x3c>)
 80078a8:	460c      	mov	r4, r1
 80078aa:	6831      	ldr	r1, [r6, #0]
 80078ac:	4605      	mov	r5, r0
 80078ae:	b911      	cbnz	r1, 80078b6 <sbrk_aligned+0x12>
 80078b0:	f000 f9e8 	bl	8007c84 <_sbrk_r>
 80078b4:	6030      	str	r0, [r6, #0]
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f9e3 	bl	8007c84 <_sbrk_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	d00a      	beq.n	80078d8 <sbrk_aligned+0x34>
 80078c2:	1cc4      	adds	r4, r0, #3
 80078c4:	f024 0403 	bic.w	r4, r4, #3
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d007      	beq.n	80078dc <sbrk_aligned+0x38>
 80078cc:	1a21      	subs	r1, r4, r0
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 f9d8 	bl	8007c84 <_sbrk_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d101      	bne.n	80078dc <sbrk_aligned+0x38>
 80078d8:	f04f 34ff 	mov.w	r4, #4294967295
 80078dc:	4620      	mov	r0, r4
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	2000036c 	.word	0x2000036c

080078e4 <_malloc_r>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	1ccd      	adds	r5, r1, #3
 80078ea:	f025 0503 	bic.w	r5, r5, #3
 80078ee:	3508      	adds	r5, #8
 80078f0:	2d0c      	cmp	r5, #12
 80078f2:	bf38      	it	cc
 80078f4:	250c      	movcc	r5, #12
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	4607      	mov	r7, r0
 80078fa:	db01      	blt.n	8007900 <_malloc_r+0x1c>
 80078fc:	42a9      	cmp	r1, r5
 80078fe:	d905      	bls.n	800790c <_malloc_r+0x28>
 8007900:	230c      	movs	r3, #12
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	2600      	movs	r6, #0
 8007906:	4630      	mov	r0, r6
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790c:	4e2e      	ldr	r6, [pc, #184]	; (80079c8 <_malloc_r+0xe4>)
 800790e:	f000 fa25 	bl	8007d5c <__malloc_lock>
 8007912:	6833      	ldr	r3, [r6, #0]
 8007914:	461c      	mov	r4, r3
 8007916:	bb34      	cbnz	r4, 8007966 <_malloc_r+0x82>
 8007918:	4629      	mov	r1, r5
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff ffc2 	bl	80078a4 <sbrk_aligned>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	4604      	mov	r4, r0
 8007924:	d14d      	bne.n	80079c2 <_malloc_r+0xde>
 8007926:	6834      	ldr	r4, [r6, #0]
 8007928:	4626      	mov	r6, r4
 800792a:	2e00      	cmp	r6, #0
 800792c:	d140      	bne.n	80079b0 <_malloc_r+0xcc>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4631      	mov	r1, r6
 8007932:	4638      	mov	r0, r7
 8007934:	eb04 0803 	add.w	r8, r4, r3
 8007938:	f000 f9a4 	bl	8007c84 <_sbrk_r>
 800793c:	4580      	cmp	r8, r0
 800793e:	d13a      	bne.n	80079b6 <_malloc_r+0xd2>
 8007940:	6821      	ldr	r1, [r4, #0]
 8007942:	3503      	adds	r5, #3
 8007944:	1a6d      	subs	r5, r5, r1
 8007946:	f025 0503 	bic.w	r5, r5, #3
 800794a:	3508      	adds	r5, #8
 800794c:	2d0c      	cmp	r5, #12
 800794e:	bf38      	it	cc
 8007950:	250c      	movcc	r5, #12
 8007952:	4629      	mov	r1, r5
 8007954:	4638      	mov	r0, r7
 8007956:	f7ff ffa5 	bl	80078a4 <sbrk_aligned>
 800795a:	3001      	adds	r0, #1
 800795c:	d02b      	beq.n	80079b6 <_malloc_r+0xd2>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	442b      	add	r3, r5
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	e00e      	b.n	8007984 <_malloc_r+0xa0>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	1b52      	subs	r2, r2, r5
 800796a:	d41e      	bmi.n	80079aa <_malloc_r+0xc6>
 800796c:	2a0b      	cmp	r2, #11
 800796e:	d916      	bls.n	800799e <_malloc_r+0xba>
 8007970:	1961      	adds	r1, r4, r5
 8007972:	42a3      	cmp	r3, r4
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	bf18      	it	ne
 8007978:	6059      	strne	r1, [r3, #4]
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	bf08      	it	eq
 800797e:	6031      	streq	r1, [r6, #0]
 8007980:	5162      	str	r2, [r4, r5]
 8007982:	604b      	str	r3, [r1, #4]
 8007984:	4638      	mov	r0, r7
 8007986:	f104 060b 	add.w	r6, r4, #11
 800798a:	f000 f9ed 	bl	8007d68 <__malloc_unlock>
 800798e:	f026 0607 	bic.w	r6, r6, #7
 8007992:	1d23      	adds	r3, r4, #4
 8007994:	1af2      	subs	r2, r6, r3
 8007996:	d0b6      	beq.n	8007906 <_malloc_r+0x22>
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	50a3      	str	r3, [r4, r2]
 800799c:	e7b3      	b.n	8007906 <_malloc_r+0x22>
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	bf0c      	ite	eq
 80079a4:	6032      	streq	r2, [r6, #0]
 80079a6:	605a      	strne	r2, [r3, #4]
 80079a8:	e7ec      	b.n	8007984 <_malloc_r+0xa0>
 80079aa:	4623      	mov	r3, r4
 80079ac:	6864      	ldr	r4, [r4, #4]
 80079ae:	e7b2      	b.n	8007916 <_malloc_r+0x32>
 80079b0:	4634      	mov	r4, r6
 80079b2:	6876      	ldr	r6, [r6, #4]
 80079b4:	e7b9      	b.n	800792a <_malloc_r+0x46>
 80079b6:	230c      	movs	r3, #12
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	4638      	mov	r0, r7
 80079bc:	f000 f9d4 	bl	8007d68 <__malloc_unlock>
 80079c0:	e7a1      	b.n	8007906 <_malloc_r+0x22>
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	e7de      	b.n	8007984 <_malloc_r+0xa0>
 80079c6:	bf00      	nop
 80079c8:	20000368 	.word	0x20000368

080079cc <__ssputs_r>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	688e      	ldr	r6, [r1, #8]
 80079d2:	429e      	cmp	r6, r3
 80079d4:	4682      	mov	sl, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4690      	mov	r8, r2
 80079da:	461f      	mov	r7, r3
 80079dc:	d838      	bhi.n	8007a50 <__ssputs_r+0x84>
 80079de:	898a      	ldrh	r2, [r1, #12]
 80079e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079e4:	d032      	beq.n	8007a4c <__ssputs_r+0x80>
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	6909      	ldr	r1, [r1, #16]
 80079ea:	eba5 0901 	sub.w	r9, r5, r1
 80079ee:	6965      	ldr	r5, [r4, #20]
 80079f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079f8:	3301      	adds	r3, #1
 80079fa:	444b      	add	r3, r9
 80079fc:	106d      	asrs	r5, r5, #1
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bf38      	it	cc
 8007a02:	461d      	movcc	r5, r3
 8007a04:	0553      	lsls	r3, r2, #21
 8007a06:	d531      	bpl.n	8007a6c <__ssputs_r+0xa0>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7ff ff6b 	bl	80078e4 <_malloc_r>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	b950      	cbnz	r0, 8007a28 <__ssputs_r+0x5c>
 8007a12:	230c      	movs	r3, #12
 8007a14:	f8ca 3000 	str.w	r3, [sl]
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	6921      	ldr	r1, [r4, #16]
 8007a2a:	464a      	mov	r2, r9
 8007a2c:	f7ff fb46 	bl	80070bc <memcpy>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	6126      	str	r6, [r4, #16]
 8007a3e:	6165      	str	r5, [r4, #20]
 8007a40:	444e      	add	r6, r9
 8007a42:	eba5 0509 	sub.w	r5, r5, r9
 8007a46:	6026      	str	r6, [r4, #0]
 8007a48:	60a5      	str	r5, [r4, #8]
 8007a4a:	463e      	mov	r6, r7
 8007a4c:	42be      	cmp	r6, r7
 8007a4e:	d900      	bls.n	8007a52 <__ssputs_r+0x86>
 8007a50:	463e      	mov	r6, r7
 8007a52:	6820      	ldr	r0, [r4, #0]
 8007a54:	4632      	mov	r2, r6
 8007a56:	4641      	mov	r1, r8
 8007a58:	f000 f966 	bl	8007d28 <memmove>
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	1b9b      	subs	r3, r3, r6
 8007a60:	60a3      	str	r3, [r4, #8]
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	4433      	add	r3, r6
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7db      	b.n	8007a24 <__ssputs_r+0x58>
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	f000 f981 	bl	8007d74 <_realloc_r>
 8007a72:	4606      	mov	r6, r0
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1e1      	bne.n	8007a3c <__ssputs_r+0x70>
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	f7ff fec6 	bl	800780c <_free_r>
 8007a80:	e7c7      	b.n	8007a12 <__ssputs_r+0x46>
	...

08007a84 <_svfiprintf_r>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4698      	mov	r8, r3
 8007a8a:	898b      	ldrh	r3, [r1, #12]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	b09d      	sub	sp, #116	; 0x74
 8007a90:	4607      	mov	r7, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	d50e      	bpl.n	8007ab6 <_svfiprintf_r+0x32>
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	b963      	cbnz	r3, 8007ab6 <_svfiprintf_r+0x32>
 8007a9c:	2140      	movs	r1, #64	; 0x40
 8007a9e:	f7ff ff21 	bl	80078e4 <_malloc_r>
 8007aa2:	6028      	str	r0, [r5, #0]
 8007aa4:	6128      	str	r0, [r5, #16]
 8007aa6:	b920      	cbnz	r0, 8007ab2 <_svfiprintf_r+0x2e>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	e0d1      	b.n	8007c56 <_svfiprintf_r+0x1d2>
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	616b      	str	r3, [r5, #20]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	2320      	movs	r3, #32
 8007abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac4:	2330      	movs	r3, #48	; 0x30
 8007ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c70 <_svfiprintf_r+0x1ec>
 8007aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ace:	f04f 0901 	mov.w	r9, #1
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	469a      	mov	sl, r3
 8007ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ada:	b10a      	cbz	r2, 8007ae0 <_svfiprintf_r+0x5c>
 8007adc:	2a25      	cmp	r2, #37	; 0x25
 8007ade:	d1f9      	bne.n	8007ad4 <_svfiprintf_r+0x50>
 8007ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae4:	d00b      	beq.n	8007afe <_svfiprintf_r+0x7a>
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	4622      	mov	r2, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff ff6d 	bl	80079cc <__ssputs_r>
 8007af2:	3001      	adds	r0, #1
 8007af4:	f000 80aa 	beq.w	8007c4c <_svfiprintf_r+0x1c8>
 8007af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afa:	445a      	add	r2, fp
 8007afc:	9209      	str	r2, [sp, #36]	; 0x24
 8007afe:	f89a 3000 	ldrb.w	r3, [sl]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80a2 	beq.w	8007c4c <_svfiprintf_r+0x1c8>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b12:	f10a 0a01 	add.w	sl, sl, #1
 8007b16:	9304      	str	r3, [sp, #16]
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b20:	4654      	mov	r4, sl
 8007b22:	2205      	movs	r2, #5
 8007b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b28:	4851      	ldr	r0, [pc, #324]	; (8007c70 <_svfiprintf_r+0x1ec>)
 8007b2a:	f7f8 fb61 	bl	80001f0 <memchr>
 8007b2e:	9a04      	ldr	r2, [sp, #16]
 8007b30:	b9d8      	cbnz	r0, 8007b6a <_svfiprintf_r+0xe6>
 8007b32:	06d0      	lsls	r0, r2, #27
 8007b34:	bf44      	itt	mi
 8007b36:	2320      	movmi	r3, #32
 8007b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3c:	0711      	lsls	r1, r2, #28
 8007b3e:	bf44      	itt	mi
 8007b40:	232b      	movmi	r3, #43	; 0x2b
 8007b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b46:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4c:	d015      	beq.n	8007b7a <_svfiprintf_r+0xf6>
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	4654      	mov	r4, sl
 8007b52:	2000      	movs	r0, #0
 8007b54:	f04f 0c0a 	mov.w	ip, #10
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5e:	3b30      	subs	r3, #48	; 0x30
 8007b60:	2b09      	cmp	r3, #9
 8007b62:	d94e      	bls.n	8007c02 <_svfiprintf_r+0x17e>
 8007b64:	b1b0      	cbz	r0, 8007b94 <_svfiprintf_r+0x110>
 8007b66:	9207      	str	r2, [sp, #28]
 8007b68:	e014      	b.n	8007b94 <_svfiprintf_r+0x110>
 8007b6a:	eba0 0308 	sub.w	r3, r0, r8
 8007b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	46a2      	mov	sl, r4
 8007b78:	e7d2      	b.n	8007b20 <_svfiprintf_r+0x9c>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	1d19      	adds	r1, r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	9103      	str	r1, [sp, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bfbb      	ittet	lt
 8007b86:	425b      	neglt	r3, r3
 8007b88:	f042 0202 	orrlt.w	r2, r2, #2
 8007b8c:	9307      	strge	r3, [sp, #28]
 8007b8e:	9307      	strlt	r3, [sp, #28]
 8007b90:	bfb8      	it	lt
 8007b92:	9204      	strlt	r2, [sp, #16]
 8007b94:	7823      	ldrb	r3, [r4, #0]
 8007b96:	2b2e      	cmp	r3, #46	; 0x2e
 8007b98:	d10c      	bne.n	8007bb4 <_svfiprintf_r+0x130>
 8007b9a:	7863      	ldrb	r3, [r4, #1]
 8007b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9e:	d135      	bne.n	8007c0c <_svfiprintf_r+0x188>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	9203      	str	r2, [sp, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfb8      	it	lt
 8007bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bb0:	3402      	adds	r4, #2
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c80 <_svfiprintf_r+0x1fc>
 8007bb8:	7821      	ldrb	r1, [r4, #0]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7f8 fb17 	bl	80001f0 <memchr>
 8007bc2:	b140      	cbz	r0, 8007bd6 <_svfiprintf_r+0x152>
 8007bc4:	2340      	movs	r3, #64	; 0x40
 8007bc6:	eba0 000a 	sub.w	r0, r0, sl
 8007bca:	fa03 f000 	lsl.w	r0, r3, r0
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	4303      	orrs	r3, r0
 8007bd2:	3401      	adds	r4, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bda:	4826      	ldr	r0, [pc, #152]	; (8007c74 <_svfiprintf_r+0x1f0>)
 8007bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007be0:	2206      	movs	r2, #6
 8007be2:	f7f8 fb05 	bl	80001f0 <memchr>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d038      	beq.n	8007c5c <_svfiprintf_r+0x1d8>
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <_svfiprintf_r+0x1f4>)
 8007bec:	bb1b      	cbnz	r3, 8007c36 <_svfiprintf_r+0x1b2>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	3307      	adds	r3, #7
 8007bf2:	f023 0307 	bic.w	r3, r3, #7
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	4433      	add	r3, r6
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	e767      	b.n	8007ad2 <_svfiprintf_r+0x4e>
 8007c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7a5      	b.n	8007b58 <_svfiprintf_r+0xd4>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	3401      	adds	r4, #1
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	4619      	mov	r1, r3
 8007c14:	f04f 0c0a 	mov.w	ip, #10
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1e:	3a30      	subs	r2, #48	; 0x30
 8007c20:	2a09      	cmp	r2, #9
 8007c22:	d903      	bls.n	8007c2c <_svfiprintf_r+0x1a8>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0c5      	beq.n	8007bb4 <_svfiprintf_r+0x130>
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	e7c3      	b.n	8007bb4 <_svfiprintf_r+0x130>
 8007c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c30:	4604      	mov	r4, r0
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7f0      	b.n	8007c18 <_svfiprintf_r+0x194>
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <_svfiprintf_r+0x1f8>)
 8007c3e:	a904      	add	r1, sp, #16
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7fd ffb5 	bl	8005bb0 <_printf_float>
 8007c46:	1c42      	adds	r2, r0, #1
 8007c48:	4606      	mov	r6, r0
 8007c4a:	d1d6      	bne.n	8007bfa <_svfiprintf_r+0x176>
 8007c4c:	89ab      	ldrh	r3, [r5, #12]
 8007c4e:	065b      	lsls	r3, r3, #25
 8007c50:	f53f af2c 	bmi.w	8007aac <_svfiprintf_r+0x28>
 8007c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c56:	b01d      	add	sp, #116	; 0x74
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <_svfiprintf_r+0x1f8>)
 8007c64:	a904      	add	r1, sp, #16
 8007c66:	4638      	mov	r0, r7
 8007c68:	f7fe fa46 	bl	80060f8 <_printf_i>
 8007c6c:	e7eb      	b.n	8007c46 <_svfiprintf_r+0x1c2>
 8007c6e:	bf00      	nop
 8007c70:	08008b44 	.word	0x08008b44
 8007c74:	08008b4e 	.word	0x08008b4e
 8007c78:	08005bb1 	.word	0x08005bb1
 8007c7c:	080079cd 	.word	0x080079cd
 8007c80:	08008b4a 	.word	0x08008b4a

08007c84 <_sbrk_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_sbrk_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7fa fb6c 	bl	800236c <_sbrk>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_sbrk_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_sbrk_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000370 	.word	0x20000370

08007ca4 <__assert_func>:
 8007ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <__assert_func+0x2c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4605      	mov	r5, r0
 8007cb0:	68d8      	ldr	r0, [r3, #12]
 8007cb2:	b14c      	cbz	r4, 8007cc8 <__assert_func+0x24>
 8007cb4:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <__assert_func+0x30>)
 8007cb6:	9100      	str	r1, [sp, #0]
 8007cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cbc:	4906      	ldr	r1, [pc, #24]	; (8007cd8 <__assert_func+0x34>)
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	f000 f80e 	bl	8007ce0 <fiprintf>
 8007cc4:	f000 faac 	bl	8008220 <abort>
 8007cc8:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <__assert_func+0x38>)
 8007cca:	461c      	mov	r4, r3
 8007ccc:	e7f3      	b.n	8007cb6 <__assert_func+0x12>
 8007cce:	bf00      	nop
 8007cd0:	20000014 	.word	0x20000014
 8007cd4:	08008b55 	.word	0x08008b55
 8007cd8:	08008b62 	.word	0x08008b62
 8007cdc:	08008b90 	.word	0x08008b90

08007ce0 <fiprintf>:
 8007ce0:	b40e      	push	{r1, r2, r3}
 8007ce2:	b503      	push	{r0, r1, lr}
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	4805      	ldr	r0, [pc, #20]	; (8007d00 <fiprintf+0x20>)
 8007cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cee:	6800      	ldr	r0, [r0, #0]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	f000 f897 	bl	8007e24 <_vfiprintf_r>
 8007cf6:	b002      	add	sp, #8
 8007cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cfc:	b003      	add	sp, #12
 8007cfe:	4770      	bx	lr
 8007d00:	20000014 	.word	0x20000014

08007d04 <__ascii_mbtowc>:
 8007d04:	b082      	sub	sp, #8
 8007d06:	b901      	cbnz	r1, 8007d0a <__ascii_mbtowc+0x6>
 8007d08:	a901      	add	r1, sp, #4
 8007d0a:	b142      	cbz	r2, 8007d1e <__ascii_mbtowc+0x1a>
 8007d0c:	b14b      	cbz	r3, 8007d22 <__ascii_mbtowc+0x1e>
 8007d0e:	7813      	ldrb	r3, [r2, #0]
 8007d10:	600b      	str	r3, [r1, #0]
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	1e10      	subs	r0, r2, #0
 8007d16:	bf18      	it	ne
 8007d18:	2001      	movne	r0, #1
 8007d1a:	b002      	add	sp, #8
 8007d1c:	4770      	bx	lr
 8007d1e:	4610      	mov	r0, r2
 8007d20:	e7fb      	b.n	8007d1a <__ascii_mbtowc+0x16>
 8007d22:	f06f 0001 	mvn.w	r0, #1
 8007d26:	e7f8      	b.n	8007d1a <__ascii_mbtowc+0x16>

08007d28 <memmove>:
 8007d28:	4288      	cmp	r0, r1
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	eb01 0402 	add.w	r4, r1, r2
 8007d30:	d902      	bls.n	8007d38 <memmove+0x10>
 8007d32:	4284      	cmp	r4, r0
 8007d34:	4623      	mov	r3, r4
 8007d36:	d807      	bhi.n	8007d48 <memmove+0x20>
 8007d38:	1e43      	subs	r3, r0, #1
 8007d3a:	42a1      	cmp	r1, r4
 8007d3c:	d008      	beq.n	8007d50 <memmove+0x28>
 8007d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d46:	e7f8      	b.n	8007d3a <memmove+0x12>
 8007d48:	4402      	add	r2, r0
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	d100      	bne.n	8007d52 <memmove+0x2a>
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d5a:	e7f7      	b.n	8007d4c <memmove+0x24>

08007d5c <__malloc_lock>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__malloc_lock+0x8>)
 8007d5e:	f000 bc1f 	b.w	80085a0 <__retarget_lock_acquire_recursive>
 8007d62:	bf00      	nop
 8007d64:	20000374 	.word	0x20000374

08007d68 <__malloc_unlock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_unlock+0x8>)
 8007d6a:	f000 bc1a 	b.w	80085a2 <__retarget_lock_release_recursive>
 8007d6e:	bf00      	nop
 8007d70:	20000374 	.word	0x20000374

08007d74 <_realloc_r>:
 8007d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	b921      	cbnz	r1, 8007d8a <_realloc_r+0x16>
 8007d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d84:	4611      	mov	r1, r2
 8007d86:	f7ff bdad 	b.w	80078e4 <_malloc_r>
 8007d8a:	b92a      	cbnz	r2, 8007d98 <_realloc_r+0x24>
 8007d8c:	f7ff fd3e 	bl	800780c <_free_r>
 8007d90:	4625      	mov	r5, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	f000 fc6a 	bl	8008670 <_malloc_usable_size_r>
 8007d9c:	4284      	cmp	r4, r0
 8007d9e:	4607      	mov	r7, r0
 8007da0:	d802      	bhi.n	8007da8 <_realloc_r+0x34>
 8007da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007da6:	d812      	bhi.n	8007dce <_realloc_r+0x5a>
 8007da8:	4621      	mov	r1, r4
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff fd9a 	bl	80078e4 <_malloc_r>
 8007db0:	4605      	mov	r5, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0ed      	beq.n	8007d92 <_realloc_r+0x1e>
 8007db6:	42bc      	cmp	r4, r7
 8007db8:	4622      	mov	r2, r4
 8007dba:	4631      	mov	r1, r6
 8007dbc:	bf28      	it	cs
 8007dbe:	463a      	movcs	r2, r7
 8007dc0:	f7ff f97c 	bl	80070bc <memcpy>
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7ff fd20 	bl	800780c <_free_r>
 8007dcc:	e7e1      	b.n	8007d92 <_realloc_r+0x1e>
 8007dce:	4635      	mov	r5, r6
 8007dd0:	e7df      	b.n	8007d92 <_realloc_r+0x1e>

08007dd2 <__sfputc_r>:
 8007dd2:	6893      	ldr	r3, [r2, #8]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	b410      	push	{r4}
 8007dda:	6093      	str	r3, [r2, #8]
 8007ddc:	da08      	bge.n	8007df0 <__sfputc_r+0x1e>
 8007dde:	6994      	ldr	r4, [r2, #24]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	db01      	blt.n	8007de8 <__sfputc_r+0x16>
 8007de4:	290a      	cmp	r1, #10
 8007de6:	d103      	bne.n	8007df0 <__sfputc_r+0x1e>
 8007de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dec:	f000 b94a 	b.w	8008084 <__swbuf_r>
 8007df0:	6813      	ldr	r3, [r2, #0]
 8007df2:	1c58      	adds	r0, r3, #1
 8007df4:	6010      	str	r0, [r2, #0]
 8007df6:	7019      	strb	r1, [r3, #0]
 8007df8:	4608      	mov	r0, r1
 8007dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <__sfputs_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	4614      	mov	r4, r2
 8007e08:	18d5      	adds	r5, r2, r3
 8007e0a:	42ac      	cmp	r4, r5
 8007e0c:	d101      	bne.n	8007e12 <__sfputs_r+0x12>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e007      	b.n	8007e22 <__sfputs_r+0x22>
 8007e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e16:	463a      	mov	r2, r7
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff ffda 	bl	8007dd2 <__sfputc_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d1f3      	bne.n	8007e0a <__sfputs_r+0xa>
 8007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e24 <_vfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	460d      	mov	r5, r1
 8007e2a:	b09d      	sub	sp, #116	; 0x74
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	4698      	mov	r8, r3
 8007e30:	4606      	mov	r6, r0
 8007e32:	b118      	cbz	r0, 8007e3c <_vfiprintf_r+0x18>
 8007e34:	6983      	ldr	r3, [r0, #24]
 8007e36:	b90b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x18>
 8007e38:	f000 fb14 	bl	8008464 <__sinit>
 8007e3c:	4b89      	ldr	r3, [pc, #548]	; (8008064 <_vfiprintf_r+0x240>)
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	d11b      	bne.n	8007e7a <_vfiprintf_r+0x56>
 8007e42:	6875      	ldr	r5, [r6, #4]
 8007e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e46:	07d9      	lsls	r1, r3, #31
 8007e48:	d405      	bmi.n	8007e56 <_vfiprintf_r+0x32>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	059a      	lsls	r2, r3, #22
 8007e4e:	d402      	bmi.n	8007e56 <_vfiprintf_r+0x32>
 8007e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e52:	f000 fba5 	bl	80085a0 <__retarget_lock_acquire_recursive>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	071b      	lsls	r3, r3, #28
 8007e5a:	d501      	bpl.n	8007e60 <_vfiprintf_r+0x3c>
 8007e5c:	692b      	ldr	r3, [r5, #16]
 8007e5e:	b9eb      	cbnz	r3, 8007e9c <_vfiprintf_r+0x78>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f96e 	bl	8008144 <__swsetup_r>
 8007e68:	b1c0      	cbz	r0, 8007e9c <_vfiprintf_r+0x78>
 8007e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e6c:	07dc      	lsls	r4, r3, #31
 8007e6e:	d50e      	bpl.n	8007e8e <_vfiprintf_r+0x6a>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	b01d      	add	sp, #116	; 0x74
 8007e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7a:	4b7b      	ldr	r3, [pc, #492]	; (8008068 <_vfiprintf_r+0x244>)
 8007e7c:	429d      	cmp	r5, r3
 8007e7e:	d101      	bne.n	8007e84 <_vfiprintf_r+0x60>
 8007e80:	68b5      	ldr	r5, [r6, #8]
 8007e82:	e7df      	b.n	8007e44 <_vfiprintf_r+0x20>
 8007e84:	4b79      	ldr	r3, [pc, #484]	; (800806c <_vfiprintf_r+0x248>)
 8007e86:	429d      	cmp	r5, r3
 8007e88:	bf08      	it	eq
 8007e8a:	68f5      	ldreq	r5, [r6, #12]
 8007e8c:	e7da      	b.n	8007e44 <_vfiprintf_r+0x20>
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4ed      	bmi.n	8007e70 <_vfiprintf_r+0x4c>
 8007e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e96:	f000 fb84 	bl	80085a2 <__retarget_lock_release_recursive>
 8007e9a:	e7e9      	b.n	8007e70 <_vfiprintf_r+0x4c>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eaa:	2330      	movs	r3, #48	; 0x30
 8007eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008070 <_vfiprintf_r+0x24c>
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb4:	f04f 0901 	mov.w	r9, #1
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0xa2>
 8007ec2:	2a25      	cmp	r2, #37	; 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x96>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xc0>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ff94 	bl	8007e00 <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80aa 	beq.w	8008032 <_vfiprintf_r+0x20e>
 8007ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80a2 	beq.w	8008032 <_vfiprintf_r+0x20e>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f04:	931a      	str	r3, [sp, #104]	; 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4858      	ldr	r0, [pc, #352]	; (8008070 <_vfiprintf_r+0x24c>)
 8007f10:	f7f8 f96e 	bl	80001f0 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x12c>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	; 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	; 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x13c>
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4654      	mov	r4, sl
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	; 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94e      	bls.n	8007fe8 <_vfiprintf_r+0x1c4>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x156>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x156>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	46a2      	mov	sl, r4
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xe2>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f7e:	d10c      	bne.n	8007f9a <_vfiprintf_r+0x176>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	; 0x2a
 8007f84:	d135      	bne.n	8007ff2 <_vfiprintf_r+0x1ce>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9203      	str	r2, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfb8      	it	lt
 8007f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f96:	3402      	adds	r4, #2
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008080 <_vfiprintf_r+0x25c>
 8007f9e:	7821      	ldrb	r1, [r4, #0]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	f7f8 f924 	bl	80001f0 <memchr>
 8007fa8:	b140      	cbz	r0, 8007fbc <_vfiprintf_r+0x198>
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	eba0 000a 	sub.w	r0, r0, sl
 8007fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	4303      	orrs	r3, r0
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc0:	482c      	ldr	r0, [pc, #176]	; (8008074 <_vfiprintf_r+0x250>)
 8007fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc6:	2206      	movs	r2, #6
 8007fc8:	f7f8 f912 	bl	80001f0 <memchr>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d03f      	beq.n	8008050 <_vfiprintf_r+0x22c>
 8007fd0:	4b29      	ldr	r3, [pc, #164]	; (8008078 <_vfiprintf_r+0x254>)
 8007fd2:	bb1b      	cbnz	r3, 800801c <_vfiprintf_r+0x1f8>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	f023 0307 	bic.w	r3, r3, #7
 8007fdc:	3308      	adds	r3, #8
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	443b      	add	r3, r7
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	e767      	b.n	8007eb8 <_vfiprintf_r+0x94>
 8007fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fec:	460c      	mov	r4, r1
 8007fee:	2001      	movs	r0, #1
 8007ff0:	e7a5      	b.n	8007f3e <_vfiprintf_r+0x11a>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	3401      	adds	r4, #1
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f04f 0c0a 	mov.w	ip, #10
 8007ffe:	4620      	mov	r0, r4
 8008000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008004:	3a30      	subs	r2, #48	; 0x30
 8008006:	2a09      	cmp	r2, #9
 8008008:	d903      	bls.n	8008012 <_vfiprintf_r+0x1ee>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0c5      	beq.n	8007f9a <_vfiprintf_r+0x176>
 800800e:	9105      	str	r1, [sp, #20]
 8008010:	e7c3      	b.n	8007f9a <_vfiprintf_r+0x176>
 8008012:	fb0c 2101 	mla	r1, ip, r1, r2
 8008016:	4604      	mov	r4, r0
 8008018:	2301      	movs	r3, #1
 800801a:	e7f0      	b.n	8007ffe <_vfiprintf_r+0x1da>
 800801c:	ab03      	add	r3, sp, #12
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	462a      	mov	r2, r5
 8008022:	4b16      	ldr	r3, [pc, #88]	; (800807c <_vfiprintf_r+0x258>)
 8008024:	a904      	add	r1, sp, #16
 8008026:	4630      	mov	r0, r6
 8008028:	f7fd fdc2 	bl	8005bb0 <_printf_float>
 800802c:	4607      	mov	r7, r0
 800802e:	1c78      	adds	r0, r7, #1
 8008030:	d1d6      	bne.n	8007fe0 <_vfiprintf_r+0x1bc>
 8008032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008034:	07d9      	lsls	r1, r3, #31
 8008036:	d405      	bmi.n	8008044 <_vfiprintf_r+0x220>
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	059a      	lsls	r2, r3, #22
 800803c:	d402      	bmi.n	8008044 <_vfiprintf_r+0x220>
 800803e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008040:	f000 faaf 	bl	80085a2 <__retarget_lock_release_recursive>
 8008044:	89ab      	ldrh	r3, [r5, #12]
 8008046:	065b      	lsls	r3, r3, #25
 8008048:	f53f af12 	bmi.w	8007e70 <_vfiprintf_r+0x4c>
 800804c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804e:	e711      	b.n	8007e74 <_vfiprintf_r+0x50>
 8008050:	ab03      	add	r3, sp, #12
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	462a      	mov	r2, r5
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <_vfiprintf_r+0x258>)
 8008058:	a904      	add	r1, sp, #16
 800805a:	4630      	mov	r0, r6
 800805c:	f7fe f84c 	bl	80060f8 <_printf_i>
 8008060:	e7e4      	b.n	800802c <_vfiprintf_r+0x208>
 8008062:	bf00      	nop
 8008064:	08008cbc 	.word	0x08008cbc
 8008068:	08008cdc 	.word	0x08008cdc
 800806c:	08008c9c 	.word	0x08008c9c
 8008070:	08008b44 	.word	0x08008b44
 8008074:	08008b4e 	.word	0x08008b4e
 8008078:	08005bb1 	.word	0x08005bb1
 800807c:	08007e01 	.word	0x08007e01
 8008080:	08008b4a 	.word	0x08008b4a

08008084 <__swbuf_r>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	460e      	mov	r6, r1
 8008088:	4614      	mov	r4, r2
 800808a:	4605      	mov	r5, r0
 800808c:	b118      	cbz	r0, 8008096 <__swbuf_r+0x12>
 800808e:	6983      	ldr	r3, [r0, #24]
 8008090:	b90b      	cbnz	r3, 8008096 <__swbuf_r+0x12>
 8008092:	f000 f9e7 	bl	8008464 <__sinit>
 8008096:	4b21      	ldr	r3, [pc, #132]	; (800811c <__swbuf_r+0x98>)
 8008098:	429c      	cmp	r4, r3
 800809a:	d12b      	bne.n	80080f4 <__swbuf_r+0x70>
 800809c:	686c      	ldr	r4, [r5, #4]
 800809e:	69a3      	ldr	r3, [r4, #24]
 80080a0:	60a3      	str	r3, [r4, #8]
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	071a      	lsls	r2, r3, #28
 80080a6:	d52f      	bpl.n	8008108 <__swbuf_r+0x84>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	b36b      	cbz	r3, 8008108 <__swbuf_r+0x84>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	1ac0      	subs	r0, r0, r3
 80080b2:	6963      	ldr	r3, [r4, #20]
 80080b4:	b2f6      	uxtb	r6, r6
 80080b6:	4283      	cmp	r3, r0
 80080b8:	4637      	mov	r7, r6
 80080ba:	dc04      	bgt.n	80080c6 <__swbuf_r+0x42>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f93c 	bl	800833c <_fflush_r>
 80080c4:	bb30      	cbnz	r0, 8008114 <__swbuf_r+0x90>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	60a3      	str	r3, [r4, #8]
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	6022      	str	r2, [r4, #0]
 80080d2:	701e      	strb	r6, [r3, #0]
 80080d4:	6963      	ldr	r3, [r4, #20]
 80080d6:	3001      	adds	r0, #1
 80080d8:	4283      	cmp	r3, r0
 80080da:	d004      	beq.n	80080e6 <__swbuf_r+0x62>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d506      	bpl.n	80080f0 <__swbuf_r+0x6c>
 80080e2:	2e0a      	cmp	r6, #10
 80080e4:	d104      	bne.n	80080f0 <__swbuf_r+0x6c>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 f927 	bl	800833c <_fflush_r>
 80080ee:	b988      	cbnz	r0, 8008114 <__swbuf_r+0x90>
 80080f0:	4638      	mov	r0, r7
 80080f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f4:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <__swbuf_r+0x9c>)
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d101      	bne.n	80080fe <__swbuf_r+0x7a>
 80080fa:	68ac      	ldr	r4, [r5, #8]
 80080fc:	e7cf      	b.n	800809e <__swbuf_r+0x1a>
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <__swbuf_r+0xa0>)
 8008100:	429c      	cmp	r4, r3
 8008102:	bf08      	it	eq
 8008104:	68ec      	ldreq	r4, [r5, #12]
 8008106:	e7ca      	b.n	800809e <__swbuf_r+0x1a>
 8008108:	4621      	mov	r1, r4
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f81a 	bl	8008144 <__swsetup_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	d0cb      	beq.n	80080ac <__swbuf_r+0x28>
 8008114:	f04f 37ff 	mov.w	r7, #4294967295
 8008118:	e7ea      	b.n	80080f0 <__swbuf_r+0x6c>
 800811a:	bf00      	nop
 800811c:	08008cbc 	.word	0x08008cbc
 8008120:	08008cdc 	.word	0x08008cdc
 8008124:	08008c9c 	.word	0x08008c9c

08008128 <__ascii_wctomb>:
 8008128:	b149      	cbz	r1, 800813e <__ascii_wctomb+0x16>
 800812a:	2aff      	cmp	r2, #255	; 0xff
 800812c:	bf85      	ittet	hi
 800812e:	238a      	movhi	r3, #138	; 0x8a
 8008130:	6003      	strhi	r3, [r0, #0]
 8008132:	700a      	strbls	r2, [r1, #0]
 8008134:	f04f 30ff 	movhi.w	r0, #4294967295
 8008138:	bf98      	it	ls
 800813a:	2001      	movls	r0, #1
 800813c:	4770      	bx	lr
 800813e:	4608      	mov	r0, r1
 8008140:	4770      	bx	lr
	...

08008144 <__swsetup_r>:
 8008144:	4b32      	ldr	r3, [pc, #200]	; (8008210 <__swsetup_r+0xcc>)
 8008146:	b570      	push	{r4, r5, r6, lr}
 8008148:	681d      	ldr	r5, [r3, #0]
 800814a:	4606      	mov	r6, r0
 800814c:	460c      	mov	r4, r1
 800814e:	b125      	cbz	r5, 800815a <__swsetup_r+0x16>
 8008150:	69ab      	ldr	r3, [r5, #24]
 8008152:	b913      	cbnz	r3, 800815a <__swsetup_r+0x16>
 8008154:	4628      	mov	r0, r5
 8008156:	f000 f985 	bl	8008464 <__sinit>
 800815a:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <__swsetup_r+0xd0>)
 800815c:	429c      	cmp	r4, r3
 800815e:	d10f      	bne.n	8008180 <__swsetup_r+0x3c>
 8008160:	686c      	ldr	r4, [r5, #4]
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008168:	0719      	lsls	r1, r3, #28
 800816a:	d42c      	bmi.n	80081c6 <__swsetup_r+0x82>
 800816c:	06dd      	lsls	r5, r3, #27
 800816e:	d411      	bmi.n	8008194 <__swsetup_r+0x50>
 8008170:	2309      	movs	r3, #9
 8008172:	6033      	str	r3, [r6, #0]
 8008174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	f04f 30ff 	mov.w	r0, #4294967295
 800817e:	e03e      	b.n	80081fe <__swsetup_r+0xba>
 8008180:	4b25      	ldr	r3, [pc, #148]	; (8008218 <__swsetup_r+0xd4>)
 8008182:	429c      	cmp	r4, r3
 8008184:	d101      	bne.n	800818a <__swsetup_r+0x46>
 8008186:	68ac      	ldr	r4, [r5, #8]
 8008188:	e7eb      	b.n	8008162 <__swsetup_r+0x1e>
 800818a:	4b24      	ldr	r3, [pc, #144]	; (800821c <__swsetup_r+0xd8>)
 800818c:	429c      	cmp	r4, r3
 800818e:	bf08      	it	eq
 8008190:	68ec      	ldreq	r4, [r5, #12]
 8008192:	e7e6      	b.n	8008162 <__swsetup_r+0x1e>
 8008194:	0758      	lsls	r0, r3, #29
 8008196:	d512      	bpl.n	80081be <__swsetup_r+0x7a>
 8008198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800819a:	b141      	cbz	r1, 80081ae <__swsetup_r+0x6a>
 800819c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081a0:	4299      	cmp	r1, r3
 80081a2:	d002      	beq.n	80081aa <__swsetup_r+0x66>
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7ff fb31 	bl	800780c <_free_r>
 80081aa:	2300      	movs	r3, #0
 80081ac:	6363      	str	r3, [r4, #52]	; 0x34
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	2300      	movs	r3, #0
 80081b8:	6063      	str	r3, [r4, #4]
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f043 0308 	orr.w	r3, r3, #8
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	b94b      	cbnz	r3, 80081de <__swsetup_r+0x9a>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d4:	d003      	beq.n	80081de <__swsetup_r+0x9a>
 80081d6:	4621      	mov	r1, r4
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 fa09 	bl	80085f0 <__smakebuf_r>
 80081de:	89a0      	ldrh	r0, [r4, #12]
 80081e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081e4:	f010 0301 	ands.w	r3, r0, #1
 80081e8:	d00a      	beq.n	8008200 <__swsetup_r+0xbc>
 80081ea:	2300      	movs	r3, #0
 80081ec:	60a3      	str	r3, [r4, #8]
 80081ee:	6963      	ldr	r3, [r4, #20]
 80081f0:	425b      	negs	r3, r3
 80081f2:	61a3      	str	r3, [r4, #24]
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	b943      	cbnz	r3, 800820a <__swsetup_r+0xc6>
 80081f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081fc:	d1ba      	bne.n	8008174 <__swsetup_r+0x30>
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	0781      	lsls	r1, r0, #30
 8008202:	bf58      	it	pl
 8008204:	6963      	ldrpl	r3, [r4, #20]
 8008206:	60a3      	str	r3, [r4, #8]
 8008208:	e7f4      	b.n	80081f4 <__swsetup_r+0xb0>
 800820a:	2000      	movs	r0, #0
 800820c:	e7f7      	b.n	80081fe <__swsetup_r+0xba>
 800820e:	bf00      	nop
 8008210:	20000014 	.word	0x20000014
 8008214:	08008cbc 	.word	0x08008cbc
 8008218:	08008cdc 	.word	0x08008cdc
 800821c:	08008c9c 	.word	0x08008c9c

08008220 <abort>:
 8008220:	b508      	push	{r3, lr}
 8008222:	2006      	movs	r0, #6
 8008224:	f000 fa54 	bl	80086d0 <raise>
 8008228:	2001      	movs	r0, #1
 800822a:	f7fa f827 	bl	800227c <_exit>
	...

08008230 <__sflush_r>:
 8008230:	898a      	ldrh	r2, [r1, #12]
 8008232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008236:	4605      	mov	r5, r0
 8008238:	0710      	lsls	r0, r2, #28
 800823a:	460c      	mov	r4, r1
 800823c:	d458      	bmi.n	80082f0 <__sflush_r+0xc0>
 800823e:	684b      	ldr	r3, [r1, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc05      	bgt.n	8008250 <__sflush_r+0x20>
 8008244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	dc02      	bgt.n	8008250 <__sflush_r+0x20>
 800824a:	2000      	movs	r0, #0
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008252:	2e00      	cmp	r6, #0
 8008254:	d0f9      	beq.n	800824a <__sflush_r+0x1a>
 8008256:	2300      	movs	r3, #0
 8008258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800825c:	682f      	ldr	r7, [r5, #0]
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	d032      	beq.n	80082c8 <__sflush_r+0x98>
 8008262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	075a      	lsls	r2, r3, #29
 8008268:	d505      	bpl.n	8008276 <__sflush_r+0x46>
 800826a:	6863      	ldr	r3, [r4, #4]
 800826c:	1ac0      	subs	r0, r0, r3
 800826e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008270:	b10b      	cbz	r3, 8008276 <__sflush_r+0x46>
 8008272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008274:	1ac0      	subs	r0, r0, r3
 8008276:	2300      	movs	r3, #0
 8008278:	4602      	mov	r2, r0
 800827a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800827c:	6a21      	ldr	r1, [r4, #32]
 800827e:	4628      	mov	r0, r5
 8008280:	47b0      	blx	r6
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	d106      	bne.n	8008296 <__sflush_r+0x66>
 8008288:	6829      	ldr	r1, [r5, #0]
 800828a:	291d      	cmp	r1, #29
 800828c:	d82c      	bhi.n	80082e8 <__sflush_r+0xb8>
 800828e:	4a2a      	ldr	r2, [pc, #168]	; (8008338 <__sflush_r+0x108>)
 8008290:	40ca      	lsrs	r2, r1
 8008292:	07d6      	lsls	r6, r2, #31
 8008294:	d528      	bpl.n	80082e8 <__sflush_r+0xb8>
 8008296:	2200      	movs	r2, #0
 8008298:	6062      	str	r2, [r4, #4]
 800829a:	04d9      	lsls	r1, r3, #19
 800829c:	6922      	ldr	r2, [r4, #16]
 800829e:	6022      	str	r2, [r4, #0]
 80082a0:	d504      	bpl.n	80082ac <__sflush_r+0x7c>
 80082a2:	1c42      	adds	r2, r0, #1
 80082a4:	d101      	bne.n	80082aa <__sflush_r+0x7a>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b903      	cbnz	r3, 80082ac <__sflush_r+0x7c>
 80082aa:	6560      	str	r0, [r4, #84]	; 0x54
 80082ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ae:	602f      	str	r7, [r5, #0]
 80082b0:	2900      	cmp	r1, #0
 80082b2:	d0ca      	beq.n	800824a <__sflush_r+0x1a>
 80082b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b8:	4299      	cmp	r1, r3
 80082ba:	d002      	beq.n	80082c2 <__sflush_r+0x92>
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff faa5 	bl	800780c <_free_r>
 80082c2:	2000      	movs	r0, #0
 80082c4:	6360      	str	r0, [r4, #52]	; 0x34
 80082c6:	e7c1      	b.n	800824c <__sflush_r+0x1c>
 80082c8:	6a21      	ldr	r1, [r4, #32]
 80082ca:	2301      	movs	r3, #1
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b0      	blx	r6
 80082d0:	1c41      	adds	r1, r0, #1
 80082d2:	d1c7      	bne.n	8008264 <__sflush_r+0x34>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0c4      	beq.n	8008264 <__sflush_r+0x34>
 80082da:	2b1d      	cmp	r3, #29
 80082dc:	d001      	beq.n	80082e2 <__sflush_r+0xb2>
 80082de:	2b16      	cmp	r3, #22
 80082e0:	d101      	bne.n	80082e6 <__sflush_r+0xb6>
 80082e2:	602f      	str	r7, [r5, #0]
 80082e4:	e7b1      	b.n	800824a <__sflush_r+0x1a>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	e7ad      	b.n	800824c <__sflush_r+0x1c>
 80082f0:	690f      	ldr	r7, [r1, #16]
 80082f2:	2f00      	cmp	r7, #0
 80082f4:	d0a9      	beq.n	800824a <__sflush_r+0x1a>
 80082f6:	0793      	lsls	r3, r2, #30
 80082f8:	680e      	ldr	r6, [r1, #0]
 80082fa:	bf08      	it	eq
 80082fc:	694b      	ldreq	r3, [r1, #20]
 80082fe:	600f      	str	r7, [r1, #0]
 8008300:	bf18      	it	ne
 8008302:	2300      	movne	r3, #0
 8008304:	eba6 0807 	sub.w	r8, r6, r7
 8008308:	608b      	str	r3, [r1, #8]
 800830a:	f1b8 0f00 	cmp.w	r8, #0
 800830e:	dd9c      	ble.n	800824a <__sflush_r+0x1a>
 8008310:	6a21      	ldr	r1, [r4, #32]
 8008312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008314:	4643      	mov	r3, r8
 8008316:	463a      	mov	r2, r7
 8008318:	4628      	mov	r0, r5
 800831a:	47b0      	blx	r6
 800831c:	2800      	cmp	r0, #0
 800831e:	dc06      	bgt.n	800832e <__sflush_r+0xfe>
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e78e      	b.n	800824c <__sflush_r+0x1c>
 800832e:	4407      	add	r7, r0
 8008330:	eba8 0800 	sub.w	r8, r8, r0
 8008334:	e7e9      	b.n	800830a <__sflush_r+0xda>
 8008336:	bf00      	nop
 8008338:	20400001 	.word	0x20400001

0800833c <_fflush_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	690b      	ldr	r3, [r1, #16]
 8008340:	4605      	mov	r5, r0
 8008342:	460c      	mov	r4, r1
 8008344:	b913      	cbnz	r3, 800834c <_fflush_r+0x10>
 8008346:	2500      	movs	r5, #0
 8008348:	4628      	mov	r0, r5
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	b118      	cbz	r0, 8008356 <_fflush_r+0x1a>
 800834e:	6983      	ldr	r3, [r0, #24]
 8008350:	b90b      	cbnz	r3, 8008356 <_fflush_r+0x1a>
 8008352:	f000 f887 	bl	8008464 <__sinit>
 8008356:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <_fflush_r+0x6c>)
 8008358:	429c      	cmp	r4, r3
 800835a:	d11b      	bne.n	8008394 <_fflush_r+0x58>
 800835c:	686c      	ldr	r4, [r5, #4]
 800835e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0ef      	beq.n	8008346 <_fflush_r+0xa>
 8008366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008368:	07d0      	lsls	r0, r2, #31
 800836a:	d404      	bmi.n	8008376 <_fflush_r+0x3a>
 800836c:	0599      	lsls	r1, r3, #22
 800836e:	d402      	bmi.n	8008376 <_fflush_r+0x3a>
 8008370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008372:	f000 f915 	bl	80085a0 <__retarget_lock_acquire_recursive>
 8008376:	4628      	mov	r0, r5
 8008378:	4621      	mov	r1, r4
 800837a:	f7ff ff59 	bl	8008230 <__sflush_r>
 800837e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008380:	07da      	lsls	r2, r3, #31
 8008382:	4605      	mov	r5, r0
 8008384:	d4e0      	bmi.n	8008348 <_fflush_r+0xc>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	059b      	lsls	r3, r3, #22
 800838a:	d4dd      	bmi.n	8008348 <_fflush_r+0xc>
 800838c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838e:	f000 f908 	bl	80085a2 <__retarget_lock_release_recursive>
 8008392:	e7d9      	b.n	8008348 <_fflush_r+0xc>
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <_fflush_r+0x70>)
 8008396:	429c      	cmp	r4, r3
 8008398:	d101      	bne.n	800839e <_fflush_r+0x62>
 800839a:	68ac      	ldr	r4, [r5, #8]
 800839c:	e7df      	b.n	800835e <_fflush_r+0x22>
 800839e:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <_fflush_r+0x74>)
 80083a0:	429c      	cmp	r4, r3
 80083a2:	bf08      	it	eq
 80083a4:	68ec      	ldreq	r4, [r5, #12]
 80083a6:	e7da      	b.n	800835e <_fflush_r+0x22>
 80083a8:	08008cbc 	.word	0x08008cbc
 80083ac:	08008cdc 	.word	0x08008cdc
 80083b0:	08008c9c 	.word	0x08008c9c

080083b4 <std>:
 80083b4:	2300      	movs	r3, #0
 80083b6:	b510      	push	{r4, lr}
 80083b8:	4604      	mov	r4, r0
 80083ba:	e9c0 3300 	strd	r3, r3, [r0]
 80083be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083c2:	6083      	str	r3, [r0, #8]
 80083c4:	8181      	strh	r1, [r0, #12]
 80083c6:	6643      	str	r3, [r0, #100]	; 0x64
 80083c8:	81c2      	strh	r2, [r0, #14]
 80083ca:	6183      	str	r3, [r0, #24]
 80083cc:	4619      	mov	r1, r3
 80083ce:	2208      	movs	r2, #8
 80083d0:	305c      	adds	r0, #92	; 0x5c
 80083d2:	f7fd fb45 	bl	8005a60 <memset>
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <std+0x38>)
 80083d8:	6263      	str	r3, [r4, #36]	; 0x24
 80083da:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <std+0x3c>)
 80083dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80083de:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <std+0x40>)
 80083e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <std+0x44>)
 80083e4:	6224      	str	r4, [r4, #32]
 80083e6:	6323      	str	r3, [r4, #48]	; 0x30
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	08008709 	.word	0x08008709
 80083f0:	0800872b 	.word	0x0800872b
 80083f4:	08008763 	.word	0x08008763
 80083f8:	08008787 	.word	0x08008787

080083fc <_cleanup_r>:
 80083fc:	4901      	ldr	r1, [pc, #4]	; (8008404 <_cleanup_r+0x8>)
 80083fe:	f000 b8af 	b.w	8008560 <_fwalk_reent>
 8008402:	bf00      	nop
 8008404:	0800833d 	.word	0x0800833d

08008408 <__sfmoreglue>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	2268      	movs	r2, #104	; 0x68
 800840c:	1e4d      	subs	r5, r1, #1
 800840e:	4355      	muls	r5, r2
 8008410:	460e      	mov	r6, r1
 8008412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008416:	f7ff fa65 	bl	80078e4 <_malloc_r>
 800841a:	4604      	mov	r4, r0
 800841c:	b140      	cbz	r0, 8008430 <__sfmoreglue+0x28>
 800841e:	2100      	movs	r1, #0
 8008420:	e9c0 1600 	strd	r1, r6, [r0]
 8008424:	300c      	adds	r0, #12
 8008426:	60a0      	str	r0, [r4, #8]
 8008428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800842c:	f7fd fb18 	bl	8005a60 <memset>
 8008430:	4620      	mov	r0, r4
 8008432:	bd70      	pop	{r4, r5, r6, pc}

08008434 <__sfp_lock_acquire>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__sfp_lock_acquire+0x8>)
 8008436:	f000 b8b3 	b.w	80085a0 <__retarget_lock_acquire_recursive>
 800843a:	bf00      	nop
 800843c:	20000375 	.word	0x20000375

08008440 <__sfp_lock_release>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__sfp_lock_release+0x8>)
 8008442:	f000 b8ae 	b.w	80085a2 <__retarget_lock_release_recursive>
 8008446:	bf00      	nop
 8008448:	20000375 	.word	0x20000375

0800844c <__sinit_lock_acquire>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__sinit_lock_acquire+0x8>)
 800844e:	f000 b8a7 	b.w	80085a0 <__retarget_lock_acquire_recursive>
 8008452:	bf00      	nop
 8008454:	20000376 	.word	0x20000376

08008458 <__sinit_lock_release>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__sinit_lock_release+0x8>)
 800845a:	f000 b8a2 	b.w	80085a2 <__retarget_lock_release_recursive>
 800845e:	bf00      	nop
 8008460:	20000376 	.word	0x20000376

08008464 <__sinit>:
 8008464:	b510      	push	{r4, lr}
 8008466:	4604      	mov	r4, r0
 8008468:	f7ff fff0 	bl	800844c <__sinit_lock_acquire>
 800846c:	69a3      	ldr	r3, [r4, #24]
 800846e:	b11b      	cbz	r3, 8008478 <__sinit+0x14>
 8008470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008474:	f7ff bff0 	b.w	8008458 <__sinit_lock_release>
 8008478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800847c:	6523      	str	r3, [r4, #80]	; 0x50
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <__sinit+0x68>)
 8008480:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <__sinit+0x6c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	62a2      	str	r2, [r4, #40]	; 0x28
 8008486:	42a3      	cmp	r3, r4
 8008488:	bf04      	itt	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	61a3      	streq	r3, [r4, #24]
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f820 	bl	80084d4 <__sfp>
 8008494:	6060      	str	r0, [r4, #4]
 8008496:	4620      	mov	r0, r4
 8008498:	f000 f81c 	bl	80084d4 <__sfp>
 800849c:	60a0      	str	r0, [r4, #8]
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 f818 	bl	80084d4 <__sfp>
 80084a4:	2200      	movs	r2, #0
 80084a6:	60e0      	str	r0, [r4, #12]
 80084a8:	2104      	movs	r1, #4
 80084aa:	6860      	ldr	r0, [r4, #4]
 80084ac:	f7ff ff82 	bl	80083b4 <std>
 80084b0:	68a0      	ldr	r0, [r4, #8]
 80084b2:	2201      	movs	r2, #1
 80084b4:	2109      	movs	r1, #9
 80084b6:	f7ff ff7d 	bl	80083b4 <std>
 80084ba:	68e0      	ldr	r0, [r4, #12]
 80084bc:	2202      	movs	r2, #2
 80084be:	2112      	movs	r1, #18
 80084c0:	f7ff ff78 	bl	80083b4 <std>
 80084c4:	2301      	movs	r3, #1
 80084c6:	61a3      	str	r3, [r4, #24]
 80084c8:	e7d2      	b.n	8008470 <__sinit+0xc>
 80084ca:	bf00      	nop
 80084cc:	08008924 	.word	0x08008924
 80084d0:	080083fd 	.word	0x080083fd

080084d4 <__sfp>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	4607      	mov	r7, r0
 80084d8:	f7ff ffac 	bl	8008434 <__sfp_lock_acquire>
 80084dc:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <__sfp+0x84>)
 80084de:	681e      	ldr	r6, [r3, #0]
 80084e0:	69b3      	ldr	r3, [r6, #24]
 80084e2:	b913      	cbnz	r3, 80084ea <__sfp+0x16>
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff ffbd 	bl	8008464 <__sinit>
 80084ea:	3648      	adds	r6, #72	; 0x48
 80084ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	d503      	bpl.n	80084fc <__sfp+0x28>
 80084f4:	6833      	ldr	r3, [r6, #0]
 80084f6:	b30b      	cbz	r3, 800853c <__sfp+0x68>
 80084f8:	6836      	ldr	r6, [r6, #0]
 80084fa:	e7f7      	b.n	80084ec <__sfp+0x18>
 80084fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008500:	b9d5      	cbnz	r5, 8008538 <__sfp+0x64>
 8008502:	4b16      	ldr	r3, [pc, #88]	; (800855c <__sfp+0x88>)
 8008504:	60e3      	str	r3, [r4, #12]
 8008506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800850a:	6665      	str	r5, [r4, #100]	; 0x64
 800850c:	f000 f847 	bl	800859e <__retarget_lock_init_recursive>
 8008510:	f7ff ff96 	bl	8008440 <__sfp_lock_release>
 8008514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800851c:	6025      	str	r5, [r4, #0]
 800851e:	61a5      	str	r5, [r4, #24]
 8008520:	2208      	movs	r2, #8
 8008522:	4629      	mov	r1, r5
 8008524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008528:	f7fd fa9a 	bl	8005a60 <memset>
 800852c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008534:	4620      	mov	r0, r4
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008538:	3468      	adds	r4, #104	; 0x68
 800853a:	e7d9      	b.n	80084f0 <__sfp+0x1c>
 800853c:	2104      	movs	r1, #4
 800853e:	4638      	mov	r0, r7
 8008540:	f7ff ff62 	bl	8008408 <__sfmoreglue>
 8008544:	4604      	mov	r4, r0
 8008546:	6030      	str	r0, [r6, #0]
 8008548:	2800      	cmp	r0, #0
 800854a:	d1d5      	bne.n	80084f8 <__sfp+0x24>
 800854c:	f7ff ff78 	bl	8008440 <__sfp_lock_release>
 8008550:	230c      	movs	r3, #12
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	e7ee      	b.n	8008534 <__sfp+0x60>
 8008556:	bf00      	nop
 8008558:	08008924 	.word	0x08008924
 800855c:	ffff0001 	.word	0xffff0001

08008560 <_fwalk_reent>:
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	4606      	mov	r6, r0
 8008566:	4688      	mov	r8, r1
 8008568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800856c:	2700      	movs	r7, #0
 800856e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008572:	f1b9 0901 	subs.w	r9, r9, #1
 8008576:	d505      	bpl.n	8008584 <_fwalk_reent+0x24>
 8008578:	6824      	ldr	r4, [r4, #0]
 800857a:	2c00      	cmp	r4, #0
 800857c:	d1f7      	bne.n	800856e <_fwalk_reent+0xe>
 800857e:	4638      	mov	r0, r7
 8008580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008584:	89ab      	ldrh	r3, [r5, #12]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d907      	bls.n	800859a <_fwalk_reent+0x3a>
 800858a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800858e:	3301      	adds	r3, #1
 8008590:	d003      	beq.n	800859a <_fwalk_reent+0x3a>
 8008592:	4629      	mov	r1, r5
 8008594:	4630      	mov	r0, r6
 8008596:	47c0      	blx	r8
 8008598:	4307      	orrs	r7, r0
 800859a:	3568      	adds	r5, #104	; 0x68
 800859c:	e7e9      	b.n	8008572 <_fwalk_reent+0x12>

0800859e <__retarget_lock_init_recursive>:
 800859e:	4770      	bx	lr

080085a0 <__retarget_lock_acquire_recursive>:
 80085a0:	4770      	bx	lr

080085a2 <__retarget_lock_release_recursive>:
 80085a2:	4770      	bx	lr

080085a4 <__swhatbuf_r>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	460e      	mov	r6, r1
 80085a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ac:	2900      	cmp	r1, #0
 80085ae:	b096      	sub	sp, #88	; 0x58
 80085b0:	4614      	mov	r4, r2
 80085b2:	461d      	mov	r5, r3
 80085b4:	da08      	bge.n	80085c8 <__swhatbuf_r+0x24>
 80085b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	061a      	lsls	r2, r3, #24
 80085c0:	d410      	bmi.n	80085e4 <__swhatbuf_r+0x40>
 80085c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c6:	e00e      	b.n	80085e6 <__swhatbuf_r+0x42>
 80085c8:	466a      	mov	r2, sp
 80085ca:	f000 f903 	bl	80087d4 <_fstat_r>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	dbf1      	blt.n	80085b6 <__swhatbuf_r+0x12>
 80085d2:	9a01      	ldr	r2, [sp, #4]
 80085d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085dc:	425a      	negs	r2, r3
 80085de:	415a      	adcs	r2, r3
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	e7ee      	b.n	80085c2 <__swhatbuf_r+0x1e>
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	2000      	movs	r0, #0
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	b016      	add	sp, #88	; 0x58
 80085ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080085f0 <__smakebuf_r>:
 80085f0:	898b      	ldrh	r3, [r1, #12]
 80085f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085f4:	079d      	lsls	r5, r3, #30
 80085f6:	4606      	mov	r6, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	d507      	bpl.n	800860c <__smakebuf_r+0x1c>
 80085fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	2301      	movs	r3, #1
 8008606:	6163      	str	r3, [r4, #20]
 8008608:	b002      	add	sp, #8
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	ab01      	add	r3, sp, #4
 800860e:	466a      	mov	r2, sp
 8008610:	f7ff ffc8 	bl	80085a4 <__swhatbuf_r>
 8008614:	9900      	ldr	r1, [sp, #0]
 8008616:	4605      	mov	r5, r0
 8008618:	4630      	mov	r0, r6
 800861a:	f7ff f963 	bl	80078e4 <_malloc_r>
 800861e:	b948      	cbnz	r0, 8008634 <__smakebuf_r+0x44>
 8008620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008624:	059a      	lsls	r2, r3, #22
 8008626:	d4ef      	bmi.n	8008608 <__smakebuf_r+0x18>
 8008628:	f023 0303 	bic.w	r3, r3, #3
 800862c:	f043 0302 	orr.w	r3, r3, #2
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	e7e3      	b.n	80085fc <__smakebuf_r+0xc>
 8008634:	4b0d      	ldr	r3, [pc, #52]	; (800866c <__smakebuf_r+0x7c>)
 8008636:	62b3      	str	r3, [r6, #40]	; 0x28
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	6020      	str	r0, [r4, #0]
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	6163      	str	r3, [r4, #20]
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	6120      	str	r0, [r4, #16]
 800864a:	b15b      	cbz	r3, 8008664 <__smakebuf_r+0x74>
 800864c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008650:	4630      	mov	r0, r6
 8008652:	f000 f8d1 	bl	80087f8 <_isatty_r>
 8008656:	b128      	cbz	r0, 8008664 <__smakebuf_r+0x74>
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	f043 0301 	orr.w	r3, r3, #1
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	89a0      	ldrh	r0, [r4, #12]
 8008666:	4305      	orrs	r5, r0
 8008668:	81a5      	strh	r5, [r4, #12]
 800866a:	e7cd      	b.n	8008608 <__smakebuf_r+0x18>
 800866c:	080083fd 	.word	0x080083fd

08008670 <_malloc_usable_size_r>:
 8008670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008674:	1f18      	subs	r0, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfbc      	itt	lt
 800867a:	580b      	ldrlt	r3, [r1, r0]
 800867c:	18c0      	addlt	r0, r0, r3
 800867e:	4770      	bx	lr

08008680 <_raise_r>:
 8008680:	291f      	cmp	r1, #31
 8008682:	b538      	push	{r3, r4, r5, lr}
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	d904      	bls.n	8008694 <_raise_r+0x14>
 800868a:	2316      	movs	r3, #22
 800868c:	6003      	str	r3, [r0, #0]
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008696:	b112      	cbz	r2, 800869e <_raise_r+0x1e>
 8008698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800869c:	b94b      	cbnz	r3, 80086b2 <_raise_r+0x32>
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 f830 	bl	8008704 <_getpid_r>
 80086a4:	462a      	mov	r2, r5
 80086a6:	4601      	mov	r1, r0
 80086a8:	4620      	mov	r0, r4
 80086aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ae:	f000 b817 	b.w	80086e0 <_kill_r>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d00a      	beq.n	80086cc <_raise_r+0x4c>
 80086b6:	1c59      	adds	r1, r3, #1
 80086b8:	d103      	bne.n	80086c2 <_raise_r+0x42>
 80086ba:	2316      	movs	r3, #22
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	2001      	movs	r0, #1
 80086c0:	e7e7      	b.n	8008692 <_raise_r+0x12>
 80086c2:	2400      	movs	r4, #0
 80086c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086c8:	4628      	mov	r0, r5
 80086ca:	4798      	blx	r3
 80086cc:	2000      	movs	r0, #0
 80086ce:	e7e0      	b.n	8008692 <_raise_r+0x12>

080086d0 <raise>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	; (80086dc <raise+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bfd3 	b.w	8008680 <_raise_r>
 80086da:	bf00      	nop
 80086dc:	20000014 	.word	0x20000014

080086e0 <_kill_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d07      	ldr	r5, [pc, #28]	; (8008700 <_kill_r+0x20>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	f7f9 fdb5 	bl	800225c <_kill>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d102      	bne.n	80086fc <_kill_r+0x1c>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	b103      	cbz	r3, 80086fc <_kill_r+0x1c>
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	20000370 	.word	0x20000370

08008704 <_getpid_r>:
 8008704:	f7f9 bda2 	b.w	800224c <_getpid>

08008708 <__sread>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	f000 f894 	bl	800883c <_read_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	bfab      	itete	ge
 8008718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800871a:	89a3      	ldrhlt	r3, [r4, #12]
 800871c:	181b      	addge	r3, r3, r0
 800871e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008722:	bfac      	ite	ge
 8008724:	6563      	strge	r3, [r4, #84]	; 0x54
 8008726:	81a3      	strhlt	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__swrite>:
 800872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	461f      	mov	r7, r3
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	05db      	lsls	r3, r3, #23
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4616      	mov	r6, r2
 800873a:	d505      	bpl.n	8008748 <__swrite+0x1e>
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	f000 f868 	bl	8008818 <_lseek_r>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800875e:	f000 b817 	b.w	8008790 <_write_r>

08008762 <__sseek>:
 8008762:	b510      	push	{r4, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 f855 	bl	8008818 <_lseek_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	bf15      	itete	ne
 8008774:	6560      	strne	r0, [r4, #84]	; 0x54
 8008776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800877a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800877e:	81a3      	strheq	r3, [r4, #12]
 8008780:	bf18      	it	ne
 8008782:	81a3      	strhne	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__sclose>:
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 b813 	b.w	80087b4 <_close_r>
	...

08008790 <_write_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d07      	ldr	r5, [pc, #28]	; (80087b0 <_write_r+0x20>)
 8008794:	4604      	mov	r4, r0
 8008796:	4608      	mov	r0, r1
 8008798:	4611      	mov	r1, r2
 800879a:	2200      	movs	r2, #0
 800879c:	602a      	str	r2, [r5, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	f7f9 fd93 	bl	80022ca <_write>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_write_r+0x1e>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_write_r+0x1e>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	20000370 	.word	0x20000370

080087b4 <_close_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d06      	ldr	r5, [pc, #24]	; (80087d0 <_close_r+0x1c>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	602b      	str	r3, [r5, #0]
 80087c0:	f7f9 fd9f 	bl	8002302 <_close>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_close_r+0x1a>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_close_r+0x1a>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20000370 	.word	0x20000370

080087d4 <_fstat_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_fstat_r+0x20>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	f7f9 fd9a 	bl	800231a <_fstat>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d102      	bne.n	80087f0 <_fstat_r+0x1c>
 80087ea:	682b      	ldr	r3, [r5, #0]
 80087ec:	b103      	cbz	r3, 80087f0 <_fstat_r+0x1c>
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	20000370 	.word	0x20000370

080087f8 <_isatty_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_isatty_r+0x1c>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	f7f9 fd99 	bl	800233a <_isatty>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_isatty_r+0x1a>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b103      	cbz	r3, 8008812 <_isatty_r+0x1a>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	20000370 	.word	0x20000370

08008818 <_lseek_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d07      	ldr	r5, [pc, #28]	; (8008838 <_lseek_r+0x20>)
 800881c:	4604      	mov	r4, r0
 800881e:	4608      	mov	r0, r1
 8008820:	4611      	mov	r1, r2
 8008822:	2200      	movs	r2, #0
 8008824:	602a      	str	r2, [r5, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f7f9 fd92 	bl	8002350 <_lseek>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_lseek_r+0x1e>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_lseek_r+0x1e>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20000370 	.word	0x20000370

0800883c <_read_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d07      	ldr	r5, [pc, #28]	; (800885c <_read_r+0x20>)
 8008840:	4604      	mov	r4, r0
 8008842:	4608      	mov	r0, r1
 8008844:	4611      	mov	r1, r2
 8008846:	2200      	movs	r2, #0
 8008848:	602a      	str	r2, [r5, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	f7f9 fd20 	bl	8002290 <_read>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d102      	bne.n	800885a <_read_r+0x1e>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	b103      	cbz	r3, 800885a <_read_r+0x1e>
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	20000370 	.word	0x20000370

08008860 <_init>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr

0800886c <_fini>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr
